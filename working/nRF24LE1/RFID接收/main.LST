C51 COMPILER V9.00   MAIN                                                                  10/26/2011 16:27:04 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN main.OBJ
COMPILER INVOKED BY: C:\KeilC51\C51\BIN\C51.EXE main.c OMF2 BROWSE DEBUG

line level    source

   1          /*深圳云佳科技无线应用，应用无限*/
   2          /*********************************************************************
   3          功能:
   4                  RFID READER接收程序
   5          说明:
   6                  收到数据显示灯闪烁一下，并通过串口上显示ID值
   7          **********************************************************************/
   8          
   9          #include "reg24le1.h"
  10          #include <stdint.h>
  11          #include "API.h"
  12          #include "hal_uart.h"
  13          
  14          //#define       PIN24
  15          #define PIN32
  16          //#define       PIN48
  17          
  18          #ifdef  PIN24
              sbit S3  = P0^6;                                // 1/0=未按/按下
              sbit S2  = P0^4;                                // 1/0=未按/按下
              sbit S1  = P0^3;                                // 1/0=未按/按下
              
              sbit LED3 = P0^2;                                       // 1/0=灭/亮
              sbit LED2 = P0^1;                               // 1/0=灭/亮
              sbit LED1 = P0^0;                               // 1/0=灭/亮
              
              #define p0dir   0xd8
              #define p1dir   0xff
              #endif
  30          
  31          #ifdef  PIN32
  32          sbit S3  = P1^4;                                // 1/0=未按/按下
  33          sbit S2  = P1^3;                                // 1/0=未按/按下
  34          sbit S1  = P1^2;                                // 1/0=未按/按下
  35          
  36          sbit LED3 = P0^1;                               // 1/0=灭/亮
  37          sbit LED2 = P0^2;                               // 1/0=灭/亮
  38          sbit LED1 = P0^0;                               // 1/0=灭/亮
  39          
  40          #define p0dir   0xf0
  41          #define p1dir   0xff
  42          #endif
  43          
  44          #ifdef  PIN48
              sbit S3  = P0^7;                                // 1/0=未按/按下
              sbit S2  = P0^6;                                // 1/0=未按/按下
              sbit S1  = P0^5;                                // 1/0=未按/按下
              
              sbit LED3 = P0^2;                               // 1/0=灭/亮
              sbit LED2 = P0^1;                               // 1/0=灭/亮
              sbit LED1 = P0^0;                               // 1/0=灭/亮
              
              #define p0dir   0xf0
              #define p1dir   0x02
              #endif
C51 COMPILER V9.00   MAIN                                                                  10/26/2011 16:27:04 PAGE 2   

  56          
  57          #define INTERRUPT_RFIRQ 9
  58          
  59          #define TX_ADR_WIDTH    5                                       // RF收发地址共5 bytes 
  60          #define TX_PLOAD_WIDTH  20                                      // 数据包长度为20 bytes
  61          
  62          uint8_t const TX_ADDRESS[TX_ADR_WIDTH]  = {0x34,0x56,0x78,0x90,0x12}; // 定义RF收发地址
  63          
  64          uint8_t data rx_buf[TX_PLOAD_WIDTH];
  65          
  66          uint8_t bdata sta;
  67          sbit    RX_DR   =sta^6;
  68          sbit    TX_DS   =sta^5;
  69          sbit    MAX_RT  =sta^4;
  70          /**************************************************
  71          功能：延时
  72          **************************************************/
  73          void delay(uint16_t x)
  74          {
  75   1          uint16_t i,j;
  76   1          i=0;
  77   1          for(i=0;i<x;i++)
  78   1          {
  79   2             j=108;
  80   2                 ;
  81   2             while(j--);
  82   2          }
  83   1      }
  84          /**************************************************
  85          功能：硬件SPI读写
  86          **************************************************/
  87          uint8_t SPI_RW(uint8_t value)
  88          {
  89   1        SPIRDAT = value;
  90   1                                                                                                     
  91   1        while(!(SPIRSTAT & 0x02));                                    // 等待SPI传输完成
  92   1      
  93   1        return SPIRDAT;                                               // 返回读出值
  94   1      }
  95          /**************************************************
  96          功能：写RF寄存器，读RF状态值
  97          **************************************************/
  98          uint8_t SPI_RW_Reg(uint8_t reg, uint8_t value)
  99          {
 100   1              uint8_t status;
 101   1      
 102   1              RFCSN = 0;                      
 103   1              status = SPI_RW(reg);                                           // 选择RF寄存器
 104   1              SPI_RW(value);                                                  // 写入数据
 105   1              RFCSN = 1;                      
 106   1      
 107   1              return(status);                                                 // 返回RF状态值
 108   1      }
 109          /**************************************************
 110          功能：读RF寄存器
 111          **************************************************/
 112          uint8_t SPI_Read(uint8_t reg)
 113          {
 114   1              uint8_t reg_val;
 115   1      
 116   1              RFCSN = 0;                                      
 117   1              SPI_RW(reg);                                                    // 选择RF寄存器
C51 COMPILER V9.00   MAIN                                                                  10/26/2011 16:27:04 PAGE 3   

 118   1              reg_val = SPI_RW(0);                                            // 读出数据
 119   1              RFCSN = 1;                                      
 120   1      
 121   1              return(reg_val);                                                // 返回RF状态值
 122   1      }
 123          /**************************************************
 124          功能：读RF寄存器多字节数据到缓冲区
 125          **************************************************/
 126          uint8_t SPI_Read_Buf(uint8_t reg, uint8_t *pBuf, uint8_t bytes)
 127          {
 128   1              uint8_t status,byte_ctr;
 129   1      
 130   1              RFCSN = 0;                              
 131   1              status = SPI_RW(reg);                                   // 选择RF寄存器
 132   1      
 133   1              for(byte_ctr=0;byte_ctr<bytes;byte_ctr++)
 134   1              pBuf[byte_ctr] = SPI_RW(0);                     // 连接读出数据
 135   1      
 136   1              RFCSN = 1;                          
 137   1      
 138   1              return(status);                                         // 返回RF状态值
 139   1      }
 140          /**************************************************
 141          功能：把缓冲区的多字节数据写到RF寄存器
 142          **************************************************/
 143          uint8_t SPI_Write_Buf(uint8_t reg, uint8_t *pBuf, uint8_t bytes)
 144          {
 145   1              uint8_t status,byte_ctr;
 146   1      
 147   1              RFCSN = 0;                              
 148   1              status = SPI_RW(reg);                                           // 选择RF寄存器
 149   1              for(byte_ctr=0; byte_ctr<bytes; byte_ctr++) // 连接写入数据
 150   1              SPI_RW(*pBuf++);
 151   1              RFCSN = 1;                                      
 152   1              return(status);                                                 // 返回RF状态值
 153   1      }
 154          
 155          /**************************************************
 156          功能：设置为接收模式
 157          **************************************************/
 158          void RX_Mode(void)
 159          {
 160   1              RFCE=0;
 161   1              SPI_RW_Reg(WRITE_REG + CONFIG, 0x0f);           // 上电, CRC为2 bytes,接收模式,允许RX_DR产生中断
 162   1              RFCE = 1;                                                                       // 启动接收模式
 163   1      }
 164          /**************************************************
 165          功能：RF初始化
 166          **************************************************/
 167          void rf_init(void)
 168          {
 169   1              RFCE = 0;                                               // RF关闭
 170   1              RFCKEN = 1;                                             // 启动RF时钟
 171   1              RF = 1;                                                 // 允许RF中断
 172   1              delay(1000);    
 173   1              SPI_Write_Buf(WRITE_REG + TX_ADDR, TX_ADDRESS, TX_ADR_WIDTH);           // 设置发射地址长度
 174   1              SPI_Write_Buf(WRITE_REG + RX_ADDR_P0, TX_ADDRESS, TX_ADR_WIDTH);        // 设置接收地址长度
 175   1              SPI_RW_Reg(WRITE_REG + EN_AA, 0x01);                            // 启动自动应答功能
 176   1              SPI_RW_Reg(WRITE_REG + EN_RXADDR, 0x01);                        // PIPE0接收数据
 177   1              SPI_RW_Reg(WRITE_REG + SETUP_RETR, 0x1a);                       // 自动重传10次
 178   1              SPI_RW_Reg(WRITE_REG + RF_CH, 40);                              // RF频率2440MHz
 179   1              SPI_RW_Reg(WRITE_REG + RF_SETUP, 0x0f);                         // 发射功率0dBm, 传输速率2Mbps,
C51 COMPILER V9.00   MAIN                                                                  10/26/2011 16:27:04 PAGE 4   

 180   1              SPI_RW_Reg(WRITE_REG + RX_PW_P0, TX_PLOAD_WIDTH);       // PIPE0 接收数据包长度
 181   1      }
 182          /**************************************************
 183          功能：RF中断服务程序
 184          **************************************************/
 185          void RF_IRQ(void) interrupt INTERRUPT_RFIRQ
 186          {
 187   1              sta=SPI_Read(STATUS);                                                           // 读出状态值
 188   1      
 189   1              if(RX_DR)                                                                       
 190   1              {
 191   2                      SPI_Read_Buf(RD_RX_PLOAD,rx_buf,TX_PLOAD_WIDTH);// 读出FIFO的数据
 192   2                      SPI_RW_Reg(FLUSH_RX,0);                                                 // 清除RX的FIFO
 193   2              }
 194   1      
 195   1              SPI_RW_Reg(WRITE_REG+STATUS,0x70);                                      // 清除所有中断标志 
 196   1      }
 197          /**************************************************
 198          功能：串口初始化子程序
 199          说明：波特率19.2K，使用内部波特率发生器
 200          **************************************************/
 201          void uart_init(void)
 202          {
 203   1          ES0 = 0;                                                    // 关UART0中断
 204   1          REN0 = 1;                                                   // 允许接收
 205   1          SM0 = 0;                                                    // 串口模式1，8bit可变波特率
 206   1          SM1 = 1;                   
 207   1          PCON |= 0x80;                                               // SMOD = 1
 208   1          ADCON |= 0x80;                                              // 选择内部波特率发生器
 209   1      
 210   1          S0RELL = 0xe6;                                              // 波特率19.2K(十进制998=十六进制0x03e6)
 211   1          S0RELH = 0x03;
 212   1          TI0 = 0;                                                                    // 清发送完成标志
 213   1              S0BUF=0x99;                                                                     // 送初值
 214   1      }
 215          /**************************************************
 216          功能：向串口发送1 byte数据
 217          **************************************************/
 218          void uart_putchar(uint8_t x)
 219          {
 220   1              while (!TI0);                                                           // 等待发送完成
 221   1              TI0=0;                                                                          // 清发送完成标志
 222   1              S0BUF=x;                                                                        // 发送数据
 223   1      }
 224          /**************************************************
 225          功能:I/O口初始化
 226          **************************************************/
 227          void io_init(void)
 228          {
 229   1              P0DIR = p0dir;                                                          // 设定I/O口输入输出
 230   1              P1DIR = p1dir;                                  
 231   1      
 232   1              LED1=LED2=LED3=0;                                                       // 灯全亮
 233   1              delay(1000);
 234   1              LED1=LED2=LED3=1;                                                       // 灯全灭                  
 235   1      }  
 236          /**************************************************
 237          功能：主程序
 238          **************************************************/
 239          void main(void)
 240          {
 241   1              io_init();                                                                      // I/O口初始化
C51 COMPILER V9.00   MAIN                                                                  10/26/2011 16:27:04 PAGE 5   

 242   1      //      P03 = 0;
 243   1      //      uart_init();                                    // 串口初始化 
 244   1              hal_uart_init(UART_BAUD_19K2);
 245   1              rf_init();                                                                      // RF初始化                            
 246   1              EA=1;                                       // 允许中断
 247   1      
 248   1              RX_Mode();                                                                      //进入接收模式
 249   1      
 250   1              uart_putchar('h');
 251   1              uart_putchar('e');
 252   1              uart_putchar('l');
 253   1              uart_putchar('l');
 254   1              uart_putchar('o');
 255   1      
 256   1      /*      hal_uart_putchar ('1');
 257   1              hal_uart_putchar ('e');
 258   1              hal_uart_putchar ('l');
 259   1              hal_uart_putchar ('l');
 260   1              hal_uart_putchar ('o');
 261   1      */
 262   1              delay(100);
 263   1              RX_DR = 0;
 264   1              while(1)
 265   1              {
 266   2                      if(RX_DR)                                                               // 数据已收到
 267   2                      {
 268   3                              sta=0;
 269   3      
 270   3                              LED2=0;
 271   3      /*                      uart_putchar(rx_buf[0]);                        // 显示所有ID值
 272   3                              uart_putchar(rx_buf[1]);
 273   3                              uart_putchar(rx_buf[2]);
 274   3                              uart_putchar(rx_buf[3]);
 275   3                              uart_putchar(rx_buf[4]);
 276   3                              uart_putchar(rx_buf[5]);
 277   3      */
 278   3                              hal_uart_putchar ('a');                 
 279   3                              delay(1000);
 280   3      
 281   3                              LED1=LED2=LED3=1;                                       // 灯全灭
 282   3                      }
 283   2              }       
 284   1      }                                       
 285                                                               
 286                                                  
 287          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    486    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     26      10
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
