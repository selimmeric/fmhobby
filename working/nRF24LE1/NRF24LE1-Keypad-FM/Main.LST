C51 COMPILER V9.00   MAIN                                                                  10/24/2011 23:20:19 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN Main.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE Main.c COMPACT OMF2 BROWSE INCDIR(.\air LCD remote) DEBUG

line level    source

   1          /*深圳云佳科技无线应用，应用无限*/
   2          /*********************************************************************
   3          功能:
   4                  RFID TARGET发射程序
   5          说明:
   6                  本程序采用定时2秒发射ID一次,发射完毕进入低功耗模式,低功耗电流3uA
   7                  ID长度为6 byte
   8          **********************************************************************/
   9          #include <reg24le1.h>
  10          #include <stdint.h>
  11          #include "API.h"
  12          //#define p0dir 0xf0
  13          //#define p1dir 0x02
  14          #define INTERRUPT_RFIRQ 9
  15          #define INTERRUPT_TICK  13  
  16          #define TX_ADR_WIDTH    5                                       // RF收发地址共5 bytes 
  17          #define TX_PLOAD_WIDTH  20                                      // 数据包长度为20 bytes
  18          uint8_t const TX_ADDRESS[TX_ADR_WIDTH]  = {0x34,0x56,0x78,0x90,0x12}; // 定义RF收发地址
  19          uint8_t data id_buf[TX_PLOAD_WIDTH]={0x01,0xe2,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
             -};
  20          uint8_t bdata mRFstatus;
  21          sbit    RX_DR   =mRFstatus^6;
  22          sbit    TX_DS   =mRFstatus^5;
  23          sbit    MAX_RT  =mRFstatus^4;
  24          //============================================
  25          #define P0_SLEEP_STATE      0x13
  26          #define P1_SLEEP_STATE      0x1C
  27          #define ROW0        P11
  28          #define ROW1        P10
  29          #define ROW2        P07
  30          #define ROW3        P06
  31          #define ROW4        P16
  32          
  33          #define COL0        P13
  34          #define COL0_PIN    3 //P1.3
  35          #define COL0_PDIR   P1DIR
  36          #define COL1        P12
  37          #define COL1_PIN    2 //P1.2
  38          #define COL1_PDIR   P1DIR
  39          #define COL2        P01
  40          #define COL2_PIN    1 //P0.1
  41          #define COL2_PDIR   P0DIR
  42          #define COL3        P00
  43          #define COL3_PIN    0 //P0.0
  44          #define COL3_PDIR   P0DIR
  45          
  46          #define LED0            P03
  47          #define LED1            P02             
  48          
  49          
  50          #define COL0_SET()    do { COL0_PDIR &= ~(1<<COL0_PIN); COL0=1; }while(0)
  51          #define COL1_SET()    do { COL1_PDIR &= ~(1<<COL1_PIN); COL1=1; }while(0)
  52          #define COL2_SET()    do { COL2_PDIR &= ~(1<<COL2_PIN); COL2=1; }while(0)
  53          #define COL3_SET()    do { COL3_PDIR &= ~(1<<COL3_PIN); COL3=1; }while(0)
  54          
C51 COMPILER V9.00   MAIN                                                                  10/24/2011 23:20:19 PAGE 2   

  55          #define COL0_CLR()    do { COL0=0; COL0_PDIR |= (1<<COL0_PIN); }while(0)
  56          #define COL1_CLR()    do { COL1=0; COL1_PDIR |= (1<<COL1_PIN); }while(0)
  57          #define COL2_CLR()    do { COL2=0; COL2_PDIR |= (1<<COL2_PIN); }while(0)
  58          #define COL3_CLR()    do { COL3=0; COL3_PDIR |= (1<<COL3_PIN); }while(0)
  59          
  60          
  61          static unsigned char mTFlag=0;
  62          static unsigned char mFlag1S=0;
  63          uint32_t mKeyMatrix[2];
  64          unsigned char key_flag=0;
  65          
  66          static uint8_t read_rows_ex(void);
  67          
  68          void timer0_ISR (void) interrupt 1
  69          {
  70   1              static unsigned char tCnt1S=0;
  71   1              static unsigned char tKey[4];
  72   1              unsigned char i;
  73   1      
  74   1              // 16MHz/12 = 0.75uS
  75   1              // 16bits counter 0.75uS * 65536 = 49.152mS
  76   1      
  77   1              // 13bits counter 0.75uS * 8 * 1024 = 6.144mS
  78   1              // 6.144mS * 8 = 49.152mS
  79   1      
  80   1              tCnt1S ++;
  81   1              if (tCnt1S >=17)
  82   1              {
  83   2                      mFlag1S = 1;            // Set Timer Flag 100mS 
  84   2                      tCnt1S = 0;
  85   2                      mKeyMatrix[1]=mKeyMatrix[0];
  86   2                      mKeyMatrix[0] = 0;
  87   2                      for (i=0; i<=3; i++)
  88   2                      {
  89   3                              mKeyMatrix[0] = mKeyMatrix[0] << 5;
  90   3                              mKeyMatrix[0] += tKey[i];
  91   3                      }               
  92   2              }
  93   1      
  94   1              if (1)
  95   1              {
  96   2              // Scan KeyMatrix
  97   2              switch (tCnt1S)
  98   2              {
  99   3                      case 0:
 100   3                              tKey[0] = 0;
 101   3                              tKey[1] = 0;
 102   3                              tKey[2] = 0;
 103   3                              tKey[3] = 0;
 104   3                              COL2_SET(); 
 105   3                              break;
 106   3                      case 1:
 107   3                              tKey[0] =  read_rows_ex();
 108   3                          COL2_CLR();
 109   3                              COL3_SET();                      
 110   3                              break;
 111   3                      case 2:
 112   3                              tKey[1] =  read_rows_ex();
 113   3                          COL3_CLR();
 114   3                              COL0_SET();                      
 115   3                              break;
 116   3                      case 3:
C51 COMPILER V9.00   MAIN                                                                  10/24/2011 23:20:19 PAGE 3   

 117   3                              tKey[2] =  read_rows_ex();
 118   3                          COL0_CLR();
 119   3                              COL1_SET();                      
 120   3                              break;
 121   3                      case 4:
 122   3                              tKey[3] =  read_rows_ex();
 123   3                          COL1_CLR();
 124   3                              break;          
 125   3                      default:
 126   3      
 127   3                              COL0_CLR();
 128   3                              COL1_CLR();
 129   3                              COL2_CLR();
 130   3                              COL3_CLR();
 131   3                              break;  
 132   3              }
 133   2              }       
 134   1      }
 135          
 136          
 137          /**************************************************
 138          功能：延时
 139          **************************************************/
 140          void delay(uint16_t x)
 141          {
 142   1          uint16_t i,j;
 143   1          i=0;
 144   1          for(i=0;i<x;i++)
 145   1          {
 146   2             j=108;
 147   2                 ;
 148   2             while(j--);
 149   2          }
 150   1      }
 151          //============================================
 152          void keyinit(void)
 153          {
 154   1        P0=0;
 155   1        P1=0;
 156   1      //P0DIR=0xec;   //  
 157   1        P0DIR=0xc0;   //  0b11000000
 158   1        P1DIR=0x43;   //  0b01000011
 159   1       // P0CON = 0x70;
 160   1       // P0CON = 0x71;
 161   1       // P0CON = 0x72;
 162   1       // P0CON = 0x73;
 163   1       // P0CON = 0x74;
 164   1       // P0CON = 0x75;
 165   1        P1CON = 0x31;         // P1.1 - Dig in.buf w/ pull down res
 166   1        P1CON = 0x30;         // P1.0 - Dig in.buf w/ pull down res
 167   1        P1CON = 0x36;         // P1.6 - Dig in.buf w/ pull down res
 168   1      
 169   1        P0CON = 0x37;         // P0.7 - Dig in.buf w/ pull down res
 170   1        P0CON = 0x36;         // P0.6 - Dig in.buf w/ pull down res
 171   1       // P1CON = 0x72;
 172   1       // P1CON = 0x73;
 173   1       // P1CON = 0x74;
 174   1       // P1CON = 0x75;
 175   1       
 176   1      }
 177          
 178          static uint8_t read_rows_ex(void)
C51 COMPILER V9.00   MAIN                                                                  10/24/2011 23:20:19 PAGE 4   

 179          {
 180   1        return  (uint8_t)(ROW0 | ((uint8_t)ROW1 << 1) | ((uint8_t)ROW2 << 2) | ((uint8_t)ROW3 << 3) | ((uint8_t)
             -ROW4 << 4));
 181   1      }
 182          
 183          
 184          
 185          /**************************************************
 186          功能：硬件SPI读写
 187          **************************************************/
 188          uint8_t SPI_RW(uint8_t value)
 189          {
 190   1        SPIRDAT = value;                                                                                     
 191   1        while(!(SPIRSTAT & 0x02));                                    // 等待SPI传输完成
 192   1        return SPIRDAT;                                               // 返回读出值
 193   1      }
 194          /**************************************************
 195          功能：写RF寄存器，读RF状态值
 196          **************************************************/
 197          uint8_t SPI_RW_Reg(uint8_t reg, uint8_t value)
 198          {
 199   1              uint8_t status;
 200   1              RFCSN = 0;                      
 201   1              status = SPI_RW(reg);                                           // 选择RF寄存器
 202   1              SPI_RW(value);                                                  // 写入数据
 203   1              RFCSN = 1;                      
 204   1              return(status);                                                 // 返回RF状态值
 205   1      }
 206          /**************************************************
 207          功能：读RF寄存器
 208          **************************************************/
 209          uint8_t SPI_Read(uint8_t reg)
 210          {
 211   1              uint8_t reg_val;
 212   1              RFCSN = 0;                                      
 213   1              SPI_RW(reg);                                                    // 选择RF寄存器
 214   1              reg_val = SPI_RW(0);                                            // 读出数据
 215   1              RFCSN = 1;                                      
 216   1              return(reg_val);                                                // 返回RF状态值
 217   1      }
 218          /**************************************************
 219          功能：把缓冲区的多字节数据写到RF寄存器
 220          **************************************************/
 221          uint8_t SPI_Write_Buf(uint8_t reg, uint8_t *pBuf, uint8_t bytes)
 222          {
 223   1              uint8_t status,byte_ctr;
 224   1              RFCSN = 0;                              
 225   1              status = SPI_RW(reg);                                           // 选择RF寄存器
 226   1              for(byte_ctr=0; byte_ctr<bytes; byte_ctr++) // 连接写入数据
 227   1              SPI_RW(*pBuf++);
 228   1              RFCSN = 1;                                      
 229   1              return(status);                                                 // 返回RF状态值
 230   1      }
 231          /**************************************************
 232          功能：设置为掉电模式
 233          **************************************************/
 234          /**************************************************
 235          功能：设置为发射模式
 236          **************************************************/
 237          void TX_Mode(void)
 238          {
 239   1              SPI_RW_Reg(WRITE_REG + CONFIG, 0x0e);                           // 上电, CRC为2 bytes,接收模式,允许RX_DR产生中断
C51 COMPILER V9.00   MAIN                                                                  10/24/2011 23:20:19 PAGE 5   

 240   1              SPI_Write_Buf(WR_TX_PLOAD, id_buf, TX_PLOAD_WIDTH); // 写数据到FIFO
 241   1              RFCE=1;                                                                                         // 启动发射
 242   1              delay(100);                                                                                     // 发射脉冲
 243   1              RFCE=0;                                                                                         
 244   1      }
 245          /**************************************************
 246          功能：RF初始化
 247          **************************************************/
 248          void rf_init(void)
 249          {
 250   1              RFCE = 0;                                               // RF关闭
 251   1              RFCKEN = 1;                                             // 启动RF时钟
 252   1              RF = 1;                                                 // 允许RF中断
 253   1              delay(1000);
 254   1              SPI_Write_Buf(WRITE_REG + TX_ADDR, TX_ADDRESS, TX_ADR_WIDTH);           // 设置发射地址长度
 255   1              SPI_Write_Buf(WRITE_REG + RX_ADDR_P0, TX_ADDRESS, TX_ADR_WIDTH);        // 设置接收地址长度
 256   1              SPI_RW_Reg(WRITE_REG + EN_AA, 0x01);                            // 启动自动应答功能
 257   1              SPI_RW_Reg(WRITE_REG + EN_RXADDR, 0x01);                        // PIPE0接收数据
 258   1              SPI_RW_Reg(WRITE_REG + SETUP_RETR, 0x1a);                       // 自动重传10次
 259   1              SPI_RW_Reg(WRITE_REG + RF_CH, 40);                              // RF频率2440MHz
 260   1              SPI_RW_Reg(WRITE_REG + RF_SETUP, 0x0f);                         // 发射功率0dBm, 传输速率2Mbps,
 261   1              SPI_RW_Reg(WRITE_REG + RX_PW_P0, TX_PLOAD_WIDTH);       // PIPE0 接收数据包长度                 
 262   1      }
 263          /**************************************************
 264          功能：RF中断服务程序
 265          **************************************************/
 266          void RF_IRQ(void) interrupt INTERRUPT_RFIRQ
 267          {
 268   1              mRFstatus=SPI_Read(STATUS);                                                             // 读出状态值
 269   1              SPI_RW_Reg(WRITE_REG+STATUS,0x70);                                      // 清除所有中断标志 
 270   1      }
 271          
 272          void RF_TX_BUF(void)
 273          {
 274   1                                      mRFstatus = 0;
 275   1                                      TX_Mode();                                                              // 发射数据
 276   1                                      while (!(TX_DS|MAX_RT));                                // 等待发射结束
 277   1                                      SPI_RW_Reg(FLUSH_TX,0); 
 278   1                                  SPI_RW_Reg(WRITE_REG+STATUS,0xFF);
 279   1                                      mRFstatus = 0;
 280   1      
 281   1      
 282   1      
 283   1      }                                       
 284           
 285          /**************************************************
 286          功能：主程序
 287          **************************************************/
 288          void main(void)
 289          {
 290   1          
 291   1              static unsigned char tCnt=0;
 292   1              unsigned char i;
 293   1              unsigned char tKey;
 294   1              uint32_t tKeyMatrix;
 295   1              rf_init();                                                                      // RF初始化
 296   1              keyinit();           
 297   1                               
 298   1      
 299   1      /*--------------------------------------
 300   1      Set Timer0 for 16-bit timer mode.  The
 301   1      timer counts to 65535, overflows, and
C51 COMPILER V9.00   MAIN                                                                  10/24/2011 23:20:19 PAGE 6   

 302   1      generates an interrupt.
 303   1      
 304   1      Set the Timer0 Run control bit.
 305   1      --------------------------------------*/
 306   1      TMOD = (TMOD & 0xF0) | 0x00;  /* Set T/C0 Mode 13bit timer mode*/
 307   1      ET0 = 1;                      /* Enable Timer 0 Interrupts */
 308   1      TR0 = 1;                      /* Start Timer 0 Running */
 309   1      EA = 1;                       /* Global Interrupt Enable */
 310   1      
 311   1                                                                                                      
 312   1              while (1)
 313   1              {
 314   2      
 315   2                      if (mFlag1S==1)                         // 100mS flag
 316   2                      {
 317   3                              tCnt ++;                                        
 318   3                              mFlag1S = 0;
 319   3                              if (tCnt>=5)
 320   3                              { 
 321   4                                      tCnt = 0;
 322   4                                      LED1 = !LED1;
 323   4      //                              LED1 = 0;
 324   4      //                              id_buf[8] = 0x27;
 325   4      //                              RF_TX_BUF();
 326   4      //                              id_buf[8] = 0x00;
 327   4      //                              RF_TX_BUF();
 328   4                              }
 329   3      
 330   3                              if (mKeyMatrix[0] != mKeyMatrix[1])     
 331   3                              {
 332   4                                      tKeyMatrix = mKeyMatrix[0];     
 333   4                                      if (mKeyMatrix[0]!=0x00)
 334   4                                      {
 335   5                                              LED0 = !LED0;   
 336   5      //                                      tKeyMatrix = mKeyMatrix[0];     
 337   5      //                                      tKeyMatrix &= 0x07;
 338   5      //                                      id_buf[8] = 0x1e;
 339   5      //                                      id_buf[8] += tKeyMatrix;
 340   5      //                                      id_buf[8]=0x26; 
 341   5                                              for (i=0; i<20;i++)
 342   5                                              {
 343   6                                                      if ((tKeyMatrix & 0x01) == 0x01)
 344   6                                                      {
 345   7                                                              tKey = 0x10 + i;
 346   7                                                              id_buf[8] = tKey;
 347   7      //                                                      id_buf[9] = tKey+1;
 348   7                                                              break;
 349   7                                                      }
 350   6                                                      tKeyMatrix = tKeyMatrix >> 1;                                           
 351   6                                              }                       
 352   5                                              
 353   5                                              tKey = 0x25;
 354   5      //                                      id_buf[7]=tKey +0;
 355   5                                              id_buf[8]=tKey +0;
 356   5                                              id_buf[9]=tKey +1;
 357   5                                              id_buf[10]=tKey +2;
 358   5                                              id_buf[11]=tKey +3;
 359   5                                              id_buf[12]=tKey +4;
 360   5                                              id_buf[13]=tKey +5;
 361   5                                      }
 362   4                                      else
 363   4                                      {
C51 COMPILER V9.00   MAIN                                                                  10/24/2011 23:20:19 PAGE 7   

 364   5                                              for (i=8; i<=13; i++)
 365   5                                              {
 366   6                                                      id_buf[i] = 0x00;
 367   6                                              }
 368   5      
 369   5                                      }
 370   4      
 371   4      //                              LED0 = 0;
 372   4                                      RF_TX_BUF();
 373   4                              }
 374   3                              else
 375   3                              {
 376   4                                              for (i=8; i<=13; i++)
 377   4                                              {
 378   5                                                      id_buf[i] = 0x00;
 379   5                                              }
 380   4      
 381   4                              }
 382   3                      }
 383   2              }
 384   1      
 385   1      
 386   1              while(0)
 387   1              {
 388   2                  if(key_flag)
 389   2                      {
 390   3                        tCnt ^=01;
 391   3                        LED0 = tCnt;
 392   3                        key_flag=0;
 393   3                        mRFstatus = 0;
 394   3                        TX_Mode();                                                            // 发射数据
 395   3                        while (!(TX_DS|MAX_RT));                              // 等待发射结束
 396   3                        SPI_RW_Reg(FLUSH_TX,0);       
 397   3                    SPI_RW_Reg(WRITE_REG+STATUS,0xFF);
 398   3                        mRFstatus = 0;
 399   3                        delay(100);
 400   3                      }
 401   2              }
 402   1      }                                       


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1013    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =     22      14
   DATA SIZE        =     21    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
