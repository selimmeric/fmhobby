C51 COMPILER V9.00   GZPAIR_HOST                                                           01/04/2011 18:06:46 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE GZPAIR_HOST
OBJECT MODULE PLACED IN .\build\gzpair_host.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE ..\..\..\gazell\common\gzpair_host.c LARGE OBJECTADVANCED OPTIMIZE(SIZE) BR
                    -OWSE INCDIR(..\..\..\hal\nrf24l01p;..\..\..\hal\nrf24lu1p;..\..\..\lib\assertions;..\..\..\lib\lib_crypt;..\common_setup
                    -;..\..\..\gazell\common;..\..\..\gazell\nrf24lu1) DEFINE(NRFREADY_DEMO_MODE) DEBUG PRINT(.\lst\gzpair_host.lst) OBJECT(.
                    -\build\gzpair_host.obj)

line level    source

   1          /* Copyright (c) 2009 Nordic Semiconductor. All Rights Reserved.
   2           *
   3           * The information contained herein is property of Nordic Semiconductor ASA.
   4           * Terms and conditions of usage are described in detail in NORDIC
   5           * SEMICONDUCTOR STANDARD SOFTWARE LICENSE AGREEMENT. 
   6           *
   7           * Licensees are granted free, non-transferable use of the information. NO
   8           * WARRENTY of ANY KIND is provided. This heading must NOT be removed from
   9           * the file.                                                                                
  10           *
  11           * $LastChangedRevision$
  12           */ 
  13          
  14          /** @file
  15           * @brief Implementation of the Gazell Pairing Library Host functions.
  16          */
  17          
  18          #include "gzpair.h"
  19          #include "gzll.h"
  20          #include "string.h"
  21          
  22          //-----------------------------------------------------------------------------
  23          // "Device database" contents
  24          //-----------------------------------------------------------------------------
  25          #define GZPAIR_DEVICE_DB_AGE 0
  26          #define GZPAIR_DEVICE_DB_PIPE (GZPAIR_DEVICE_DB_AGE + 5)
  27          #define GZPAIR_DEVICE_DB_DEVICE_TYPE (GZPAIR_DEVICE_DB_PIPE + 5)
  28          #define GZPAIR_DEVICE_DB_SIZE (GZPAIR_DEVICE_DB_DEVICE_TYPE + 5)
  29          
  30          static xdata uint8_t gzpair_device_db[GZPAIR_DEVICE_DB_SIZE];
  31          
  32          #define GZPAIR_FLASH_PAGE_SIZE 512
  33          #define GZPAIR_FLASH_BASE_ADDRESS (GZPAIR_FLASH_PAGE_SIZE * GZPAIR_FLASH_PARAMETER_PAGE)
  34          
  35          //-----------------------------------------------------------------------------
  36          // Internal functions
  37          //-----------------------------------------------------------------------------
  38          static uint8_t gzpair_db_device_add(uint8_t device_type);
  39          static uint8_t gzpair_db_device_type_remove(uint8_t device_type);
  40          static void gzpair_db_pipe_remove(uint8_t pipe);
  41          static void gzpair_db_clear(void);
  42          static uint8_t gzpair_db_get_youngest(void);
  43          
  44          static void gzpair_set_all_parameters(uint8_t* src);
  45          static void gzpair_get_all_parameters(uint8_t* dst);
  46          static void gzpair_clear_all_parameters(void);
  47          
  48          static void gzpair_update_rx_pipes(void);
  49          
  50          //-----------------------------------------------------------------------------
  51          // Definition of array for storing parameters in non volatile memory 
  52          //-----------------------------------------------------------------------------
C51 COMPILER V9.00   GZPAIR_HOST                                                           01/04/2011 18:06:46 PAGE 2   

  53          #define GZPAIR_PAIRING_ID_VAL 0xAA
  54          
  55          #define GZPAIR_PAIRING_ID 0
  56          #define GZPAIR_PAIRING_DEVICE_DB (GZPAIR_PAIRING_ID + 1)
  57          #define GZPAIR_PAIRING_CRYPT_SETUP (GZPAIR_PAIRING_DEVICE_DB + GZPAIR_DEVICE_DB_SIZE)
  58          #define GZPAIR_PAIRING_ADDRESS_P1 (GZPAIR_PAIRING_CRYPT_SETUP + 1)
  59          #define GZPAIR_PAIRING_ADDRESS_P2 (GZPAIR_PAIRING_ADDRESS_P1 + 5)
  60          #define GZPAIR_PAIRING_ADDRESS_P3 (GZPAIR_PAIRING_ADDRESS_P2 + 1)
  61          #define GZPAIR_PAIRING_ADDRESS_P4 (GZPAIR_PAIRING_ADDRESS_P3 + 1)
  62          #define GZPAIR_PAIRING_ADDRESS_P5 (GZPAIR_PAIRING_ADDRESS_P4 + 1)
  63          #define GZPAIR_PAIRING_AES_KEYS (GZPAIR_PAIRING_ADDRESS_P5 + 1)
  64          #define GZPAIR_PAIRING_PARAMETER_SIZE (GZPAIR_PAIRING_AES_KEYS + (16 * 5))
  65          
  66          //-----------------------------------------------------------------------------
  67          // Global variables 
  68          //-----------------------------------------------------------------------------
  69          static xdata bool gzpair_is_paired_f;
  70          static xdata bool gzpair_pairing_enable_f;
  71          static xdata bool gzpair_req_received_f;
  72          static xdata uint8_t gzpair_pairing_req[GZLL_MAX_FW_PAYLOAD_LENGTH];
  73          
  74          //-----------------------------------------------------------------------------
  75          // Implementation: Application programming interface (API) 
  76          //-----------------------------------------------------------------------------
  77          
  78          void gzpair_host_init()
  79          {  
  80   1        xdata uint8_t temp_adr[] = GZPAIR_PAIRING_ADDRESS;
  81   1      
  82   1        // Set address for pipe 0 (pairing pipe)
  83   1        gzll_set_address(0, &temp_adr[0]);
  84   1        
  85   1        // Clare all pairing parameters
  86   1        gzpair_clear_all_parameters();
  87   1      
  88   1        // Clear flags
  89   1        gzpair_req_received_f = false;
  90   1        gzpair_is_paired_f = false;
  91   1        gzpair_pairing_enable_f = false;
  92   1      
  93   1        // All pipes by default disabled
  94   1        gzll_set_param(GZLL_PARAM_RX_PIPES, 0);
  95   1        
  96   1        // Infinite RX timout
  97   1        gzll_set_param(GZLL_PARAM_RX_TIMEOUT, 0);
  98   1      }
  99          
 100          void gzpair_clear_all_parameters()
 101          {
 102   1        uint8_t i;
 103   1      //  xdata uint8_t temp_ch[GZLL_MAX_CHANNEL_TAB_SIZE];
 104   1        xdata uint8_t temp_adr[] = GZPAIR_PAIRING_ADDRESS;
 105   1      
 106   1        // Set "random" default address for pipe 1-5
 107   1        temp_adr[2]++;
 108   1        for(i = 5; i > 0; i++)
 109   1        {
 110   2          temp_adr[0]++;
 111   2          gzll_set_address(i, &temp_adr[0]);
 112   2        }
 113   1        
 114   1        // Initialize channels. 
C51 COMPILER V9.00   GZPAIR_HOST                                                           01/04/2011 18:06:46 PAGE 3   

 115   1      //  gzpair_generate_channels(&temp_ch[0], &temp_adr[0], gzll_get_channel_tab_size());                     
             -  
 116   1      //  gzll_set_channels(&temp_ch[0], gzll_get_channel_tab_size()); 
 117   1       
 118   1        // Clear device database
 119   1        gzpair_db_clear();
 120   1      
 121   1        // Update RX pipes acording to device DB
 122   1        gzpair_update_rx_pipes();
 123   1        
 124   1        // Encryption by default disabled for all pipes
 125   1        gzll_set_param(GZLL_PARAM_CRYPT_PIPES, 0x00);
 126   1      }
 127          
 128          bool gzpair_parameters_restore(void)
 129          { 
 130   1        xdata uint8_t temp_buf[GZPAIR_PAIRING_PARAMETER_SIZE];
 131   1        
 132   1      //  gzpair_non_volatile_read(0, &temp_buf[0], GZPAIR_PAIRING_PARAMETER_SIZE);
 133   1      
 134   1        if(temp_buf[GZPAIR_PAIRING_ID] == GZPAIR_PAIRING_ID_VAL)
 135   1        {    
 136   2          gzpair_set_all_parameters(&temp_buf[0]);
 137   2          gzpair_is_paired_f = true;
 138   2        }
 139   1        else
 140   1        {
 141   2          gzpair_clear_all_parameters();
 142   2          gzpair_is_paired_f = false;
 143   2        } 
 144   1        return gzpair_is_paired_f;  
 145   1      } 
 146          
 147          void gzpair_set_all_parameters(uint8_t* src)
 148          {
 149   1        uint8_t i;
 150   1        gzll_states_t gzll_state;
 151   1      //  xdata uint8_t channels[GZLL_MAX_CHANNEL_TAB_SIZE];
 152   1      
 153   1        gzll_state = gzll_get_state();
 154   1        gzll_goto_idle();
 155   1        
 156   1        memcpy(&gzpair_device_db[0], &src[GZPAIR_PAIRING_DEVICE_DB], GZPAIR_DEVICE_DB_SIZE);  
 157   1        gzll_set_param(GZLL_PARAM_CRYPT_PIPES, src[GZPAIR_PAIRING_CRYPT_SETUP]); 
 158   1        gzll_set_address(1, &src[GZPAIR_PAIRING_ADDRESS_P1]);
 159   1        gzll_set_address(2, &src[GZPAIR_PAIRING_ADDRESS_P2]);
 160   1        gzll_set_address(3, &src[GZPAIR_PAIRING_ADDRESS_P3]);
 161   1        gzll_set_address(4, &src[GZPAIR_PAIRING_ADDRESS_P4]);
 162   1        gzll_set_address(5, &src[GZPAIR_PAIRING_ADDRESS_P5]);
 163   1        
 164   1        // Update channels
 165   1      //  gzpair_generate_channels(&channels[0], &src[GZPAIR_PAIRING_ADDRESS_P1], gzll_get_channel_tab_size()); 
             -                      
 166   1      //  gzll_set_channels(&channels[0], gzll_get_channel_tab_size());
 167   1      
 168   1        for(i = 1; i < 6; i++)
 169   1        {
 170   2          // ((i - 1) << 4) for adding a 16 byte offset
 171   2          gzll_set_crypt_key(i, &src[GZPAIR_PAIRING_AES_KEYS + ((i - 1) << 4)]);     
 172   2        }     
 173   1      
 174   1        gzpair_update_rx_pipes();
C51 COMPILER V9.00   GZPAIR_HOST                                                           01/04/2011 18:06:46 PAGE 4   

 175   1      
 176   1        if(gzll_state == GZLL_HOST_ACTIVE)                                 
 177   1        {
 178   2          gzll_rx_start();
 179   2        }
 180   1      }
 181          
 182          void gzpair_get_all_parameters(uint8_t* dst)
 183          {
 184   1        uint8_t i;
 185   1        
 186   1        memcpy(&dst[GZPAIR_PAIRING_DEVICE_DB], &gzpair_device_db[0], GZPAIR_DEVICE_DB_SIZE);  
 187   1        dst[GZPAIR_PAIRING_CRYPT_SETUP] = gzll_get_param(GZLL_PARAM_CRYPT_PIPES); 
 188   1        gzll_get_address(1, &dst[GZPAIR_PAIRING_ADDRESS_P1]);
 189   1        gzll_get_address(2, &dst[GZPAIR_PAIRING_ADDRESS_P2]);
 190   1        gzll_get_address(3, &dst[GZPAIR_PAIRING_ADDRESS_P3]);
 191   1        gzll_get_address(4, &dst[GZPAIR_PAIRING_ADDRESS_P4]);
 192   1        gzll_get_address(5, &dst[GZPAIR_PAIRING_ADDRESS_P5]);
 193   1          
 194   1        for(i = 1; i < 6; i++)
 195   1        {
 196   2          // ((i - 1) << 4) for adding a 16 byte offset
 197   2          gzll_get_crypt_key(i, &dst[GZPAIR_PAIRING_AES_KEYS + ((i - 1) << 4)]);     
 198   2        }     
 199   1      }
 200          
 201          void gzpair_parameters_store(void)
 202          {
 203   1        xdata uint8_t temp_buf[GZPAIR_PAIRING_PARAMETER_SIZE];
 204   1           
 205   1        if(gzpair_is_paired_f)
 206   1        {
 207   2          temp_buf[GZPAIR_PAIRING_ID]= GZPAIR_PAIRING_ID_VAL;  
 208   2          gzpair_get_all_parameters(&temp_buf[0]);
 209   2      //    gzpair_non_volatile_write(0, &temp_buf[0], GZPAIR_PAIRING_PARAMETER_SIZE);
 210   2        }
 211   1        else
 212   1        {
 213   2      //    gzpair_parameters_erase();
 214   2        }
 215   1      }
 216          
 217          void gzpair_host_pairing_enable(bool enable)
 218          {
 219   1        gzpair_pairing_enable_f = enable;
 220   1        gzpair_update_rx_pipes();
 221   1      }
 222          
 223          bool gzpair_host_execute()
 224          {  
 225   1        if(gzll_rx_data_ready(0))
 226   1        {    
 227   2          gzll_goto_idle();       
 228   2          gzll_rx_fifo_read(gzpair_pairing_req, NULL, NULL);
 229   2          gzpair_req_received_f = ((gzpair_pairing_req[GZPAIR_PAIRING_REQ_STEP] == 0) && gzll_rx_power_high());
 230   2          
 231   2          // Close pairing pipe
 232   2          gzll_set_param(GZLL_PARAM_RX_PIPES, gzll_get_param(GZLL_PARAM_RX_PIPES) & ~0x01);
 233   2          
 234   2          if(gzpair_req_received_f)
 235   2          {
 236   3            gzll_set_param(GZLL_PARAM_RX_TIMEOUT, GZPAIR_PAIRING_CLOSE_PROXIMITY_BACKOFF_RX_TIMEOUT);
C51 COMPILER V9.00   GZPAIR_HOST                                                           01/04/2011 18:06:46 PAGE 5   

 237   3            gzll_rx_fifo_flush();   
 238   3          }
 239   2          else
 240   2          {      
 241   3            gzll_set_param(GZLL_PARAM_RX_TIMEOUT, GZPAIR_PAIRING_NOT_PROXIMITY_BACKOFF_RX_TIMEOUT);
 242   3          }
 243   2          
 244   2          gzll_rx_start();
 245   2        }
 246   1        else
 247   1        {
 248   2          gzpair_req_received_f = false;
 249   2        }
 250   1        
 251   1        if(gzll_get_state() == GZLL_IDLE)
 252   1        {
 253   2          gzll_set_param(GZLL_PARAM_RX_TIMEOUT, 0);
 254   2          gzpair_update_rx_pipes();
 255   2          gzll_rx_start();
 256   2        } 
 257   1         
 258   1        return gzpair_req_received_f;
 259   1      }    
 260          
 261          bool gzpair_host_pairing_req_received()
 262          {
 263   1        return gzpair_req_received_f;
 264   1      }
 265          
 266          uint8_t gzpair_host_get_req_device_type()
 267          {
 268   1        // If gzll is idle, this indicates that the backoff timout has elapsed
 269   1        // and the pairing request no longer is valid.
 270   1        if(gzll_get_state() != GZLL_IDLE)
 271   1        {
 272   2          return gzpair_pairing_req[GZPAIR_PAIRING_REQ_DEVICE_TYPE];
 273   2        }
 274   1        else
 275   1        {
 276   2          return 0;
 277   2        }
 278   1      }
 279          
 280          uint8_t gzpair_host_grant_pairing()
 281          {
 282   1        bool retval = false;
 283   1        xdata uint8_t adr_b0;
 284   1        xdata uint8_t granted_pipe, i;
 285   1        xdata uint8_t temp_adr_buf0[5];
 286   1        xdata uint8_t temp_adr_buf1[6];
 287   1        xdata uint8_t pairing_req_verify[5];
 288   1        xdata uint8_t pairing_resp[GZPAIR_PAIRING_RESP_SIZE];
 289   1        xdata uint8_t channels[GZLL_MAX_CHANNEL_TAB_SIZE];
 290   1        xdata uint8_t temp_params[GZPAIR_PAIRING_PARAMETER_SIZE]; 
 291   1        
 292   1        if(gzpair_req_received_f && gzll_get_state() != GZLL_IDLE)
 293   1        {
 294   2          gzpair_get_all_parameters(&temp_params[0]);
 295   2      
 296   2          gzpair_req_received_f = false;
 297   2      
 298   2          memcpy(&pairing_req_verify[0], &gzpair_pairing_req[0], 5);     
C51 COMPILER V9.00   GZPAIR_HOST                                                           01/04/2011 18:06:46 PAGE 6   

 299   2      
 300   2          while(gzll_get_state() != GZLL_IDLE)
 301   2          ;
 302   2          
 303   2          // Generate array containg all byte 0 of pipe addresses
 304   2          for(i = 0; i < 6; i++)
 305   2          {
 306   3            gzll_get_address(i, &temp_adr_buf0[0]);
 307   3            temp_adr_buf1[i] = temp_adr_buf0[0];
 308   3          }
 309   2          
 310   2          // Get previous byte 0 address that was distributed
 311   2          adr_b0 = temp_adr_buf1[gzpair_db_get_youngest()]; 
 312   2      
 313   2          granted_pipe = gzpair_db_device_add(gzpair_pairing_req[GZPAIR_PAIRING_REQ_DEVICE_TYPE]);
 314   2      
 315   2          // Open granted pipe
 316   2          gzll_set_param(GZLL_PARAM_RX_PIPES, (1 << granted_pipe) | (gzll_get_param(GZLL_PARAM_RX_PIPES) & 1));
 317   2      
 318   2          // Generate new byte 0 address
 319   2          while((adr_b0 == temp_adr_buf1[0]) ||
 320   2                  (adr_b0 == temp_adr_buf1[1]) ||
 321   2                  (adr_b0 == temp_adr_buf1[2]) ||
 322   2                  (adr_b0 == temp_adr_buf1[3]) ||
 323   2                  (adr_b0 == temp_adr_buf1[4]) ||
 324   2                  (adr_b0 == temp_adr_buf1[5]) ||
 325   2                  (adr_b0 == 0xAA) ||
 326   2                  (adr_b0 == 0x55))
 327   2          {                  
 328   3            adr_b0++;
 329   3          }
 330   2        
 331   2          // Set new address for granted pipe   
 332   2          if(gzpair_is_paired_f)
 333   2          {
 334   3            gzll_get_address(1, &temp_adr_buf0[0]); 
 335   3          }
 336   2          else
 337   2          {
 338   3            memcpy(&temp_adr_buf0[1], &gzpair_pairing_req[GZPAIR_PAIRING_REQ_RANDOM_ADDRESS_4B], 4);  
 339   3            temp_adr_buf0[0] = temp_adr_buf1[1];
 340   3            gzll_set_address(1, &temp_adr_buf0[0]);
 341   3          } 
 342   2           
 343   2          temp_adr_buf0[0] = adr_b0;
 344   2          gzll_set_address(granted_pipe, &temp_adr_buf0[0]);
 345   2         
 346   2          // Update channels
 347   2      //    gzpair_generate_channels(&channels[0], &temp_adr_buf0[0], gzll_get_channel_tab_size());             
             -          
 348   2          gzll_set_channels(&channels[0], gzll_get_channel_tab_size());
 349   2          
 350   2          // Enable encryption for pipe?
 351   2          if(gzpair_pairing_req[GZPAIR_PAIRING_REQ_CRYPT_ENABLE])
 352   2          {
 353   3            gzll_set_param(GZLL_PARAM_CRYPT_PIPES, gzll_get_param(GZLL_PARAM_CRYPT_PIPES) | (1 << granted_pipe))
             -; 
 354   3            
 355   3            // Decrypt AES key using simple xor chipher
 356   3      //      gzpair_xor_chipher(&gzpair_pairing_req[GZPAIR_PAIRING_REQ_RANDOM_KEY_16B], &gzpair_pairing_req[GZP
             -AIR_PAIRING_REQ_RANDOM_KEY_16B]);
 357   3            gzll_set_crypt_key(granted_pipe, &gzpair_pairing_req[GZPAIR_PAIRING_REQ_RANDOM_KEY_16B]);
C51 COMPILER V9.00   GZPAIR_HOST                                                           01/04/2011 18:06:46 PAGE 7   

 358   3          }
 359   2          else
 360   2          {
 361   3            gzll_set_param(GZLL_PARAM_CRYPT_PIPES, gzll_get_param(GZLL_PARAM_CRYPT_PIPES) & ~(1 << granted_pipe)
             -);
 362   3          }
 363   2            
 364   2          // Build pairing response packet
 365   2          pairing_resp[GZPAIR_PAIRING_RESP_ID] = GZPAIR_PAIRING_RESP_ID_VAL; 
 366   2          memcpy(&pairing_resp[GZPAIR_PAIRING_RESP_ECHO_RANDOM], &gzpair_pairing_req[GZPAIR_PAIRING_REQ_RANDOM_A
             -DDRESS_4B], 4);     
 367   2          memcpy(&pairing_resp[GZPAIR_PAIRING_RESP_ADDRESS], &temp_adr_buf0[0], 5);     
 368   2          gzll_ack_payload_write(&pairing_resp[0], GZPAIR_PAIRING_RESP_SIZE, 0);
 369   2          gzll_set_param(GZLL_PARAM_RX_PIPES, (1 << granted_pipe) | 1);
 370   2          gzll_set_param(GZLL_PARAM_RX_TIMEOUT, GZPAIR_PAIRING_STEP1_RX_TIMEOUT);
 371   2          gzll_rx_start();
 372   2              
 373   2          while(gzll_get_state() != GZLL_IDLE)
 374   2          {
 375   3            if(gzll_rx_data_ready(0))
 376   3            {         
 377   4              gzll_rx_fifo_read(&gzpair_pairing_req[0], NULL, NULL);  
 378   4              
 379   4              // Validate step 1 of pairing request
 380   4              if(gzpair_pairing_req[GZPAIR_PAIRING_REQ_STEP] == 1)
 381   4              {
 382   5                retval = true;
 383   5                pairing_req_verify[GZPAIR_PAIRING_REQ_STEP] = 1;
 384   5              
 385   5                for(i = 0; i < 5; i++)
 386   5                {
 387   6                  if(gzpair_pairing_req[i] != pairing_req_verify[i])
 388   6                  {
 389   7                    retval = false;
 390   7                  }       
 391   6                }
 392   5              }  
 393   4            }             
 394   3            else if(gzll_rx_data_ready(granted_pipe))
 395   3            {
 396   4              break;
 397   4            }
 398   3          }
 399   2        
 400   2          if(retval)
 401   2          {
 402   3            gzpair_is_paired_f = true;
 403   3          }
 404   2          else
 405   2          {
 406   3            gzpair_set_all_parameters(temp_params);
 407   3            granted_pipe = 0;
 408   3          }
 409   2      
 410   2          gzll_goto_idle();
 411   2      
 412   2          gzpair_update_rx_pipes();
 413   2          gzll_tx_fifo_flush();  
 414   2          gzll_set_param(GZLL_PARAM_RX_TIMEOUT, 0);
 415   2          gzll_rx_start();
 416   2         
 417   2          return granted_pipe;
C51 COMPILER V9.00   GZPAIR_HOST                                                           01/04/2011 18:06:46 PAGE 8   

 418   2        }
 419   1        else
 420   1        {
 421   2          return 0;
 422   2        }
 423   1      }
 424          
 425          uint8_t gzpair_host_get_device_type(uint8_t pipe)
 426          {
 427   1        uint8_t i;
 428   1      
 429   1        for(i = 0; i < 5; i++)
 430   1        {
 431   2          if(gzpair_device_db[GZPAIR_DEVICE_DB_PIPE + i] == pipe)
 432   2          {
 433   3            return gzpair_device_db[GZPAIR_DEVICE_DB_DEVICE_TYPE + i];
 434   3          }
 435   2        }
 436   1      
 437   1        return 0;
 438   1      }
 439          
 440          void gzpair_db_clear(void)
 441          {  
 442   1        uint8_t i;
 443   1      
 444   1        for(i = 0; i < 5; i++)
 445   1        {
 446   2          gzpair_device_db[GZPAIR_DEVICE_DB_AGE + i] = 4 - i;
 447   2          gzpair_device_db[GZPAIR_DEVICE_DB_PIPE + i] = i + 1;
 448   2          gzpair_device_db[GZPAIR_DEVICE_DB_DEVICE_TYPE + i] = 0;
 449   2        }
 450   1      }
 451          
 452          uint8_t gzpair_db_device_add(uint8_t device_type)
 453          {
 454   1        uint8_t temp_pipe, i;
 455   1      
 456   1        for(i = 0; i < 5; i++)
 457   1        {
 458   2          gzpair_device_db[GZPAIR_DEVICE_DB_AGE + i]++;  
 459   2      
 460   2          if(gzpair_device_db[GZPAIR_DEVICE_DB_AGE + i] == 5)
 461   2          {
 462   3            gzpair_device_db[GZPAIR_DEVICE_DB_AGE + i] = 0;
 463   3            gzpair_device_db[GZPAIR_DEVICE_DB_DEVICE_TYPE + i] = device_type;
 464   3            temp_pipe = gzpair_device_db[GZPAIR_DEVICE_DB_PIPE + i];
 465   3          }
 466   2        }
 467   1        return temp_pipe;
 468   1      }
 469          
 470          uint8_t gzpair_db_get_youngest()
 471          {
 472   1        uint8_t i;
 473   1      
 474   1        for(i = 0; i < 5; i++)
 475   1        {
 476   2          if(gzpair_device_db[GZPAIR_DEVICE_DB_AGE + i] == 0)
 477   2          {
 478   3            return gzpair_device_db[GZPAIR_DEVICE_DB_PIPE + i];
 479   3          }
C51 COMPILER V9.00   GZPAIR_HOST                                                           01/04/2011 18:06:46 PAGE 9   

 480   2        }
 481   1      
 482   1        return 0xff; // Error
 483   1      }
 484          
 485          void gzpair_update_rx_pipes()
 486          {
 487   1        uint8_t i, rx_pipes;
 488   1        gzll_states_t temp_gzll_state;
 489   1      
 490   1        if(gzpair_pairing_enable_f)
 491   1        {
 492   2          rx_pipes = 1;
 493   2        }
 494   1        else
 495   1        {
 496   2          rx_pipes = 0;
 497   2        }
 498   1      
 499   1        for(i = 1; i < 6; i++)
 500   1        {
 501   2          if(gzpair_host_get_device_type(i) != 0)
 502   2          {
 503   3            rx_pipes |= (1 << i);
 504   3          }
 505   2        }
 506   1      
 507   1        temp_gzll_state = gzll_get_state();
 508   1        gzll_goto_idle();
 509   1      
 510   1        gzll_set_param(GZLL_PARAM_RX_PIPES, rx_pipes);
 511   1        
 512   1        if(temp_gzll_state == GZLL_HOST_ACTIVE)
 513   1        {
 514   2          gzll_rx_start();  
 515   2        }
 516   1      }
 517          
 518          bool gzpair_host_device_type_unpair(uint8_t device_type)
 519          {
 520   1        uint8_t pipe;
 521   1      
 522   1        pipe = gzpair_db_device_type_remove(device_type);
 523   1        gzpair_update_rx_pipes();
 524   1        
 525   1        return (pipe != 0);
 526   1      }
 527          
 528          void gzpair_host_device_pipe_unpair(uint8_t pipe)
 529          {
 530   1        gzpair_db_pipe_remove(pipe);
 531   1        gzpair_update_rx_pipes();  
 532   1      }
 533          
 534          uint8_t gzpair_db_device_type_remove(uint8_t device_type)
 535          {
 536   1        int8_t i;
 537   1        uint8_t temp_pipe = 0, temp_age = 0;
 538   1      
 539   1        for(i = 0; i < 5; i++)
 540   1        {
 541   2          if(gzpair_device_db[GZPAIR_DEVICE_DB_AGE + i] > temp_age && gzpair_device_db[GZPAIR_DEVICE_DB_DEVICE_T
C51 COMPILER V9.00   GZPAIR_HOST                                                           01/04/2011 18:06:46 PAGE 10  

             -YPE + i] == device_type)
 542   2          {
 543   3            temp_pipe = gzpair_device_db[GZPAIR_DEVICE_DB_PIPE + i];
 544   3            temp_age = gzpair_device_db[GZPAIR_DEVICE_DB_AGE + i];
 545   3          } 
 546   2        }
 547   1      
 548   1        gzpair_db_pipe_remove(temp_pipe);
 549   1        return temp_pipe;
 550   1      }
 551          
 552          uint8_t gzpair_host_paired_devices(uint8_t device_type)
 553          {
 554   1        uint8_t n = 0, i;
 555   1      
 556   1        for(i = 0; i < 5; i++)
 557   1        {
 558   2          if(gzpair_device_db[GZPAIR_DEVICE_DB_DEVICE_TYPE + i] == device_type)
 559   2          {
 560   3            n++;
 561   3          }
 562   2        }
 563   1        return n;
 564   1      }
 565          
 566          bool gzpair_host_all_pipes_paired()
 567          {
 568   1        uint8_t i;
 569   1        
 570   1        for(i = 0; i < 5; i++)
 571   1        {
 572   2          if(gzpair_device_db[GZPAIR_DEVICE_DB_AGE + i] == 4)
 573   2          {
 574   3            return(gzpair_device_db[GZPAIR_DEVICE_DB_DEVICE_TYPE + i] != 0);
 575   3          }
 576   2        }
 577   1        return false; // Error, should never end up here
 578   1      }
 579          
 580          void gzpair_db_pipe_remove(uint8_t pipe)
 581          {
 582   1        uint8_t i, temp_age;
 583   1        
 584   1        for(i = 0; i < 5; i++)
 585   1        {
 586   2          if(gzpair_device_db[GZPAIR_DEVICE_DB_PIPE + i] == pipe)
 587   2          {
 588   3            temp_age = gzpair_device_db[GZPAIR_DEVICE_DB_AGE + i];
 589   3            gzpair_device_db[GZPAIR_DEVICE_DB_AGE + i] = 5;
 590   3            gzpair_device_db[GZPAIR_DEVICE_DB_DEVICE_TYPE + i] = 0;
 591   3      
 592   3            for(i = 0; i < 5; i++)
 593   3            {
 594   4              if(gzpair_device_db[GZPAIR_DEVICE_DB_AGE + i] > temp_age)
 595   4              {
 596   5                gzpair_device_db[GZPAIR_DEVICE_DB_AGE + i]--;
 597   5              } 
 598   4            }
 599   3          } 
 600   2        }
 601   1      }

C51 COMPILER V9.00   GZPAIR_HOST                                                           01/04/2011 18:06:46 PAGE 11  


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2325    ----
   CONSTANT SIZE    =     10    ----
   XDATA SIZE       =     45     377
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
