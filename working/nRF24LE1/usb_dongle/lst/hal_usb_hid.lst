C51 COMPILER V9.00   HAL_USB_HID                                                           10/24/2011 16:56:04 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE HAL_USB_HID
OBJECT MODULE PLACED IN .\build\hal_usb_hid.obj
COMPILER INVOKED BY: C:\KeilC51\C51\BIN\C51.EXE hal_usb_hid.c LARGE OBJECTADVANCED OPTIMIZE(SIZE) BROWSE DEFINE(NRFREADY
                    -_DEMO_MODE) DEBUG PRINT(.\lst\hal_usb_hid.lst) OBJECT(.\build\hal_usb_hid.obj)

line level    source

   1          /*深圳云佳科技无线应用，应用无限*/
   2          /* Copyright (c) 2008 Nordic Semiconductor. All Rights Reserved.
   3           *
   4           * The information contained herein is property of Nordic Semiconductor ASA.
   5           * Terms and conditions of usage are described in detail in NORDIC
   6           * SEMICONDUCTOR STANDARD SOFTWARE LICENSE AGREEMENT. 
   7           *
   8           * Licensees are granted free, non-transferable use of the information. NO
   9           * WARRENTY of ANY KIND is provided. This heading must NOT be removed from
  10           * the file.
  11           *
  12           * $LastChangedRevision: 4762 $
  13           */
  14          
  15          /** @file
  16           * @brief Function for handling HID device requests
  17           */
  18          
  19          #include "hal_usb_hid.h"
  20          #include "nordic_common.h"
  21          
  22          static xdata uint8_t tmp_usb_buf[8];
  23          static uint8_t tmp_usb_hid_protocol;
  24          
  25          bool hal_usb_hid_device_req_proc(hal_usb_device_req* req, uint8_t** data_ptr, uint8_t* size, hal_usb_dev_r
             -eq_resp_t* resp)
  26          {
  27   1          bool retval = false;
  28   1          *resp = STALL;
  29   1      
  30   1          if(req->bRequest == USB_REQ_GET_DESCRIPTOR )
  31   1          {
  32   2              switch( req->wValueMsb )
  33   2              {
  34   3                  case  USB_CLASS_DESCRIPTOR_REPORT:
  35   3                      retval = true;
  36   3      
  37   3                      *data_ptr = g_usb_hid_hids[LSB(req->wIndex)].hid_report_desc;
  38   3                      *size = MIN(g_usb_hid_hids[LSB(req->wIndex)].hid_report_desc_size, LSB(req->wLength));
  39   3                      *resp = DATA;
  40   3                      break;
  41   3                  case USB_CLASS_DESCRIPTOR_HID:
  42   3                      retval = true;
  43   3      
  44   3                      *data_ptr = (uint8_t*)g_usb_hid_hids[LSB(req->wIndex)].hid_desc;
  45   3                      *size = MIN(sizeof(hal_usb_hid_desc_t), LSB(req->wLength));
  46   3                      *resp = DATA;
  47   3                      break;
  48   3                  default:
  49   3                      break;
  50   3              }
  51   2          } 
  52   1          else if( ( req->bmRequestType & 0x20 ) == 0x20 ) // This is a class specific request D5..6: Type Class
             -(value 1)
C51 COMPILER V9.00   HAL_USB_HID                                                           10/24/2011 16:56:04 PAGE 2   

  53   1          { 
  54   2              switch( req->bRequest )
  55   2              {
  56   3                  case 0x01: // Get_Report
  57   3                      retval = true;
  58   3                      // For now we just send an "empty" report. No mousemoves, no mouse-key pressed.
  59   3                      // TODO: This breaks the generic nature of usb.c. 
  60   3                      // Have to create some global "default" reports in the template later.
  61   3                      tmp_usb_buf[0] = tmp_usb_buf[1] = 0x00;
  62   3                      *data_ptr = &tmp_usb_buf[0];
  63   3                      *size = 0x03;
  64   3                      *resp = DATA;
  65   3                      break;
  66   3                  case 0x02: // Get_Idle
  67   3                      retval = true;
  68   3                      *resp = STALL;
  69   3                      break;
  70   3                  case 0x0a: // Set_Idle
  71   3                      retval = true;
  72   3                      *resp = STALL;
  73   3                      break;
  74   3                  case 0x03: // Get_Protocol
  75   3                      retval = true;
  76   3                      tmp_usb_buf[0] = ( tmp_usb_hid_protocol & (1 << LSB(req->wIndex)) ) ? 0x01 : 0x00;
  77   3                      *data_ptr = &tmp_usb_buf[0];
  78   3                      *size = 0x01;
  79   3                      *resp = DATA;
  80   3                      break;
  81   3                  case 0x0b: // Set_Protocol
  82   3                      retval = true;
  83   3      #if 1 // Right now we do not support setting of protocol in a intelligent way
  84   3                      if( req->wValueLsb == 0x01 )
  85   3                      {
  86   4                          tmp_usb_hid_protocol |= 1 << LSB(req->wIndex);
  87   4                      }
  88   3                      else
  89   3                      {
  90   4                          tmp_usb_hid_protocol &= ~(1 << LSB(req->wIndex));
  91   4                      }
  92   3      
  93   3                      *resp = NAK;
  94   3      #else
                              *resp = EMPTY_RESPONSE;
              #endif
  97   3                      break;
  98   3                  case 0x09: // Set_Report
  99   3                      if( req->wValueMsb == 0x03 ) // Feature report
 100   3                      {
 101   4                          retval = false;
 102   4                      }
 103   3                      else if ( req->wValueMsb == 0x02 ) // Output report
 104   3                      {
 105   4                          // For now we just assume that the OUT packet is a keyboard report.
 106   4                          *resp =NAK;
 107   4                          retval = true;
 108   4                      }
 109   3                      break;
 110   3                  default:
 111   3                      break;
 112   3                  }
 113   2          }
 114   1      
C51 COMPILER V9.00   HAL_USB_HID                                                           10/24/2011 16:56:04 PAGE 3   

 115   1          return retval;
 116   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    613    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      9      13
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
