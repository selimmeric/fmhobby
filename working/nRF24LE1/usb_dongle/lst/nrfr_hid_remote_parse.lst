C51 COMPILER V9.00   NRFR_HID_REMOTE_PARSE                                                 01/05/2011 19:11:00 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE NRFR_HID_REMOTE_PARSE
OBJECT MODULE PLACED IN .\build\nrfr_hid_remote_parse.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE nrfr_hid_remote_parse.c LARGE OBJECTADVANCED OPTIMIZE(SIZE) BROWSE INCDIR(.
                    -.\..\..\hal\nrf24l01p;..\..\..\hal\nrf24lu1p;..\..\..\lib\assertions;..\..\..\lib\lib_crypt;..\common_setup;..\..\..\gaz
                    -ell\common;..\..\..\gazell\nrf24lu1) DEFINE(NRFREADY_DEMO_MODE) DEBUG PRINT(.\lst\nrfr_hid_remote_parse.lst) OBJECT(.\bu
                    -ild\nrfr_hid_remote_parse.obj)

line level    source

   1          /* Copyright (c) 2007 Nordic Semiconductor. All Rights Reserved.
   2           *
   3           * The information contained herein is property of Nordic Semiconductor ASA.
   4           * Terms and conditions of usage are described in detail in NORDIC
   5           * SEMICONDUCTOR STANDARD SOFTWARE LICENSE AGREEMENT. 
   6           *
   7           * Licensees are granted free, non-transferable use of the information. NO
   8           * WARRENTY of ANY KIND is provided. This heading must NOT be removed from
   9           * the file.
  10           *
  11           * $LastChangedRevision$
  12           */
  13          
  14          #include <stdint.h>
  15          #include <stdbool.h>
  16          #include "nrfr_hid_remote_parse.h"
  17          
  18          //-----------------------------------------------------------------------------
  19          // Remote packet definition
  20          //-----------------------------------------------------------------------------
  21          
  22          static bool generate_HID_report_from_RC_input(uint8_t *indata,uint8_t input_number_of_keys, uint8_t *repor
             -t1_buf, uint8_t *report2_buf);
  23          static bool resolve_keys_from_matrix(uint8_t *input_key_matrix, uint8_t *keys, uint8_t *number_of_keys);
  24          static uint8_t read_rows(void);
  25          
  26          //This table shows the mapping between the key matrix
  27          //and rc_to_hid_table
  28          static const uint8_t code matrix_lookup[] = {           \
  29          14, 20, 6, 11, 5, \                      
  30          10, 12, 13, 15, 16, \
  31          56, 57, 58, 59, 60, \
  32          61, 62, 63, 64, 65, \
  33          72, 67, 71, 70, 73, \
  34          1, 22, 2, 0xFF, 0,};
  35          
  36          void nrfr_hid_remote_parse(uint8_t *indata, uint8_t input_number_of_keys, uint8_t *report1_buf, uint8_t *r
             -eport2_buf)
  37          {
  38   1        extern code uint16_t nrfr_remote_HID_table[];
  39   1        uint8_t i; 
  40   1        uint8_t key_count = 0;
  41   1        bool fn_key_is_set = false;
  42   1        //bool retval=false;
  43   1         
  44   1        for(i = 0; i < input_number_of_keys; i++)
  45   1        {
  46   2          *(indata + i) = matrix_lookup[*(indata + i)];  
  47   2        }
  48   1                  
  49   1        for(i = 0; i < NRFR_LENGTH_REPORT_1; i++) //Reset the report id struct
  50   1      //                   NRFR_LENGTH_REPORT_1 5
C51 COMPILER V9.00   NRFR_HID_REMOTE_PARSE                                                 01/05/2011 19:11:00 PAGE 2   

  51   1        {
  52   2          report1_buf[i] = 0;
  53   2        }
  54   1        report1_buf[0] = NRFR_REMOTE_CONTROL_BUTTONS_REPORT_ID;     //Report ID 1
  55   1        
  56   1        for(i = 0; i < NRFR_LENGTH_REPORT_2; i++)
  57   1      //                               NRFR_LENGTH_REPORT_2 9
  58   1        {
  59   2          report2_buf[i] = 0;
  60   2        }
  61   1        report2_buf[0] = NRFR_REMOTE_KEYBOARD_BUTTONS_REPORT_ID;     //Report ID 2
  62   1        
  63   1        //Iterate through the bytes in *indata
  64   1        for(i = 0; i < input_number_of_keys; i++) 
  65   1        {
  66   2                               //The 55 first entries in the rc_to_HID_table represent mappings
  67   2                               //to the first HID report  Each entry consists of two numbers in the rc_to_HID_ta
             -ble. The first number
  68   2                               //represent the type and which byte in the HID report to change, and the second n
             -umber 
  69   2                               //is the new usage value.
  70   2          if(*indata < 56)
  71   2          {
  72   3            switch(nrfr_remote_HID_table[((*indata)*2)])
  73   3            {
  74   4              case CONSUMER_CONTROL:
  75   4                report1_buf[CONSUMER_CONTROL]=  (uint8_t)(nrfr_remote_HID_table[((*indata)*2) + 1]);   
  76   4                report1_buf[CONSUMER_CONTROL+1]=  (uint8_t)(nrfr_remote_HID_table[((*indata)*2) + 1] >> 8);
  77   4                break;
  78   4             
  79   4              case SYSTEM_CONTROL:
  80   4                report1_buf[SYSTEM_CONTROL]=  (uint8_t)(nrfr_remote_HID_table[((*indata)*2) + 1]);
  81   4                break;
  82   4              
  83   4              case VENDOR_DEFINED:
  84   4                report1_buf[VENDOR_DEFINED]=  (uint8_t)(nrfr_remote_HID_table[((*indata)*2) + 1]);
  85   4                break;
  86   4      
  87   4              default:
  88   4                break;
  89   4            }      
  90   3          }
  91   2                               //The entries from 56 to 73 in the rc_to_HID_table represent mappings
  92   2                               //to the second HID report. Each entry consists of two bytes in the rc_to_HID_tab
             -le. The first byte 
  93   2                               //represent the value of byte 1 in the HID report, the second byte represents
  94   2                               //the value of the third byte in the HID report
  95   2          else if((*indata > 55) && (*indata < 74))
  96   2          {
  97   3            report2_buf[NRFR_REMOTE_KEYBOARD_BUTTONS_MOD]=nrfr_remote_HID_table[(*indata)*2];
  98   3            report2_buf[NRFR_REMOTE_KEYBOARD_BUTTONS_KEYS]=nrfr_remote_HID_table[((*indata)*2)+1];             
  99   3          }
 100   2          indata++;
 101   2        }
 102   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    435    ----
   CONSTANT SIZE    =     30    ----
   XDATA SIZE       =   ----      12
   PDATA SIZE       =   ----    ----
C51 COMPILER V9.00   NRFR_HID_REMOTE_PARSE                                                 01/05/2011 19:11:00 PAGE 3   

   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
