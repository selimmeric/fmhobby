C51 COMPILER V9.00   HAL_AES                                                               01/04/2011 17:43:51 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE HAL_AES
OBJECT MODULE PLACED IN .\build\hal_aes.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE ..\..\..\hal\nrf24lu1p\hal_aes.c LARGE OBJECTADVANCED OPTIMIZE(SIZE) BROWSE
                    - INCDIR(..\..\..\hal\nrf24l01p;..\..\..\hal\nrf24lu1p;..\..\..\lib\assertions;..\..\..\lib\lib_crypt;..\common_setup;..\
                    -..\..\gazell\common;..\..\..\gazell\nrf24lu1) DEFINE(NRFREADY_DEMO_MODE) DEBUG PRINT(.\lst\hal_aes.lst) OBJECT(.\build\h
                    -al_aes.obj)

line level    source

   1          /* Copyright (c) 2007 Nordic Semiconductor. All Rights Reserved.
   2           *
   3           * The information contained herein is property of Nordic Semiconductor ASA.
   4           * Terms and conditions of usage are described in detail in NORDIC
   5           * SEMICONDUCTOR STANDARD SOFTWARE LICENSE AGREEMENT. 
   6           *
   7           * Licensees are granted free, non-transferable use of the information. NO
   8           * WARRENTY of ANY KIND is provided. This heading must NOT be removed from
   9           * the file.
  10           *
  11           * $LastChangedRevision: 5084 $
  12           */
  13          
  14          /** @file
  15           * @brief Implementation of hal_aes for nRF24LU1+
  16           *
  17           * Implementation of hardware abstraction layer (HAL) for the embedded
  18           * AES co-processor in nRF24LU1
  19           *
  20           */
  21          
  22          #include <Nordic\reg24lu1.h>
  23          #include <stdint.h>
  24          #include "hal_aes.h"
  25          
  26          #define AES_BUF_SIZE                16
  27          
  28          //-----------------------------------------------------------------------------
  29          // AES register masks
  30          //-----------------------------------------------------------------------------
  31          
  32          #define AESCS_MODE_MASK             0x1C
  33          #define AESCS_GO_MASK               0x01
  34          
  35          #define AESCS_E_D_MASK              0x02
  36          #define AESCS_E_D_BIT_POS           1
  37          #define DECRYPT                     1
  38          #define ENCRYPT                     0
  39          
  40          #define AESIA1_KIN_MASK             0xf0
  41          #define AESIA1_KIN_B0_POS           4
  42          
  43          #define AESIA1_IV_MASK              0x0f
  44          #define AESIA1_IV_B0_POS            0
  45          
  46          #define AESIA2_DI_MASK              0xf0
  47          #define AESIA2_DI_B0_POS            4
  48          
  49          #define AESIA2_DO_MASK              0x0f
  50          #define AESIA2_DO_B0_POS            0
  51          
  52          //-----------------------------------------------------------------------------
C51 COMPILER V9.00   HAL_AES                                                               01/04/2011 17:43:51 PAGE 2   

  53          // AES substitution table (used by aes_get_dec_key() only)
  54          //-----------------------------------------------------------------------------
  55          
  56          static uint8_t code S[256] = {
  57           99, 124, 119, 123, 242, 107, 111, 197,  48,   1, 103,  43, 254, 215, 171, 118,
  58          202, 130, 201, 125, 250,  89,  71, 240, 173, 212, 162, 175, 156, 164, 114, 192,
  59          183, 253, 147,  38,  54,  63, 247, 204,  52, 165, 229, 241, 113, 216,  49,  21,
  60            4, 199,  35, 195,  24, 150,   5, 154,   7,  18, 128, 226, 235,  39, 178, 117,
  61            9, 131,  44,  26,  27, 110,  90, 160,  82,  59, 214, 179,  41, 227,  47, 132,
  62           83, 209,   0, 237,  32, 252, 177,  91, 106, 203, 190,  57,  74,  76,  88, 207,
  63          208, 239, 170, 251,  67,  77,  51, 133,  69, 249,   2, 127,  80,  60, 159, 168,
  64           81, 163,  64, 143, 146, 157,  56, 245, 188, 182, 218,  33,  16, 255, 243, 210,
  65          205,  12,  19, 236,  95, 151,  68,  23, 196, 167, 126,  61, 100,  93,  25, 115,
  66           96, 129,  79, 220,  34,  42, 144, 136,  70, 238, 184,  20, 222,  94,  11, 219,
  67          224,  50,  58,  10,  73,   6,  36,  92, 194, 211, 172,  98, 145, 149, 228, 121,
  68          231, 200,  55, 109, 141, 213,  78, 169, 108,  86, 244, 234, 101, 122, 174,   8,
  69          186, 120,  37,  46,  28, 166, 180, 198, 232, 221, 116,  31,  75, 189, 139, 138,
  70          112,  62, 181, 102,  72,   3, 246,  14,  97,  53,  87, 185, 134, 193,  29, 158,
  71          225, 248, 152,  17, 105, 217, 142, 148, 155,  30, 135, 233, 206,  85,  40, 223,
  72          140, 161, 137,  13, 191, 230,  66, 104,  65, 153,  45,  15, 176,  84, 187,  22,
  73          };
  74          
  75          //-----------------------------------------------------------------------------
  76          // Internal function prototypes
  77          //-----------------------------------------------------------------------------
  78          
  79          void aes_set_mode(uint8_t mode);
  80          void aes_select_e_d(uint8_t operation);
  81          void aes_go();
  82          uint8_t aes_busy();
  83          
  84          void aes_data_write_buf(uint8_t *buf, uint8_t indirect_start_address, uint8_t length);
  85          void aes_data_read_buf(uint8_t *buf, uint8_t indirect_start_address, uint8_t length);
  86          void aes_keyin_write_buf(uint8_t *buf, uint8_t indirect_address, uint8_t length);
  87          void aes_initvect_write_buf(uint8_t *buf, uint8_t indirect_start_address, uint8_t length);
  88          
  89          //-----------------------------------------------------------------------------
  90          // Function implementations
  91          //-----------------------------------------------------------------------------
  92          
  93          void hal_aes_setup(bool decrypt, aes_modes_t mode, uint8_t *keyin, uint8_t *ivin)
  94          {
  95   1         if(keyin != NULL)
  96   1         {
  97   2            aes_keyin_write_buf(keyin, 0, AES_BUF_SIZE);
  98   2         }
  99   1      
 100   1         if(ivin)
 101   1         {
 102   2            aes_initvect_write_buf(ivin, 0, AES_BUF_SIZE);
 103   2            aes_set_mode(ECB);            // Dummy change of mode in order to load init-vector
 104   2            aes_set_mode(CBC);
 105   2         }
 106   1      
 107   1         if(decrypt)
 108   1         {
 109   2           AESCS=(AESCS & ~AESCS_E_D_MASK) | DECRYPT<<AESCS_E_D_BIT_POS;
 110   2         }
 111   1         else
 112   1         {
 113   2           AESCS=(AESCS & ~AESCS_E_D_MASK) | ENCRYPT<<AESCS_E_D_BIT_POS;
 114   2         }
C51 COMPILER V9.00   HAL_AES                                                               01/04/2011 17:43:51 PAGE 3   

 115   1      
 116   1         aes_set_mode(mode);
 117   1      }
 118          
 119          void hal_aes_crypt(uint8_t *dest_buf, uint8_t *src_buf)
 120          {
 121   1         aes_data_write_buf(src_buf, 0, AES_BUF_SIZE);
 122   1         aes_go();
 123   1         while(aes_busy());
 124   1         aes_data_read_buf(dest_buf, 0, AES_BUF_SIZE);
 125   1      }
 126          
 127          void hal_aes_get_dec_key(uint8_t *output_dec_key, uint8_t *input_enc_key)
 128          {
 129   1         uint8_t index, loop, rcon_int;
 130   1         for(index=0; index<16; index++)
 131   1         {
 132   2            output_dec_key[index]=input_enc_key[index];
 133   2         }
 134   1         for(loop=0; loop<10; loop++)
 135   1         {
 136   2            if(loop==0)
 137   2            {
 138   3               rcon_int=1;
 139   3            }
 140   2            else
 141   2            {
 142   3               rcon_int=((rcon_int & 0x80) ? (rcon_int<<1) ^ 0x1b : rcon_int<<1); // xtime operation
 143   3            }
 144   2      
 145   2            output_dec_key[0]^=S[output_dec_key[13]];
 146   2            output_dec_key[1]^=S[output_dec_key[14]];
 147   2            output_dec_key[2]^=S[output_dec_key[15]];
 148   2            output_dec_key[3]^=S[output_dec_key[12]];
 149   2            output_dec_key[0] ^= rcon_int;
 150   2      
 151   2            for(index=0; index < 12; index++)
 152   2            {
 153   3               output_dec_key[index+4]^=output_dec_key[index];
 154   3            }
 155   2         }
 156   1      }
 157          
 158          void aes_set_mode(uint8_t mode)
 159          {
 160   1         AESCS=(AESCS & ~AESCS_MODE_MASK) | mode<<2;
 161   1      }
 162          
 163          void aes_select_e_d(uint8_t operation)
 164          {
 165   1      
 166   1         AESCS=(AESCS & ~AESCS_E_D_MASK) | operation<<1;
 167   1      }
 168          
 169          void aes_go()
 170          {
 171   1         AESCS=AESCS | AESCS_GO_MASK;
 172   1      }
 173          
 174          uint8_t aes_busy()
 175          {
 176   1         return AESCS & AESCS_GO_MASK;
C51 COMPILER V9.00   HAL_AES                                                               01/04/2011 17:43:51 PAGE 4   

 177   1      }
 178          
 179          void aes_data_write_buf(uint8_t *buf, uint8_t indirect_start_address, uint8_t length)
 180          {
 181   1         int8_t index;
 182   1         AESIA2= (AESIA2 & ~AESIA2_DI_MASK) | (indirect_start_address << AESIA2_DI_B0_POS);
 183   1         for(index=length-1; index>=0; index--)
 184   1         {
 185   2            AESD=buf[index];
 186   2         }
 187   1      }
 188          
 189          void aes_data_read_buf(uint8_t *buf, uint8_t indirect_start_address, uint8_t length)
 190          {
 191   1         int8_t index;
 192   1         AESIA2= (AESIA2 & ~AESIA2_DO_MASK) | (indirect_start_address << AESIA2_DO_B0_POS);
 193   1         for(index=length-1; index>=0; index--)
 194   1         {
 195   2            buf[index]=AESD;
 196   2         }
 197   1      }
 198          
 199          void aes_keyin_write_buf(uint8_t *buf, uint8_t indirect_start_address, uint8_t length)
 200          {
 201   1         int8_t index;
 202   1         AESIA1= (AESIA1 & ~AESIA1_KIN_MASK) | (indirect_start_address << AESIA1_KIN_B0_POS);
 203   1         for(index=length-1; index>=0; index--)
 204   1         {
 205   2            AESKIN=buf[index];
 206   2         }
 207   1      }
 208          
 209          void aes_initvect_write_buf(uint8_t *buf, uint8_t indirect_start_address, uint8_t length)
 210          {
 211   1         int8_t index;
 212   1         AESIA1= (AESIA1 & ~AESIA1_IV_MASK) | (indirect_start_address << AESIA1_IV_B0_POS);
 213   1         for(index=length-1; index>=0; index--)
 214   1         {
 215   2            AESIV=buf[index];
 216   2         }
 217   1      }
 218          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    813    ----
   CONSTANT SIZE    =    256    ----
   XDATA SIZE       =   ----      41
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
