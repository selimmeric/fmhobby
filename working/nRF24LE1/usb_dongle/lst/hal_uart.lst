C51 COMPILER V9.00   HAL_UART                                                              10/03/2010 16:43:51 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE HAL_UART
OBJECT MODULE PLACED IN .\build\hal_uart.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE ..\..\..\hal\nrf24le1\hal_uart.c LARGE OBJECTADVANCED OPTIMIZE(SIZE) BROWSE
                    - INCDIR(..\..\..\hal\nrf24l01p;..\..\..\hal\nrf24lu1p;..\..\..\lib\assertions;..\..\..\lib\lib_crypt;..\common_setup;..\
                    -..\..\gazell\common;..\..\..\gazell\nrf24lu1) DEFINE(NRFREADY_DEMO_MODE) DEBUG PRINT(.\lst\hal_uart.lst) OBJECT(.\build\
                    -hal_uart.obj)

line level    source

   1          /* Copyright (c) 2008 Nordic Semiconductor. All Rights Reserved.
   2           *
   3           * The information contained herein is property of Nordic Semiconductor ASA.
   4           * Terms and conditions of usage are described in detail in NORDIC
   5           * SEMICONDUCTOR STANDARD SOFTWARE LICENSE AGREEMENT. 
   6           *
   7           * Licensees are granted free, non-transferable use of the information. NO
   8           * WARRENTY of ANY KIND is provided. This heading must NOT be removed from
   9           * the file.
  10           *
  11           * $LastChangedRevision: 4760 $
  12           */
  13          
  14          /** @file
  15           * @brief Implementation of hal_uart
  16           */
  17          
  18          #include <Nordic\reg24le1.h>
  19          #include <stdint.h>
  20          #include <stdbool.h>
  21          #include "hal_uart.h"
  22          
  23          #ifndef UART_NBUF
  24          #define UART_NBUF   8
  25          #endif
  26          
  27          #define BAUD_57K6   1015  // = Round(1024 - (2*16e6)/(64*57600))
  28          #define BAUD_38K4   1011  // = Round(1024 - (2*16e6)/(64*38400))
  29          #define BAUD_19K2    998  // = Round(1024 - (2*16e6)/(64*19200))
  30          #define BAUD_9K6     972  // = Round(1024 - (2*16e6)/(64*9600))
  31          
  32          static uint8_t uart_tx_wp, uart_tx_rp, uart_tx_cnt;
  33          static uint8_t idata uart_tx[UART_NBUF];
  34          
  35          static uint8_t uart_rx_wp, uart_rx_rp, uart_rx_cnt;
  36          static uint8_t idata uart_rx[UART_NBUF];
  37          
  38          static void uart0_isr(void) interrupt 4
  39          {
  40   1        if (RI0 == 1)
  41   1        {
  42   2          RI0 = 0;
  43   2          if (uart_rx_cnt < UART_NBUF)
  44   2          {
  45   3            uart_rx[uart_rx_wp] = S0BUF;
  46   3            uart_rx_wp = (uart_rx_wp + 1) % UART_NBUF;
  47   3            uart_rx_cnt++;
  48   3          }
  49   2        }
  50   1        if (TI0 == 1)
  51   1        {
  52   2          TI0 = 0;
C51 COMPILER V9.00   HAL_UART                                                              10/03/2010 16:43:51 PAGE 2   

  53   2          if (uart_tx_cnt > 1)
  54   2          {
  55   3            S0BUF = uart_tx[uart_tx_rp];
  56   3            uart_tx_rp = (uart_tx_rp + 1) % UART_NBUF;
  57   3          }
  58   2          uart_tx_cnt--;
  59   2        }
  60   1      }
  61          
  62          void hal_uart_init(hal_uart_baudrate_t baud)
  63          {
  64   1        uint16_t temp;
  65   1      
  66   1        ES0 = 0;                      // Disable UART0 interrupt while initializing
  67   1        uart_tx_wp = uart_tx_rp = 0;
  68   1        uart_tx_cnt = 0;
  69   1        uart_rx_wp = uart_rx_rp = 0;
  70   1        uart_rx_cnt = 0;
  71   1        REN0 = 1;                     // Enable receiver
  72   1        SM0 = 0;                      // Mode 1..
  73   1        SM1 = 1;                      // ..8 bit variable baud rate
  74   1        PCON |= 0x80;                 // SMOD = 1
  75   1        ADCON |= 0x80;                // Select internal baud rate generator
  76   1        switch(baud)
  77   1        {
  78   2          case UART_BAUD_57K6:
  79   2            temp = BAUD_57K6;
  80   2            break;
  81   2          case UART_BAUD_38K4:
  82   2            temp = BAUD_38K4;
  83   2            break;
  84   2          case UART_BAUD_9K6:
  85   2            temp = BAUD_9K6;
  86   2            break;
  87   2          case UART_BAUD_19K2:
  88   2          default:
  89   2            temp = BAUD_19K2;
  90   2            break;
  91   2        }
  92   1        S0RELL = (uint8_t)temp;
  93   1        S0RELH = (uint8_t)(temp >> 8);
  94   1      
  95   1        TI0 = 0;
  96   1        ES0 = 1;                      // Enable UART0 interrupt
  97   1      }
  98          
  99          void hal_uart_putchar(uint8_t ch)
 100          {
 101   1        // Wait until there is space in the TX buffer:
 102   1        while(uart_tx_cnt > UART_NBUF)
 103   1          ;
 104   1        ES0 = 0;
 105   1        if (uart_tx_cnt == 0)
 106   1        {
 107   2          S0BUF = ch;                 // Write first char directly to the UART SFR
 108   2        }
 109   1        else
 110   1        {
 111   2          uart_tx[uart_tx_wp] = ch;
 112   2          uart_tx_wp = (uart_tx_wp + 1) % UART_NBUF;
 113   2        }
 114   1        uart_tx_cnt++;
C51 COMPILER V9.00   HAL_UART                                                              10/03/2010 16:43:51 PAGE 3   

 115   1        ES0 = 1;
 116   1      }
 117          
 118          
 119          uint8_t hal_uart_chars_available(void)
 120          {
 121   1        return uart_rx_cnt;
 122   1      }
 123          
 124          bool hal_uart_tx_complete()
 125          {
 126   1        if(uart_tx_cnt == 0)
 127   1        {
 128   2          return true;
 129   2        }
 130   1        else
 131   1        {
 132   2          return false;
 133   2        }
 134   1      }
 135          uint8_t hal_uart_getchar(void)
 136          {
 137   1        uint8_t ch;
 138   1      
 139   1        // Wait until a character is available:
 140   1      
 141   1        while(uart_rx_cnt == 0)
 142   1        ;
 143   1        ES0 = 0;
 144   1        ch = uart_rx[uart_rx_rp];
 145   1        uart_rx_rp = (uart_rx_rp + 1) % UART_NBUF;
 146   1        uart_rx_cnt--;
 147   1        ES0 = 1;
 148   1        return ch;
 149   1      }
 150          
 151          /**
 152           * @}
 153           */


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    314    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      6    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =     16    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
