<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [C:\working\Alientek\ALIENTEK MINISTM32 À©Õ¹ÊµÑé2 ´¥ÃþÆÁÓ²¼þ¼ì²â\USER\TEST.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image C:\working\Alientek\ALIENTEK MINISTM32 À©Õ¹ÊµÑé2 ´¥ÃþÆÁÓ²¼þ¼ì²â\USER\TEST.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, RVCT4.0 [Build 524]: Last Updated: Wed Nov 03 22:59:55 2010
<BR><P>
<H3>Maximum Stack Usage =        232 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; Touch_Init &rArr; Touch_Adjust &rArr; Read_TP_Once &rArr; Read_ADS2 &rArr; Read_ADS &rArr; ADS_Read_XY &rArr; ADS_Read_AD
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[c8c748]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[c8c61c]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c8c61c]">NMI_Handler</a><BR>
 <LI><a href="#[c8c5e0]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c8c5e0]">HardFault_Handler</a><BR>
 <LI><a href="#[c8c5a4]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c8c5a4]">MemManage_Handler</a><BR>
 <LI><a href="#[c8c568]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c8c568]">BusFault_Handler</a><BR>
 <LI><a href="#[c8c52c]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c8c52c]">UsageFault_Handler</a><BR>
 <LI><a href="#[c8c4f0]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c8c4f0]">SVC_Handler</a><BR>
 <LI><a href="#[c8c4b4]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c8c4b4]">DebugMon_Handler</a><BR>
 <LI><a href="#[c8c478]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c8c478]">PendSV_Handler</a><BR>
 <LI><a href="#[c8c43c]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c8c43c]">SysTick_Handler</a><BR>
 <LI><a href="#[c8c400]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c8c400]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[c8c658]">Reset_Handler</a>
 <LI><a href="#[c8c61c]">NMI_Handler</a>
 <LI><a href="#[c8c5e0]">HardFault_Handler</a>
 <LI><a href="#[c8c5a4]">MemManage_Handler</a>
 <LI><a href="#[c8c568]">BusFault_Handler</a>
 <LI><a href="#[c8c52c]">UsageFault_Handler</a>
 <LI><a href="#[c8c4f0]">SVC_Handler</a>
 <LI><a href="#[c8c4b4]">DebugMon_Handler</a>
 <LI><a href="#[c8c478]">PendSV_Handler</a>
 <LI><a href="#[c8c43c]">SysTick_Handler</a>
 <LI><a href="#[c8658c]">WWDG_IRQHandler</a>
 <LI><a href="#[c8bed8]">PVD_IRQHandler</a>
 <LI><a href="#[c8bd70]">TAMPER_IRQHandler</a>
 <LI><a href="#[c84930]">RTC_IRQHandler</a>
 <LI><a href="#[c8c004]">FLASH_IRQHandler</a>
 <LI><a href="#[c8be9c]">RCC_IRQHandler</a>
 <LI><a href="#[c84534]">EXTI0_IRQHandler</a>
 <LI><a href="#[c81d5c]">EXTI1_IRQHandler</a>
 <LI><a href="#[c8c0f4]">EXTI2_IRQHandler</a>
 <LI><a href="#[c8c0b8]">EXTI3_IRQHandler</a>
 <LI><a href="#[c8c07c]">EXTI4_IRQHandler</a>
 <LI><a href="#[c8c34c]">DMAChannel1_IRQHandler</a>
 <LI><a href="#[c8c310]">DMAChannel2_IRQHandler</a>
 <LI><a href="#[c8c2d4]">DMAChannel3_IRQHandler</a>
 <LI><a href="#[c8c298]">DMAChannel4_IRQHandler</a>
 <LI><a href="#[c8c25c]">DMAChannel5_IRQHandler</a>
 <LI><a href="#[c8c220]">DMAChannel6_IRQHandler</a>
 <LI><a href="#[c8c1e4]">DMAChannel7_IRQHandler</a>
 <LI><a href="#[c8c400]">ADC_IRQHandler</a>
 <LI><a href="#[c8baa0]">USB_HP_CAN_TX_IRQHandler</a>
 <LI><a href="#[c8ba64]">USB_LP_CAN_RX0_IRQHandler</a>
 <LI><a href="#[c8c3c4]">CAN_RX1_IRQHandler</a>
 <LI><a href="#[c8c388]">CAN_SCE_IRQHandler</a>
 <LI><a href="#[c8c040]">EXTI9_5_IRQHandler</a>
 <LI><a href="#[c8bd34]">TIM1_BRK_IRQHandler</a>
 <LI><a href="#[c8bc80]">TIM1_UP_IRQHandler</a>
 <LI><a href="#[c8bcbc]">TIM1_TRG_COM_IRQHandler</a>
 <LI><a href="#[c8bcf8]">TIM1_CC_IRQHandler</a>
 <LI><a href="#[c8bc44]">TIM2_IRQHandler</a>
 <LI><a href="#[c86208]">TIM3_IRQHandler</a>
 <LI><a href="#[c8bbcc]">TIM4_IRQHandler</a>
 <LI><a href="#[c8bf8c]">I2C1_EV_IRQHandler</a>
 <LI><a href="#[c8bfc8]">I2C1_ER_IRQHandler</a>
 <LI><a href="#[c8bf14]">I2C2_EV_IRQHandler</a>
 <LI><a href="#[c8bf50]">I2C2_ER_IRQHandler</a>
 <LI><a href="#[c8bde8]">SPI1_IRQHandler</a>
 <LI><a href="#[c8bdac]">SPI2_IRQHandler</a>
 <LI><a href="#[c8bb90]">USART1_IRQHandler</a>
 <LI><a href="#[c8bb54]">USART2_IRQHandler</a>
 <LI><a href="#[c8bb18]">USART3_IRQHandler</a>
 <LI><a href="#[c8c16c]">EXTI15_10_IRQHandler</a>
 <LI><a href="#[c8be60]">RTCAlarm_IRQHandler</a>
 <LI><a href="#[c8badc]">USBWakeUp_IRQHandler</a>
 <LI><a href="#[c80628]">__main</a>
 <LI><a href="#[c87360]">fputc</a>
 <LI><a href="#[c7e300]">_printf_input_char</a>
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[c80628]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[c7e828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[158e9d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[158e9d4]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[c80628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[158e998]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7e828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[158e95c]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[158e920]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[158e77c]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[158e77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[158e77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[158e68c]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[c80970]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[c81384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[c808bc]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[c81474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[c7e1d4]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[1593a38]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[1594cf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[1592124]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002A))

<P><STRONG><a name="[159219c]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000028))

<P><STRONG><a name="[159255c]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[15923f4]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[1592034]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[15920ac]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[159246c]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[159237c]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[1592958]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000006))

<P><STRONG><a name="[15927b4]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000D))

<P><STRONG><a name="[159273c]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))

<P><STRONG><a name="[15926c4]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[159264c]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[15925d4]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[1592868]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[1591ff8]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002F))

<P><STRONG><a name="[15924e4]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[1592304]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[15928e0]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000008))

<P><STRONG><a name="[1591170]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[1591878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[15905f4]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[1590414]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[15903d8]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[1590540]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[15906a8]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[15904c8]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[c7e828]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[c80628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[158e998]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[1594dac]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[1594a28]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[1593f9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[1594cf8]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[1593a38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[1594d34]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[1594c44]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; Touch_Init &rArr; Touch_Adjust &rArr; Read_TP_Once &rArr; Read_ADS2 &rArr; Read_ADS &rArr; ADS_Read_XY &rArr; ADS_Read_AD
</UL>
<BR>[Calls]<UL><LI><a href="#[c888b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1593e34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[1594c80]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[15934d4]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[1593e34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[1591878]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[1591170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[15918b4]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[159183c]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[c8739c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[c87b1c]"></a>WFI_SET</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sys.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[c879b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Standby
</UL>

<P><STRONG><a name="[c8c658]"></a>Reset_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[c8c61c]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c8c61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c8c61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[c8c5e0]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c8c5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c8c5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[c8c5a4]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c8c5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c8c5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[c8c568]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c8c568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c8c568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[c8c52c]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c8c52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c8c52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[c8c4f0]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c8c4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c8c4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[c8c4b4]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c8c4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c8c4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[c8c478]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c8c478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c8c478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[c8c43c]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c8c43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c8c43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[c8c400]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c8c400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[c8c400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[c8c3c4]"></a>CAN_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[c8c388]"></a>CAN_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[c8c34c]"></a>DMAChannel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[c8c310]"></a>DMAChannel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[c8c2d4]"></a>DMAChannel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[c8c298]"></a>DMAChannel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[c8c25c]"></a>DMAChannel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[c8c220]"></a>DMAChannel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[c8c1e4]"></a>DMAChannel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[c8c16c]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[c8c0f4]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[c8c0b8]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[c8c07c]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[c8c040]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[c8c004]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[c8bfc8]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[c8bf8c]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[c8bf50]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[c8bf14]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[c8bed8]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[c8be9c]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[c8be60]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[c8bde8]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[c8bdac]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[c8bd70]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[c8bd34]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[c8bcf8]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[c8bcbc]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[c8bc80]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[c8bc44]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[c8bbcc]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[c8bb90]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[c8bb54]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[c8bb18]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[c8badc]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[c8baa0]"></a>USB_HP_CAN_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[c8ba64]"></a>USB_LP_CAN_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[c8c748]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, stm32f10x.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1593f9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[c888f0]"></a>Load_Drow_Dialog</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = Load_Drow_Dialog &rArr; LCD_ShowString &rArr; LCD_ShowChar &rArr; LCD_DrawPoint &rArr; LCD_SetCursor &rArr; LCD_WriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[c886d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
<LI><a href="#[c88788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[c888b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c888b4]"></a>main</STRONG> (Thumb, 302 bytes, Stack size 16 bytes, test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = main &rArr; Touch_Init &rArr; Touch_Adjust &rArr; Read_TP_Once &rArr; Read_ADS2 &rArr; Read_ADS &rArr; ADS_Read_XY &rArr; ADS_Read_AD
</UL>
<BR>[Calls]<UL><LI><a href="#[c88440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[c8847c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[c884b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
<LI><a href="#[c884f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_Init
<LI><a href="#[c88530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_Adjust
<LI><a href="#[c8856c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stm32_Clock_Init
<LI><a href="#[c885a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Adjdata
<LI><a href="#[c88620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pen_Int_Set
<LI><a href="#[c88698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[c886d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
<LI><a href="#[c88710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowNum
<LI><a href="#[c8874c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[c88788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[c887c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Scan
<LI><a href="#[c88800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Init
<LI><a href="#[c8883c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Big_Point
<LI><a href="#[c88878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Convert_Pos
<LI><a href="#[c888f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_Drow_Dialog
</UL>
<BR>[Called By]<UL><LI><a href="#[1594c44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[c884b8]"></a>delay_init</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, delay.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c888b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c8847c]"></a>delay_ms</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, delay.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c81dd4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_TP_Once
<LI><a href="#[c83850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
<LI><a href="#[c84570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_WKUP
<LI><a href="#[c8496c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[c88530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_Adjust
<LI><a href="#[c887c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Scan
<LI><a href="#[c888b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c87fcc]"></a>delay_us</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, delay.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c81ec4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS_Read_AD
<LI><a href="#[c831fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_NAck
<LI><a href="#[c83238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Ack
<LI><a href="#[c835bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[c835f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[c83634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[c83670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
<LI><a href="#[c836ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
</UL>

<P><STRONG><a name="[c87ae0]"></a>MY_NVIC_SetVectorTable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sys.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c879f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MYRCC_DeInit
</UL>

<P><STRONG><a name="[c87aa4]"></a>MY_NVIC_PriorityGroupConfig</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, sys.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c87a68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MY_NVIC_Init
</UL>

<P><STRONG><a name="[c87a68]"></a>MY_NVIC_Init</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, sys.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MY_NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c87aa4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MY_NVIC_PriorityGroupConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[c844f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WKUP_Init
<LI><a href="#[c8496c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[c861cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timerx_Init
<LI><a href="#[c86604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WWDG_Init
<LI><a href="#[c884f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_Init
</UL>

<P><STRONG><a name="[c87a2c]"></a>Ex_NVIC_Config</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, sys.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c844f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WKUP_Init
</UL>

<P><STRONG><a name="[c879f0]"></a>MYRCC_DeInit</STRONG> (Thumb, 90 bytes, Stack size 4 bytes, sys.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = MYRCC_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[c87ae0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MY_NVIC_SetVectorTable
</UL>
<BR>[Called By]<UL><LI><a href="#[c8856c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stm32_Clock_Init
</UL>

<P><STRONG><a name="[c879b4]"></a>Sys_Standby</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, sys.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Sys_Standby
</UL>
<BR>[Calls]<UL><LI><a href="#[c87b1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WFI_SET
</UL>
<BR>[Called By]<UL><LI><a href="#[c844f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WKUP_Init
<LI><a href="#[c845ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Enter_Standby
</UL>

<P><STRONG><a name="[c87978]"></a>Sys_Soft_Reset</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sys.o(.text), UNUSED)

<P><STRONG><a name="[c8793c]"></a>JTAG_Set</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, sys.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c8874c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[c8856c]"></a>Stm32_Clock_Init</STRONG> (Thumb, 130 bytes, Stack size 12 bytes, sys.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Stm32_Clock_Init &rArr; MYRCC_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[c879f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MYRCC_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[c888b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c8739c]"></a>_sys_exit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[159183c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[c87360]"></a>fputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usart.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> noretval__2printf.o(.text)
</UL>
<P><STRONG><a name="[c88440]"></a>uart_init</STRONG> (Thumb, 162 bytes, Stack size 40 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = uart_init &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[c7ec9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[c7edc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[c7f0d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[c7f584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[c7f8cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
</UL>
<BR>[Called By]<UL><LI><a href="#[c888b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c88698]"></a>LED_Init</STRONG> (Thumb, 110 bytes, Stack size 0 bytes, led.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c888b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c88800]"></a>KEY_Init</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, key.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c888b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c887c4]"></a>KEY_Scan</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = KEY_Scan
</UL>
<BR>[Calls]<UL><LI><a href="#[c8847c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[c888b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c8667c]"></a>IWDG_Init</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, wdg.o(.text), UNUSED)

<P><STRONG><a name="[c86640]"></a>IWDG_Feed</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, wdg.o(.text), UNUSED)

<P><STRONG><a name="[c86604]"></a>WWDG_Init</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, wdg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c87a68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MY_NVIC_Init
</UL>

<P><STRONG><a name="[c865c8]"></a>WWDG_Set_Counter</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, wdg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c8658c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WWDG_IRQHandler
</UL>

<P><STRONG><a name="[c8658c]"></a>WWDG_IRQHandler</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, wdg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WWDG_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[c865c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WWDG_Set_Counter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[c86208]"></a>TIM3_IRQHandler</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, timer.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[c861cc]"></a>Timerx_Init</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c87a68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MY_NVIC_Init
</UL>

<P><STRONG><a name="[c86190]"></a>PWM_Init</STRONG> (Thumb, 162 bytes, Stack size 0 bytes, timer.o(.text), UNUSED)

<P><STRONG><a name="[c85614]"></a>LCD_WR_REG</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, ili93xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c853bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPoint
<LI><a href="#[c854ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadPoint
<LI><a href="#[c85560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRAM_Prepare
<LI><a href="#[c8559c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadReg
<LI><a href="#[c855d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteReg
</UL>

<P><STRONG><a name="[c855d8]"></a>LCD_WriteReg</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, ili93xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_WriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[c85614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
</UL>
<BR>[Called By]<UL><LI><a href="#[c851dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
<LI><a href="#[c85290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
<LI><a href="#[c85380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[c85434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayOff
<LI><a href="#[c85470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayOn
<LI><a href="#[c8874c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[c8559c]"></a>LCD_ReadReg</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, ili93xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_ReadReg
</UL>
<BR>[Calls]<UL><LI><a href="#[c85614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
</UL>
<BR>[Called By]<UL><LI><a href="#[c8874c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[c85560]"></a>LCD_WriteRAM_Prepare</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, ili93xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LCD_WriteRAM_Prepare
</UL>
<BR>[Calls]<UL><LI><a href="#[c85614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
</UL>
<BR>[Called By]<UL><LI><a href="#[c85290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
<LI><a href="#[c85380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[c88788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
</UL>

<P><STRONG><a name="[c85524]"></a>LCD_WriteRAM</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, ili93xx.o(.text), UNUSED)

<P><STRONG><a name="[c854e8]"></a>LCD_BGR2RGB</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, ili93xx.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c854ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadPoint
</UL>

<P><STRONG><a name="[c854ac]"></a>LCD_ReadPoint</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, ili93xx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c851dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
<LI><a href="#[c854e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_BGR2RGB
<LI><a href="#[c85614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
</UL>

<P><STRONG><a name="[c85470]"></a>LCD_DisplayOn</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, ili93xx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c855d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteReg
</UL>

<P><STRONG><a name="[c85434]"></a>LCD_DisplayOff</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, ili93xx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c855d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteReg
</UL>

<P><STRONG><a name="[c853f8]"></a>Delay</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ili93xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c8874c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[c853bc]"></a>LCD_DrawPoint</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ili93xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = LCD_DrawPoint &rArr; LCD_SetCursor &rArr; LCD_WriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[c851dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
<LI><a href="#[c85614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
</UL>
<BR>[Called By]<UL><LI><a href="#[c81d98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drow_Touch_Point
<LI><a href="#[c85290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
<LI><a href="#[c852cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Circle
<LI><a href="#[c85344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawLine
<LI><a href="#[c8883c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Big_Point
</UL>

<P><STRONG><a name="[c88788]"></a>LCD_Clear</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, ili93xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = LCD_Clear &rArr; LCD_SetCursor &rArr; LCD_WriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[c851dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
<LI><a href="#[c85560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRAM_Prepare
</UL>
<BR>[Called By]<UL><LI><a href="#[c884f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_Init
<LI><a href="#[c88530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_Adjust
<LI><a href="#[c886d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
<LI><a href="#[c8874c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[c888b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[c888f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_Drow_Dialog
</UL>

<P><STRONG><a name="[c8874c]"></a>LCD_Init</STRONG> (Thumb, 2722 bytes, Stack size 8 bytes, ili93xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = LCD_Init &rArr; __2printf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c81564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[c853f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[c8559c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadReg
<LI><a href="#[c855d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteReg
<LI><a href="#[c8793c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JTAG_Set
<LI><a href="#[c88788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[c888b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c85380]"></a>LCD_Fill</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, ili93xx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c851dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
<LI><a href="#[c85560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRAM_Prepare
<LI><a href="#[c855d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteReg
</UL>

<P><STRONG><a name="[c85344]"></a>LCD_DrawLine</STRONG> (Thumb, 200 bytes, Stack size 72 bytes, ili93xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = LCD_DrawLine &rArr; LCD_DrawPoint &rArr; LCD_SetCursor &rArr; LCD_WriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[c853bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[c81d98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drow_Touch_Point
<LI><a href="#[c85308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawRectangle
</UL>

<P><STRONG><a name="[c85308]"></a>LCD_DrawRectangle</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, ili93xx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c85344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawLine
</UL>

<P><STRONG><a name="[c852cc]"></a>Draw_Circle</STRONG> (Thumb, 216 bytes, Stack size 32 bytes, ili93xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Draw_Circle &rArr; LCD_DrawPoint &rArr; LCD_SetCursor &rArr; LCD_WriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[c853bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[c81d98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drow_Touch_Point
</UL>

<P><STRONG><a name="[c85290]"></a>LCD_ShowChar</STRONG> (Thumb, 416 bytes, Stack size 40 bytes, ili93xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = LCD_ShowChar &rArr; LCD_DrawPoint &rArr; LCD_SetCursor &rArr; LCD_WriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[c851dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
<LI><a href="#[c853bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPoint
<LI><a href="#[c85560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRAM_Prepare
<LI><a href="#[c855d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[c85218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Show2Num
<LI><a href="#[c886d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
<LI><a href="#[c88710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowNum
</UL>

<P><STRONG><a name="[c85254]"></a>mypow</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ili93xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mypow
</UL>
<BR>[Called By]<UL><LI><a href="#[c85218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Show2Num
<LI><a href="#[c88710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowNum
</UL>

<P><STRONG><a name="[c88710]"></a>LCD_ShowNum</STRONG> (Thumb, 158 bytes, Stack size 56 bytes, ili93xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = LCD_ShowNum &rArr; LCD_ShowChar &rArr; LCD_DrawPoint &rArr; LCD_SetCursor &rArr; LCD_WriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[c85254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mypow
<LI><a href="#[c85290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
</UL>
<BR>[Called By]<UL><LI><a href="#[c88878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Convert_Pos
<LI><a href="#[c888b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c85218]"></a>LCD_Show2Num</STRONG> (Thumb, 102 bytes, Stack size 40 bytes, ili93xx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c85254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mypow
<LI><a href="#[c85290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
</UL>

<P><STRONG><a name="[c886d4]"></a>LCD_ShowString</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, ili93xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = LCD_ShowString &rArr; LCD_ShowChar &rArr; LCD_DrawPoint &rArr; LCD_SetCursor &rArr; LCD_WriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[c85290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
<LI><a href="#[c88788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[c88530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_Adjust
<LI><a href="#[c888b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[c888f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_Drow_Dialog
</UL>

<P><STRONG><a name="[c84a5c]"></a>RTC_Get_Week</STRONG> (Thumb, 110 bytes, Stack size 20 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RTC_Get_Week
</UL>
<BR>[Called By]<UL><LI><a href="#[c849e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Get
</UL>

<P><STRONG><a name="[c84a20]"></a>Is_Leap_Year</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c849a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set
<LI><a href="#[c849e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Get
</UL>

<P><STRONG><a name="[c849e4]"></a>RTC_Get</STRONG> (Thumb, 248 bytes, Stack size 16 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = RTC_Get &rArr; RTC_Get_Week
</UL>
<BR>[Calls]<UL><LI><a href="#[c84a20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_Leap_Year
<LI><a href="#[c84a5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Get_Week
</UL>
<BR>[Called By]<UL><LI><a href="#[c84930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
<LI><a href="#[c8496c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[c849a8]"></a>RTC_Set</STRONG> (Thumb, 266 bytes, Stack size 32 bytes, rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c84a20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_Leap_Year
</UL>
<BR>[Called By]<UL><LI><a href="#[c8496c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[c8496c]"></a>RTC_Init</STRONG> (Thumb, 360 bytes, Stack size 16 bytes, rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c849a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set
<LI><a href="#[c849e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Get
<LI><a href="#[c87a68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MY_NVIC_Init
<LI><a href="#[c8847c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>

<P><STRONG><a name="[c84930]"></a>RTC_IRQHandler</STRONG> (Thumb, 80 bytes, Stack size 4 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RTC_IRQHandler &rArr; RTC_Get &rArr; RTC_Get_Week
</UL>
<BR>[Calls]<UL><LI><a href="#[c849e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[c845ac]"></a>Sys_Enter_Standby</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, wkup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Sys_Enter_Standby &rArr; Sys_Standby
</UL>
<BR>[Calls]<UL><LI><a href="#[c879b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Standby
</UL>
<BR>[Called By]<UL><LI><a href="#[c84534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[c84570]"></a>Check_WKUP</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, wkup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Check_WKUP
</UL>
<BR>[Calls]<UL><LI><a href="#[c8847c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[c844f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WKUP_Init
<LI><a href="#[c84534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[c84534]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, wkup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EXTI0_IRQHandler &rArr; Check_WKUP
</UL>
<BR>[Calls]<UL><LI><a href="#[c84570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_WKUP
<LI><a href="#[c845ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Enter_Standby
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[c844f8]"></a>WKUP_Init</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, wkup.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c84570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_WKUP
<LI><a href="#[c879b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Standby
<LI><a href="#[c87a2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ex_NVIC_Config
<LI><a href="#[c87a68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MY_NVIC_Init
</UL>

<P><STRONG><a name="[c838c8]"></a>AT24CXX_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, 24cxx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AT24CXX_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c836e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c884f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_Init
</UL>

<P><STRONG><a name="[c8388c]"></a>AT24CXX_ReadOneByte</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, 24cxx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = AT24CXX_ReadOneByte &rArr; IIC_Read_Byte &rArr; IIC_NAck
</UL>
<BR>[Calls]<UL><LI><a href="#[c835bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[c835f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[c83634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[c83670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
<LI><a href="#[c836ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[c81d20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Adjdata
<LI><a href="#[c83760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Read
<LI><a href="#[c8379c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Check
<LI><a href="#[c837d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadLenByte
<LI><a href="#[c885a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Adjdata
</UL>

<P><STRONG><a name="[c83850]"></a>AT24CXX_WriteOneByte</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, 24cxx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; IIC_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[c835bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[c835f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[c83634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[c83670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
<LI><a href="#[c8847c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[c83724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Write
<LI><a href="#[c8379c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Check
<LI><a href="#[c83814]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteLenByte
<LI><a href="#[c885a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Adjdata
</UL>

<P><STRONG><a name="[c83814]"></a>AT24CXX_WriteLenByte</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, 24cxx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = AT24CXX_WriteLenByte &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; IIC_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[c83850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
</UL>
<BR>[Called By]<UL><LI><a href="#[c885a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Adjdata
</UL>

<P><STRONG><a name="[c837d8]"></a>AT24CXX_ReadLenByte</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, 24cxx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = AT24CXX_ReadLenByte &rArr; AT24CXX_ReadOneByte &rArr; IIC_Read_Byte &rArr; IIC_NAck
</UL>
<BR>[Calls]<UL><LI><a href="#[c8388c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
</UL>
<BR>[Called By]<UL><LI><a href="#[c81d20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Adjdata
</UL>

<P><STRONG><a name="[c8379c]"></a>AT24CXX_Check</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, 24cxx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c83850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
<LI><a href="#[c8388c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
</UL>

<P><STRONG><a name="[c83760]"></a>AT24CXX_Read</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, 24cxx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c8388c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
</UL>

<P><STRONG><a name="[c83724]"></a>AT24CXX_Write</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, 24cxx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c83850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
</UL>

<P><STRONG><a name="[c836e8]"></a>IIC_Init</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, myiic.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c838c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Init
</UL>

<P><STRONG><a name="[c83634]"></a>IIC_Start</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, myiic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IIC_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[c87fcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[c83850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
<LI><a href="#[c8388c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
</UL>

<P><STRONG><a name="[c835f8]"></a>IIC_Stop</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, myiic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IIC_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[c87fcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[c835bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[c83850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
<LI><a href="#[c8388c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
</UL>

<P><STRONG><a name="[c835bc]"></a>IIC_Wait_Ack</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, myiic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IIC_Wait_Ack &rArr; IIC_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[c835f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[c87fcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[c83850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
<LI><a href="#[c8388c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
</UL>

<P><STRONG><a name="[c83238]"></a>IIC_Ack</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, myiic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IIC_Ack
</UL>
<BR>[Calls]<UL><LI><a href="#[c87fcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[c836ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
</UL>

<P><STRONG><a name="[c831fc]"></a>IIC_NAck</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, myiic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IIC_NAck
</UL>
<BR>[Calls]<UL><LI><a href="#[c87fcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[c836ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
</UL>

<P><STRONG><a name="[c83670]"></a>IIC_Send_Byte</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, myiic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IIC_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[c87fcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[c83850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
<LI><a href="#[c8388c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
</UL>

<P><STRONG><a name="[c836ac]"></a>IIC_Read_Byte</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, myiic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IIC_Read_Byte &rArr; IIC_NAck
</UL>
<BR>[Calls]<UL><LI><a href="#[c831fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_NAck
<LI><a href="#[c83238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Ack
<LI><a href="#[c87fcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[c8388c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
</UL>

<P><STRONG><a name="[c81f00]"></a>ADS_Write_Byte</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, touch.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c81ec4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS_Read_AD
</UL>

<P><STRONG><a name="[c81ec4]"></a>ADS_Read_AD</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, touch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADS_Read_AD
</UL>
<BR>[Calls]<UL><LI><a href="#[c81f00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS_Write_Byte
<LI><a href="#[c87fcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[c81e88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS_Read_XY
</UL>

<P><STRONG><a name="[c81e88]"></a>ADS_Read_XY</STRONG> (Thumb, 130 bytes, Stack size 56 bytes, touch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ADS_Read_XY &rArr; ADS_Read_AD
</UL>
<BR>[Calls]<UL><LI><a href="#[c81ec4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS_Read_AD
</UL>
<BR>[Called By]<UL><LI><a href="#[c81e4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_ADS
</UL>

<P><STRONG><a name="[c81e4c]"></a>Read_ADS</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, touch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Read_ADS &rArr; ADS_Read_XY &rArr; ADS_Read_AD
</UL>
<BR>[Calls]<UL><LI><a href="#[c81e88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS_Read_XY
</UL>
<BR>[Called By]<UL><LI><a href="#[c81e10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_ADS2
<LI><a href="#[c884f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_Init
</UL>

<P><STRONG><a name="[c81e10]"></a>Read_ADS2</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, touch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Read_ADS2 &rArr; Read_ADS &rArr; ADS_Read_XY &rArr; ADS_Read_AD
</UL>
<BR>[Calls]<UL><LI><a href="#[c81e4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_ADS
</UL>
<BR>[Called By]<UL><LI><a href="#[c81dd4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_TP_Once
<LI><a href="#[c88878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Convert_Pos
</UL>

<P><STRONG><a name="[c88620]"></a>Pen_Int_Set</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, touch.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c81dd4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_TP_Once
<LI><a href="#[c888b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c81dd4]"></a>Read_TP_Once</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, touch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Read_TP_Once &rArr; Read_ADS2 &rArr; Read_ADS &rArr; ADS_Read_XY &rArr; ADS_Read_AD
</UL>
<BR>[Calls]<UL><LI><a href="#[c81e10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_ADS2
<LI><a href="#[c8847c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[c88620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pen_Int_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[c88530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_Adjust
</UL>

<P><STRONG><a name="[c81d98]"></a>Drow_Touch_Point</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, touch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = Drow_Touch_Point &rArr; LCD_DrawLine &rArr; LCD_DrawPoint &rArr; LCD_SetCursor &rArr; LCD_WriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[c852cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Circle
<LI><a href="#[c85344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawLine
<LI><a href="#[c853bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[c88530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_Adjust
</UL>

<P><STRONG><a name="[c8883c]"></a>Draw_Big_Point</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, touch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Draw_Big_Point &rArr; LCD_DrawPoint &rArr; LCD_SetCursor &rArr; LCD_WriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[c853bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[c888b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c88878]"></a>Convert_Pos</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, touch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = Convert_Pos &rArr; LCD_ShowNum &rArr; LCD_ShowChar &rArr; LCD_DrawPoint &rArr; LCD_SetCursor &rArr; LCD_WriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[c7ec9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[c7edc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[c7ee7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[c7f0d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[c7f980]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[c81e10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_ADS2
<LI><a href="#[c88710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowNum
</UL>
<BR>[Called By]<UL><LI><a href="#[c888b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c81d5c]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, touch.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[c885a8]"></a>Save_Adjdata</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, touch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Save_Adjdata &rArr; AT24CXX_WriteLenByte &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; IIC_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[c7ec9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[c7f32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[c83814]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteLenByte
<LI><a href="#[c83850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
<LI><a href="#[c8388c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
</UL>
<BR>[Called By]<UL><LI><a href="#[c884f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_Init
<LI><a href="#[c888b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c81d20]"></a>Get_Adjdata</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, touch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Get_Adjdata &rArr; AT24CXX_ReadLenByte &rArr; AT24CXX_ReadOneByte &rArr; IIC_Read_Byte &rArr; IIC_NAck
</UL>
<BR>[Calls]<UL><LI><a href="#[c7ee7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[c7f584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[c837d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadLenByte
<LI><a href="#[c8388c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
</UL>
<BR>[Called By]<UL><LI><a href="#[c884f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_Init
</UL>

<P><STRONG><a name="[c88530]"></a>Touch_Adjust</STRONG> (Thumb, 1142 bytes, Stack size 72 bytes, touch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = Touch_Adjust &rArr; Read_TP_Once &rArr; Read_ADS2 &rArr; Read_ADS &rArr; ADS_Read_XY &rArr; ADS_Read_AD
</UL>
<BR>[Calls]<UL><LI><a href="#[c7ea80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[c7ec9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[c7edc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[c7ee7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[c7f32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[c7f584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[c7f8cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[c7fcc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[c7fdf4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[c7ff5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[c80088]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[c80448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[c81d98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drow_Touch_Point
<LI><a href="#[c81dd4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_TP_Once
<LI><a href="#[c8847c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[c886d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
<LI><a href="#[c88788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[c884f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_Init
<LI><a href="#[c888b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c884f4]"></a>Touch_Init</STRONG> (Thumb, 204 bytes, Stack size 8 bytes, touch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = Touch_Init &rArr; Touch_Adjust &rArr; Read_TP_Once &rArr; Read_ADS2 &rArr; Read_ADS &rArr; ADS_Read_XY &rArr; ADS_Read_AD
</UL>
<BR>[Calls]<UL><LI><a href="#[c81d20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Adjdata
<LI><a href="#[c81e4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_ADS
<LI><a href="#[c838c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Init
<LI><a href="#[c87a68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MY_NVIC_Init
<LI><a href="#[c88530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_Adjust
<LI><a href="#[c885a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Adjdata
<LI><a href="#[c88788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[c888b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c81870]"></a>__use_no_semihosting</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi_2.o(.text), UNUSED)

<P><STRONG><a name="[c81564]"></a>__2printf</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, noretval__2printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = __2printf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c7e2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[c8874c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[c81474]"></a>__printf</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, __printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c808bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
</UL>
<BR>[Called By]<UL><LI><a href="#[c7e2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[c81384]"></a>_printf_int_dec</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[c7e468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[15958ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[c80970]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[c80790]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[c80754]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[c80718]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[c7e918]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[c7e8dc]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[c7e5d0]"></a>__read_errno</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, _rserrno.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[159471c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>

<P><STRONG><a name="[c7e594]"></a>__set_errno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[159471c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[c7ea80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[c7e468]"></a>_printf_int_common</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[c81384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[c7e2c4]"></a>_printf_char_common</STRONG> (Thumb, 34 bytes, Stack size 72 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c81474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c81564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[15958ec]"></a>__rt_udiv10</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rtudiv10.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c81384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[159471c]"></a>__aeabi_errno_addr</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c7e594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[c7e5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
</UL>

<P><STRONG><a name="[15946e0]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[15946a4]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[1594104]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[15940c8]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1593f9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[159408c]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[1593f9c]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[c8c748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[15940c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[1594a28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[1593e34]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[15934d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[1594c44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[c851dc]"></a>LCD_SetCursor</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, ili93xx.o(i.LCD_SetCursor))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LCD_SetCursor &rArr; LCD_WriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[c855d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[c85290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
<LI><a href="#[c85380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[c853bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPoint
<LI><a href="#[c854ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadPoint
<LI><a href="#[c88788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
</UL>

<P><STRONG><a name="[c7ea80]"></a>sqrt</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sqrt &rArr; _dsqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[c7e594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[c7ff5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[159552c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[c88530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_Adjust
</UL>

<P><STRONG><a name="[1594488]"></a>__fpl_dcheck_NaN2</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dcheck.o(x$fpl$dcheck), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1594398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[15956d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_InfNaN
</UL>

<P><STRONG><a name="[15957fc]"></a>__fpl_dcheck_NaN1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dcheck1.o(x$fpl$dcheck1))
<BR><BR>[Calls]<UL><LI><a href="#[1594398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[c8040c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfixu
<LI><a href="#[159552c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
</UL>

<P><STRONG><a name="[15956d0]"></a>__fpl_dcmp_InfNaN</STRONG> (Thumb, 120 bytes, Stack size 4 bytes, dcmpin.o(x$fpl$dcmpinfnan), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15942a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
<LI><a href="#[1594488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN2
</UL>
<BR>[Called By]<UL><LI><a href="#[c7fdb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drcmple
<LI><a href="#[c7ff20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
</UL>

<P><STRONG><a name="[1595694]"></a>__fpl_inf_dcmp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dcmpin.o(x$fpl$dcmpinfnan), UNUSED)

<P><STRONG><a name="[c80448]"></a>__aeabi_d2uiz</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dfixu.o(x$fpl$dfixu))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[c88530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_Adjust
</UL>

<P><STRONG><a name="[c8040c]"></a>_dfixu</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, dfixu.o(x$fpl$dfixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15957fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>

<P><STRONG><a name="[c803d0]"></a>__fpl_inf_dfixu</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dfixu.o(x$fpl$dfixu), UNUSED)

<P><STRONG><a name="[c8013c]"></a>__aeabi_i2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[c80100]"></a>_dflt</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[c800c4]"></a>__dflt_normalise</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dflt_clz.o(x$fpl$dflt), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c8004c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfltu
</UL>

<P><STRONG><a name="[c80088]"></a>__aeabi_ui2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu))
<BR><BR>[Called By]<UL><LI><a href="#[c88530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_Adjust
</UL>

<P><STRONG><a name="[c8004c]"></a>_dfltu</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c800c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__dflt_normalise
</UL>

<P><STRONG><a name="[c7ff5c]"></a>__aeabi_cdcmple</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dleqf.o(x$fpl$dleqf))
<BR><BR>[Called By]<UL><LI><a href="#[c7ea80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[c88530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_Adjust
</UL>

<P><STRONG><a name="[c7ff20]"></a>_dcmple</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15956d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_InfNaN
</UL>

<P><STRONG><a name="[c7fdf4]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, drleqf.o(x$fpl$drleqf))
<BR><BR>[Called By]<UL><LI><a href="#[c88530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_Adjust
</UL>

<P><STRONG><a name="[c7fdb8]"></a>_drcmple</STRONG> (Thumb, 130 bytes, Stack size 0 bytes, drleqf.o(x$fpl$drleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15956d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_InfNaN
</UL>

<P><STRONG><a name="[159552c]"></a>_dsqrt</STRONG> (Thumb, 316 bytes, Stack size 16 bytes, dsqrt.o(x$fpl$dsqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _dsqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[15957fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>
<BR>[Called By]<UL><LI><a href="#[c7ea80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[15954f0]"></a>__fpl_inf_dsqrt</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dsqrt.o(x$fpl$dsqrt), UNUSED)

<P><STRONG><a name="[c7fcc8]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, f2d.o(x$fpl$f2d))
<BR><BR>[Called By]<UL><LI><a href="#[c88530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_Adjust
</UL>

<P><STRONG><a name="[c7fc8c]"></a>_f2d</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1595310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcheck_NaN1
</UL>

<P><STRONG><a name="[c7fc50]"></a>__fpl_inf_f2d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, f2d.o(x$fpl$f2d), UNUSED)

<P><STRONG><a name="[c7f980]"></a>__aeabi_fadd</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, faddsub_clz.o(x$fpl$fadd))
<BR><BR>[Called By]<UL><LI><a href="#[c88878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Convert_Pos
</UL>

<P><STRONG><a name="[c7f944]"></a>_fadd</STRONG> (Thumb, 248 bytes, Stack size 0 bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7f9bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
<LI><a href="#[1595400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcheck_NaN2
</UL>

<P><STRONG><a name="[c7f908]"></a>__fpl_inf_fadd</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)

<P><STRONG><a name="[1595400]"></a>__fpl_fcheck_NaN2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fcheck.o(x$fpl$fcheck), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1594398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[c7ec60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[c7f548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[c7f818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
<LI><a href="#[c7f944]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>

<P><STRONG><a name="[1595310]"></a>__fpl_fcheck_NaN1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fcheck1.o(x$fpl$fcheck1), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1594398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[c7f098]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffixu
<LI><a href="#[c7f2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffix
<LI><a href="#[c7fc8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[c7f584]"></a>__aeabi_fdiv</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, fdiv.o(x$fpl$fdiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[c81d20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Adjdata
<LI><a href="#[c88440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[c88530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_Adjust
</UL>

<P><STRONG><a name="[c7f548]"></a>_fdiv</STRONG> (Thumb, 476 bytes, Stack size 4 bytes, fdiv.o(x$fpl$fdiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1595400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcheck_NaN2
</UL>

<P><STRONG><a name="[c7f50c]"></a>__fpl_inf_fdiv</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fdiv.o(x$fpl$fdiv), UNUSED)

<P><STRONG><a name="[c7f32c]"></a>__aeabi_f2iz</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ffix.o(x$fpl$ffix))
<BR><BR>[Called By]<UL><LI><a href="#[c88530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_Adjust
<LI><a href="#[c885a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Adjdata
</UL>

<P><STRONG><a name="[c7f2f0]"></a>_ffix</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, ffix.o(x$fpl$ffix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1595310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcheck_NaN1
</UL>

<P><STRONG><a name="[c7f2b4]"></a>__fpl_inf_ffix</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, ffix.o(x$fpl$ffix), UNUSED)

<P><STRONG><a name="[c7f0d4]"></a>__aeabi_f2uiz</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ffixu.o(x$fpl$ffixu))
<BR><BR>[Called By]<UL><LI><a href="#[c88440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[c88878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Convert_Pos
</UL>

<P><STRONG><a name="[c7f098]"></a>_ffixu</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, ffixu.o(x$fpl$ffixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1595310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcheck_NaN1
</UL>

<P><STRONG><a name="[c7f05c]"></a>__fpl_inf_ffixu</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, ffixu.o(x$fpl$ffixu), UNUSED)

<P><STRONG><a name="[c7ee7c]"></a>__aeabi_i2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$fflt))
<BR><BR>[Called By]<UL><LI><a href="#[c81d20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Adjdata
<LI><a href="#[c88530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_Adjust
<LI><a href="#[c88878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Convert_Pos
</UL>

<P><STRONG><a name="[c7ee40]"></a>_fflt</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$fflt), UNUSED)

<P><STRONG><a name="[c7ee04]"></a>__fflt_normalise</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fflt_clz.o(x$fpl$fflt), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c7ed8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffltu
</UL>

<P><STRONG><a name="[c7edc8]"></a>__aeabi_ui2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu))
<BR><BR>[Called By]<UL><LI><a href="#[c88440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[c88530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_Adjust
<LI><a href="#[c88878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Convert_Pos
</UL>

<P><STRONG><a name="[c7ed8c]"></a>_ffltu</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7ee04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fflt_normalise
</UL>

<P><STRONG><a name="[c7ec9c]"></a>__aeabi_fmul</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fmul.o(x$fpl$fmul))
<BR><BR>[Called By]<UL><LI><a href="#[c88440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[c88530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_Adjust
<LI><a href="#[c885a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Adjdata
<LI><a href="#[c88878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Convert_Pos
</UL>

<P><STRONG><a name="[c7ec60]"></a>_fmul</STRONG> (Thumb, 258 bytes, Stack size 0 bytes, fmul.o(x$fpl$fmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1595400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcheck_NaN2
</UL>

<P><STRONG><a name="[c7ec24]"></a>__fpl_inf_fmul</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fmul.o(x$fpl$fmul), UNUSED)

<P><STRONG><a name="[1595220]"></a>__fpl_normalise2</STRONG> (Thumb, 74 bytes, Stack size 4 bytes, fnorm2_clz.o(x$fpl$fnorm2), UNUSED)

<P><STRONG><a name="[c7f8cc]"></a>__aeabi_frsub</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, faddsub_clz.o(x$fpl$frsb))
<BR><BR>[Called By]<UL><LI><a href="#[c88440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[c88530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_Adjust
</UL>

<P><STRONG><a name="[c7f890]"></a>_frsb</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, faddsub_clz.o(x$fpl$frsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7f9bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
<LI><a href="#[c7f9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
</UL>

<P><STRONG><a name="[c7f854]"></a>__aeabi_fsub</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)

<P><STRONG><a name="[c7f818]"></a>_fsub</STRONG> (Thumb, 282 bytes, Stack size 0 bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7f9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
<LI><a href="#[1595400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcheck_NaN2
</UL>

<P><STRONG><a name="[c7f7dc]"></a>__fpl_inf_fsub</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)

<P><STRONG><a name="[1595130]"></a>__funder</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, funder.o(x$fpl$funder), UNUSED)

<P><STRONG><a name="[15950f4]"></a>__funder_d</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, funder.o(x$fpl$funder), UNUSED)

<P><STRONG><a name="[1594398]"></a>__fpl_return_NaN</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, retnan.o(x$fpl$retnan))
<BR><BR>[Calls]<UL><LI><a href="#[15942a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[1594488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN2
<LI><a href="#[1595310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcheck_NaN1
<LI><a href="#[1595400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcheck_NaN2
<LI><a href="#[15957fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>

<P><STRONG><a name="[15942a8]"></a>__fpl_cmpreturn</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, trapv.o(x$fpl$trapveneer))
<BR><BR>[Called By]<UL><LI><a href="#[1594398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
<LI><a href="#[15956d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_InfNaN
</UL>

<P><STRONG><a name="[1595040]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, usenofp.o(x$fpl$usenofp), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[c7f9f8]"></a>_fadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c7f818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
<LI><a href="#[c7f890]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frsb
</UL>

<P><STRONG><a name="[c7f9bc]"></a>_fsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c7f890]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frsb
<LI><a href="#[c7f944]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>

<P><STRONG><a name="[c7e300]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
