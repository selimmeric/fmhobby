<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\out\WebServer.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\out\WebServer.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, RVCT3.1 [Build 914]: Last Updated: Thu Apr 24 14:55:29 2008
<BR><P>
<H3>Maximum Stack Usage =        136 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; make_udp_reply_from_request &rArr; enc28j60PacketSend &rArr; enc28j60Write &rArr; enc28j60SetBank
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[ca3370]">Reset_Handler</a>
 <LI><a href="#[ca3298]">__user_initial_stackheap</a>
 <LI><a href="#[ca3760]">Undef_Handler</a>
 <LI><a href="#[ca3718]">SWI_Handler</a>
 <LI><a href="#[ca36d0]">PAbt_Handler</a>
 <LI><a href="#[ca3688]">DAbt_Handler</a>
 <LI><a href="#[ca3640]">IRQ_Handler</a>
 <LI><a href="#[ca35f8]">FIQ_Handler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[ca3760]">Undef_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[ca3760]">Undef_Handler</a><BR>
 <LI><a href="#[ca3718]">SWI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[ca3718]">SWI_Handler</a><BR>
 <LI><a href="#[ca36d0]">PAbt_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[ca36d0]">PAbt_Handler</a><BR>
 <LI><a href="#[ca3688]">DAbt_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[ca3688]">DAbt_Handler</a><BR>
 <LI><a href="#[ca3640]">IRQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[ca3640]">IRQ_Handler</a><BR>
 <LI><a href="#[ca35f8]">FIQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[ca35f8]">FIQ_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[ca3370]">Reset_Handler</a>
 <LI><a href="#[ca3760]">Undef_Handler</a>
 <LI><a href="#[ca3718]">SWI_Handler</a>
 <LI><a href="#[ca36d0]">PAbt_Handler</a>
 <LI><a href="#[ca3688]">DAbt_Handler</a>
 <LI><a href="#[ca3640]">IRQ_Handler</a>
 <LI><a href="#[ca35f8]">FIQ_Handler</a>
 <LI><a href="#[c9e1a0]">__main</a>
 <LI><a href="#[c9aac8]">__ARM_get_argv</a>
 <LI><a href="#[ca1f70]">main</a>
 <LI><a href="#[c9b778]">__I_use_semihosting</a>
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[ca3370]"></a>Reset_Handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[c9e1a0]"></a>__main</STRONG> (ARM, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = __main &rArr; __rt_entry &rArr; __rt_lib_init &rArr; _fp_init
</UL>
<BR>[Calls]<UL><LI><a href="#[c980b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[c9dee0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[c980b0]"></a>__scatterload</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[c9e1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[c98068]"></a>__scatterload_rt2</STRONG> (ARM, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c9dee0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[c98020]"></a>__scatterload_null</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[c97de0]"></a>__scatterload_copy</STRONG> (ARM, 40 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c97de0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[c97de0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[c97c78]"></a>__scatterload_zeroinit</STRONG> (ARM, 44 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[c9c6c8]"></a>__ARM_argv_veneer</STRONG> (ARM, 16 bytes, Stack size 0 bytes, lib_init.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[c9c638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (via Veneer)
</UL>

<P><STRONG><a name="[ca3298]"></a>__user_initial_stackheap</STRONG> (ARM, 0 bytes, Stack size unknown bytes, startup.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c9d8b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[ca2090]"></a>verify_password</STRONG> (ARM, 52 bytes, Stack size 8 bytes, webserver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = verify_password &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[c9e7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[ca1f70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ca2048]"></a>analyse_get_url</STRONG> (ARM, 168 bytes, Stack size 0 bytes, webserver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ca1f70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ca2000]"></a>moved_perm</STRONG> (ARM, 120 bytes, Stack size 16 bytes, webserver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = moved_perm
</UL>
<BR>[Calls]<UL><LI><a href="#[ca1ce8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_tcp_data_p
<LI><a href="#[ca1d30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_tcp_data
</UL>
<BR>[Called By]<UL><LI><a href="#[ca1f70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ca1fb8]"></a>print_webpage</STRONG> (ARM, 500 bytes, Stack size 16 bytes, webserver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = print_webpage
</UL>
<BR>[Calls]<UL><LI><a href="#[ca1ce8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_tcp_data_p
</UL>
<BR>[Called By]<UL><LI><a href="#[ca1f70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ca1f70]"></a>main</STRONG> (ARM, 1480 bytes, Stack size 72 bytes, webserver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = main &rArr; make_udp_reply_from_request &rArr; enc28j60PacketSend &rArr; enc28j60Write &rArr; enc28j60SetBank
</UL>
<BR>[Calls]<UL><LI><a href="#[c9e628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen (via Veneer)
<LI><a href="#[c9e7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp (via Veneer)
<LI><a href="#[c9e9a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy (via Veneer)
<LI><a href="#[ca1a60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_udp_reply_from_request
<LI><a href="#[ca1aa8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_tcp_synack_from_syn
<LI><a href="#[ca1af0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_tcp_ack_with_data
<LI><a href="#[ca1b38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_tcp_ack_from_any
<LI><a href="#[ca1b80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_echo_reply_from_request
<LI><a href="#[ca1bc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_arp_answer_from_request
<LI><a href="#[ca1c10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_len_info
<LI><a href="#[ca1c58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ip_arp_udp_tcp
<LI><a href="#[ca1ca0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tcp_data_pointer
<LI><a href="#[ca1ce8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_tcp_data_p
<LI><a href="#[ca1d78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_type_is_ip_and_my_ip
<LI><a href="#[ca1dc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_type_is_arp_and_my_ip
<LI><a href="#[ca1e08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60clkout
<LI><a href="#[ca1e50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60PhyWrite
<LI><a href="#[ca1e98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60PacketReceive
<LI><a href="#[ca1ee0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60Init
<LI><a href="#[ca1f28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[ca1fb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_webpage
<LI><a href="#[ca2000]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moved_perm
<LI><a href="#[ca2048]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analyse_get_url
<LI><a href="#[ca2090]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_password
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kernel.o(.text)
</UL>
<P><STRONG><a name="[ca0cb8]"></a>_delay_us</STRONG> (ARM, 40 bytes, Stack size 0 bytes, enc28j60.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ca0a78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60PhyReadH
<LI><a href="#[ca1e50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60PhyWrite
</UL>

<P><STRONG><a name="[ca1f28]"></a>delay_ms</STRONG> (ARM, 40 bytes, Stack size 0 bytes, enc28j60.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ca1ee0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60Init
<LI><a href="#[ca1f70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ca0c70]"></a>enc28j60ReadOp</STRONG> (ARM, 152 bytes, Stack size 0 bytes, enc28j60.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ca0b08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60Read
<LI><a href="#[ca1e98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60PacketReceive
</UL>

<P><STRONG><a name="[ca0c28]"></a>enc28j60WriteOp</STRONG> (ARM, 92 bytes, Stack size 0 bytes, enc28j60.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ca09a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60PacketSend
<LI><a href="#[ca0ac0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60Write
<LI><a href="#[ca0b50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60SetBank
<LI><a href="#[ca1e98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60PacketReceive
<LI><a href="#[ca1ee0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60Init
</UL>

<P><STRONG><a name="[ca0be0]"></a>enc28j60ReadBuffer</STRONG> (ARM, 140 bytes, Stack size 0 bytes, enc28j60.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ca1e98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60PacketReceive
</UL>

<P><STRONG><a name="[ca0b98]"></a>enc28j60WriteBuffer</STRONG> (ARM, 120 bytes, Stack size 0 bytes, enc28j60.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ca09a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60PacketSend
</UL>

<P><STRONG><a name="[ca0b50]"></a>enc28j60SetBank</STRONG> (ARM, 84 bytes, Stack size 8 bytes, enc28j60.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = enc28j60SetBank
</UL>
<BR>[Calls]<UL><LI><a href="#[ca0c28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60WriteOp
</UL>
<BR>[Called By]<UL><LI><a href="#[ca0ac0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60Write
<LI><a href="#[ca0b08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60Read
<LI><a href="#[ca1ee0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60Init
</UL>

<P><STRONG><a name="[ca0b08]"></a>enc28j60Read</STRONG> (ARM, 36 bytes, Stack size 8 bytes, enc28j60.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = enc28j60Read &rArr; enc28j60SetBank
</UL>
<BR>[Calls]<UL><LI><a href="#[ca0b50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60SetBank
<LI><a href="#[ca0c70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60ReadOp
</UL>
<BR>[Called By]<UL><LI><a href="#[ca09a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60PacketSend
<LI><a href="#[ca0a30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60getrev
<LI><a href="#[ca0a78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60PhyReadH
<LI><a href="#[ca1e50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60PhyWrite
<LI><a href="#[ca1e98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60PacketReceive
</UL>

<P><STRONG><a name="[ca0ac0]"></a>enc28j60Write</STRONG> (ARM, 44 bytes, Stack size 12 bytes, enc28j60.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = enc28j60Write &rArr; enc28j60SetBank
</UL>
<BR>[Calls]<UL><LI><a href="#[ca0b50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60SetBank
<LI><a href="#[ca0c28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60WriteOp
</UL>
<BR>[Called By]<UL><LI><a href="#[ca09a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60PacketSend
<LI><a href="#[ca0a78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60PhyReadH
<LI><a href="#[ca1e08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60clkout
<LI><a href="#[ca1e50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60PhyWrite
<LI><a href="#[ca1e98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60PacketReceive
<LI><a href="#[ca1ee0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60Init
</UL>

<P><STRONG><a name="[ca0a78]"></a>enc28j60PhyReadH</STRONG> (ARM, 88 bytes, Stack size 8 bytes, enc28j60.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ca0ac0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60Write
<LI><a href="#[ca0b08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60Read
<LI><a href="#[ca0cb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[ca09e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60linkup
</UL>

<P><STRONG><a name="[ca1e50]"></a>enc28j60PhyWrite</STRONG> (ARM, 84 bytes, Stack size 12 bytes, enc28j60.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = enc28j60PhyWrite &rArr; enc28j60Write &rArr; enc28j60SetBank
</UL>
<BR>[Calls]<UL><LI><a href="#[ca0ac0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60Write
<LI><a href="#[ca0b08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60Read
<LI><a href="#[ca0cb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[ca1ee0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60Init
<LI><a href="#[ca1f70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ca1e08]"></a>enc28j60clkout</STRONG> (ARM, 28 bytes, Stack size 8 bytes, enc28j60.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = enc28j60clkout &rArr; enc28j60Write &rArr; enc28j60SetBank
</UL>
<BR>[Calls]<UL><LI><a href="#[ca0ac0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60Write
</UL>
<BR>[Called By]<UL><LI><a href="#[ca1f70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ca1ee0]"></a>enc28j60Init</STRONG> (ARM, 576 bytes, Stack size 8 bytes, enc28j60.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = enc28j60Init &rArr; enc28j60PhyWrite &rArr; enc28j60Write &rArr; enc28j60SetBank
</UL>
<BR>[Calls]<UL><LI><a href="#[ca0ac0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60Write
<LI><a href="#[ca0b50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60SetBank
<LI><a href="#[ca0c28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60WriteOp
<LI><a href="#[ca1e50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60PhyWrite
<LI><a href="#[ca1f28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[ca1f70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ca0a30]"></a>enc28j60getrev</STRONG> (ARM, 20 bytes, Stack size 4 bytes, enc28j60.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ca0b08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60Read
</UL>

<P><STRONG><a name="[ca09e8]"></a>enc28j60linkup</STRONG> (ARM, 44 bytes, Stack size 4 bytes, enc28j60.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ca0a78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60PhyReadH
</UL>

<P><STRONG><a name="[ca09a0]"></a>enc28j60PacketSend</STRONG> (ARM, 160 bytes, Stack size 12 bytes, enc28j60.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = enc28j60PacketSend &rArr; enc28j60Write &rArr; enc28j60SetBank
</UL>
<BR>[Calls]<UL><LI><a href="#[ca0ac0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60Write
<LI><a href="#[ca0b08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60Read
<LI><a href="#[ca0b98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60WriteBuffer
<LI><a href="#[ca0c28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60WriteOp
</UL>
<BR>[Called By]<UL><LI><a href="#[ca1a60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_udp_reply_from_request
<LI><a href="#[ca1aa8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_tcp_synack_from_syn
<LI><a href="#[ca1af0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_tcp_ack_with_data
<LI><a href="#[ca1b38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_tcp_ack_from_any
<LI><a href="#[ca1b80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_echo_reply_from_request
<LI><a href="#[ca1bc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_arp_answer_from_request
</UL>

<P><STRONG><a name="[ca1e98]"></a>enc28j60PacketReceive</STRONG> (ARM, 324 bytes, Stack size 20 bytes, enc28j60.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = enc28j60PacketReceive &rArr; enc28j60Write &rArr; enc28j60SetBank
</UL>
<BR>[Calls]<UL><LI><a href="#[ca0ac0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60Write
<LI><a href="#[ca0b08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60Read
<LI><a href="#[ca0be0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60ReadBuffer
<LI><a href="#[ca0c28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60WriteOp
<LI><a href="#[ca0c70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60ReadOp
</UL>
<BR>[Called By]<UL><LI><a href="#[ca1f70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c9fd38]"></a>checksum</STRONG> (ARM, 160 bytes, Stack size 4 bytes, ip_arp_udp_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = checksum
</UL>
<BR>[Called By]<UL><LI><a href="#[c9fca8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_ip_hdr_checksum
<LI><a href="#[ca1a60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_udp_reply_from_request
<LI><a href="#[ca1aa8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_tcp_synack_from_syn
<LI><a href="#[ca1af0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_tcp_ack_with_data
<LI><a href="#[ca1b38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_tcp_ack_from_any
</UL>

<P><STRONG><a name="[ca1c58]"></a>init_ip_arp_udp_tcp</STRONG> (ARM, 92 bytes, Stack size 4 bytes, ip_arp_udp_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = init_ip_arp_udp_tcp
</UL>
<BR>[Called By]<UL><LI><a href="#[ca1f70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ca1dc0]"></a>eth_type_is_arp_and_my_ip</STRONG> (ARM, 116 bytes, Stack size 0 bytes, ip_arp_udp_tcp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ca1f70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ca1d78]"></a>eth_type_is_ip_and_my_ip</STRONG> (ARM, 136 bytes, Stack size 0 bytes, ip_arp_udp_tcp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ca1f70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c9fcf0]"></a>make_eth</STRONG> (ARM, 60 bytes, Stack size 0 bytes, ip_arp_udp_tcp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ca1a60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_udp_reply_from_request
<LI><a href="#[ca1aa8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_tcp_synack_from_syn
<LI><a href="#[ca1b38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_tcp_ack_from_any
<LI><a href="#[ca1b80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_echo_reply_from_request
<LI><a href="#[ca1bc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_arp_answer_from_request
</UL>

<P><STRONG><a name="[c9fca8]"></a>fill_ip_hdr_checksum</STRONG> (ARM, 84 bytes, Stack size 12 bytes, ip_arp_udp_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fill_ip_hdr_checksum &rArr; checksum
</UL>
<BR>[Calls]<UL><LI><a href="#[c9fd38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checksum
</UL>
<BR>[Called By]<UL><LI><a href="#[c9fc60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_ip
<LI><a href="#[ca1af0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_tcp_ack_with_data
</UL>

<P><STRONG><a name="[c9fc60]"></a>make_ip</STRONG> (ARM, 80 bytes, Stack size 12 bytes, ip_arp_udp_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = make_ip &rArr; fill_ip_hdr_checksum &rArr; checksum
</UL>
<BR>[Calls]<UL><LI><a href="#[c9fca8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_ip_hdr_checksum
</UL>
<BR>[Called By]<UL><LI><a href="#[ca1a60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_udp_reply_from_request
<LI><a href="#[ca1aa8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_tcp_synack_from_syn
<LI><a href="#[ca1b38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_tcp_ack_from_any
<LI><a href="#[ca1b80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_echo_reply_from_request
</UL>

<P><STRONG><a name="[c9fc18]"></a>make_tcphead</STRONG> (ARM, 304 bytes, Stack size 12 bytes, ip_arp_udp_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = make_tcphead
</UL>
<BR>[Called By]<UL><LI><a href="#[ca1aa8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_tcp_synack_from_syn
<LI><a href="#[ca1b38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_tcp_ack_from_any
</UL>

<P><STRONG><a name="[ca1bc8]"></a>make_arp_answer_from_request</STRONG> (ARM, 164 bytes, Stack size 16 bytes, ip_arp_udp_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = make_arp_answer_from_request &rArr; enc28j60PacketSend &rArr; enc28j60Write &rArr; enc28j60SetBank
</UL>
<BR>[Calls]<UL><LI><a href="#[c9fcf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_eth
<LI><a href="#[ca09a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60PacketSend
</UL>
<BR>[Called By]<UL><LI><a href="#[ca1f70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ca1b80]"></a>make_echo_reply_from_request</STRONG> (ARM, 92 bytes, Stack size 16 bytes, ip_arp_udp_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = make_echo_reply_from_request &rArr; enc28j60PacketSend &rArr; enc28j60Write &rArr; enc28j60SetBank
</UL>
<BR>[Calls]<UL><LI><a href="#[c9fc60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_ip
<LI><a href="#[c9fcf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_eth
<LI><a href="#[ca09a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60PacketSend
</UL>
<BR>[Called By]<UL><LI><a href="#[ca1f70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ca1a60]"></a>make_udp_reply_from_request</STRONG> (ARM, 192 bytes, Stack size 32 bytes, ip_arp_udp_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = make_udp_reply_from_request &rArr; enc28j60PacketSend &rArr; enc28j60Write &rArr; enc28j60SetBank
</UL>
<BR>[Calls]<UL><LI><a href="#[c9fc60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_ip
<LI><a href="#[c9fcf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_eth
<LI><a href="#[c9fd38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checksum
<LI><a href="#[ca09a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60PacketSend
</UL>
<BR>[Called By]<UL><LI><a href="#[ca1f70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ca1aa8]"></a>make_tcp_synack_from_syn</STRONG> (ARM, 120 bytes, Stack size 16 bytes, ip_arp_udp_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = make_tcp_synack_from_syn &rArr; enc28j60PacketSend &rArr; enc28j60Write &rArr; enc28j60SetBank
</UL>
<BR>[Calls]<UL><LI><a href="#[c9fc18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_tcphead
<LI><a href="#[c9fc60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_ip
<LI><a href="#[c9fcf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_eth
<LI><a href="#[c9fd38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checksum
<LI><a href="#[ca09a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60PacketSend
</UL>
<BR>[Called By]<UL><LI><a href="#[ca1f70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ca1ca0]"></a>get_tcp_data_pointer</STRONG> (ARM, 48 bytes, Stack size 0 bytes, ip_arp_udp_tcp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ca1f70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ca1c10]"></a>init_len_info</STRONG> (ARM, 136 bytes, Stack size 0 bytes, ip_arp_udp_tcp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ca1f70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ca1ce8]"></a>fill_tcp_data_p</STRONG> (ARM, 44 bytes, Stack size 0 bytes, ip_arp_udp_tcp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ca1f70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[ca1fb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_webpage
<LI><a href="#[ca2000]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moved_perm
</UL>

<P><STRONG><a name="[ca1d30]"></a>fill_tcp_data</STRONG> (ARM, 52 bytes, Stack size 0 bytes, ip_arp_udp_tcp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ca2000]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moved_perm
</UL>

<P><STRONG><a name="[ca1b38]"></a>make_tcp_ack_from_any</STRONG> (ARM, 172 bytes, Stack size 16 bytes, ip_arp_udp_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = make_tcp_ack_from_any &rArr; enc28j60PacketSend &rArr; enc28j60Write &rArr; enc28j60SetBank
</UL>
<BR>[Calls]<UL><LI><a href="#[c9fc18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_tcphead
<LI><a href="#[c9fc60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_ip
<LI><a href="#[c9fcf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_eth
<LI><a href="#[c9fd38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checksum
<LI><a href="#[ca09a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60PacketSend
</UL>
<BR>[Called By]<UL><LI><a href="#[ca1f70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ca1af0]"></a>make_tcp_ack_with_data</STRONG> (ARM, 120 bytes, Stack size 16 bytes, ip_arp_udp_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = make_tcp_ack_with_data &rArr; enc28j60PacketSend &rArr; enc28j60Write &rArr; enc28j60SetBank
</UL>
<BR>[Calls]<UL><LI><a href="#[c9fca8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_ip_hdr_checksum
<LI><a href="#[c9fd38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checksum
<LI><a href="#[ca09a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60PacketSend
</UL>
<BR>[Called By]<UL><LI><a href="#[ca1f70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c9e9a8]"></a>strcpy</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, strcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ca1f70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main (via Veneer)
</UL>

<P><STRONG><a name="[c9e7e8]"></a>strncmp</STRONG> (Thumb, 76 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[ca1f70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main (via Veneer)
<LI><a href="#[ca2090]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_password (via Veneer)
</UL>

<P><STRONG><a name="[c9e628]"></a>strlen</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[ca1f70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main (via Veneer)
</UL>

<P><STRONG><a name="[c9e470]"></a>__use_two_region_memory</STRONG> (ARM, 4 bytes, Stack size 0 bytes, stkheap2.o(.text), UNUSED)

<P><STRONG><a name="[c9e428]"></a>__rt_stackheap_init</STRONG> (ARM, 36 bytes, Stack size 16 bytes, stkheap2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = __rt_stackheap_init &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[c9d448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_stackheap_storage
<LI><a href="#[c9d8b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>
<BR>[Called By]<UL><LI><a href="#[c9dee0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[c9e3e0]"></a>__rt_heap_extend</STRONG> (ARM, 24 bytes, Stack size 8 bytes, stkheap2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c9e308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_heap_extend (Weak Reference)
</UL>

<P><STRONG><a name="[c9dee0]"></a>__rt_entry</STRONG> (ARM, 76 bytes, Stack size 16 bytes, kernel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = __rt_entry &rArr; __rt_lib_init &rArr; _fp_init
</UL>
<BR>[Calls]<UL><LI><a href="#[c9bab0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_post_lib_init
<LI><a href="#[c9bc20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_post_stackheap_init
<LI><a href="#[c9c638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (via Veneer)
<LI><a href="#[c9cab8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit (via BX)
<LI><a href="#[c9e428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_stackheap_init
</UL>
<BR>[Called By]<UL><LI><a href="#[c98068]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[c9e1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[c9de98]"></a>__rt_exit</STRONG> (ARM, 20 bytes, Stack size 8 bytes, kernel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __rt_exit &rArr; __rt_lib_shutdown
</UL>
<BR>[Calls]<UL><LI><a href="#[c9c5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[c9cab8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit (via Veneer)
</UL>

<P><STRONG><a name="[c9de50]"></a>__rt_abort</STRONG> (ARM, 8 bytes, Stack size 0 bytes, kernel.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c9cf48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[c9d8b8]"></a>__user_setup_stackheap</STRONG> (ARM, 96 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[c9cc70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
<LI><a href="#[ca3298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
</UL>
<BR>[Called By]<UL><LI><a href="#[c9e428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_stackheap_init
</UL>

<P><STRONG><a name="[c9d448]"></a>__rt_stackheap_storage</STRONG> (ARM, 12 bytes, Stack size 0 bytes, rt_stackheap_storage_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c9e428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_stackheap_init
</UL>

<P><STRONG><a name="[c9cf48]"></a>_sys_exit</STRONG> (ARM, 20 bytes, Stack size 0 bytes, sys_exit.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c9de50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_abort
</UL>

<P><STRONG><a name="[c9ccb8]"></a>__user_libspace</STRONG> (ARM, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[c9cc70]"></a>__user_perproc_libspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c9d8b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[c9cc28]"></a>__user_perthread_libspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[c9cab8]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = exit &rArr; __rt_exit &rArr; __rt_lib_shutdown
</UL>
<BR>[Calls]<UL><LI><a href="#[c9ca28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
<LI><a href="#[c9de98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[c9dee0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[c9c638]"></a>__rt_lib_init</STRONG> (Thumb, 184 bytes, Stack size 40 bytes, lib_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __rt_lib_init &rArr; _fp_init
</UL>
<BR>[Calls]<UL><LI><a href="#[c9a8f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init (via Veneer)
<LI><a href="#[c9b3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale (via Veneer)
<LI><a href="#[c9c008]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_signal_init (Weak Reference)
<LI><a href="#[c9c050]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rand_init (Weak Reference)
<LI><a href="#[c9c098]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio (Weak Reference)
<LI><a href="#[c9c0e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_user_alloc (Weak Reference)
<LI><a href="#[c9c128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc (Weak Reference)
<LI><a href="#[c9c170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_getenv_init (Weak Reference)
<LI><a href="#[c9c1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_time (Weak Reference)
<LI><a href="#[c9c200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric (Weak Reference)
<LI><a href="#[c9c248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_monetary (Weak Reference)
<LI><a href="#[c9c290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype (Weak Reference)
<LI><a href="#[c9c2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_collate (Weak Reference)
<LI><a href="#[c9c320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_trap_init (Weak Reference)
<LI><a href="#[c9c368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_clock_init (Weak Reference)
<LI><a href="#[c9c3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_atexit_init (Weak Reference)
<LI><a href="#[c9c440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_ (Weak Reference)
<LI><a href="#[c9c488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__alloca_initialize (Weak Reference)
<LI><a href="#[c9c4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_DescSize (Weak Reference)
<LI><a href="#[c9c518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_exceptions_init (Weak Reference)
<LI><a href="#[c9c6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_argv_veneer (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[c9dee0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry (via Veneer)
</UL>

<P><STRONG><a name="[c9c5f0]"></a>__rt_lib_shutdown</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lib_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_lib_shutdown
</UL>
<BR>[Calls]<UL><LI><a href="#[c9bf78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio (Weak Reference)
<LI><a href="#[c9bfc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminate_user_alloc (Weak Reference)
<LI><a href="#[c9c3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[c9de98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit (via Veneer)
</UL>

<P><STRONG><a name="[c9bc20]"></a>_platform_post_stackheap_init</STRONG> (ARM, 12 bytes, Stack size 0 bytes, boardinit2.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c9dee0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[c9bab0]"></a>_platform_post_lib_init</STRONG> (ARM, 16 bytes, Stack size 8 bytes, boardinit3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _platform_post_lib_init
</UL>
<BR>[Called By]<UL><LI><a href="#[c9dee0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[c9b778]"></a>__I_use_semihosting</STRONG> (ARM, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> sys_exit.o(.text)
</UL>
<P><STRONG><a name="[c9b730]"></a>__use_no_semihosting_swi</STRONG> (ARM, 4 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[c9b3c0]"></a>__rt_locale</STRONG> (ARM, 12 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c9c638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (via Veneer)
</UL>

<P><STRONG><a name="[c9aac8]"></a>__ARM_get_argv</STRONG> (Thumb, 6 bytes, Stack size 4 bytes, no_argv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __ARM_get_argv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lib_init.o(.emb_text)
</UL>
<P><STRONG><a name="[c9a370]"></a>__rt_fp_status_addr</STRONG> (ARM, 12 bytes, Stack size 0 bytes, rt_fp_status_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c9a8f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[c9a8f0]"></a>_fp_init</STRONG> (ARM, 24 bytes, Stack size 8 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _fp_init
</UL>
<BR>[Calls]<UL><LI><a href="#[c9a370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_fp_status_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[c9c638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (via Veneer)
</UL>

<P><STRONG><a name="[c9a8a8]"></a>__fplib_config_pureend_doubles</STRONG> (ARM, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[ca3760]"></a>Undef_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[ca3760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Undef_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[ca3760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Undef_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[ca3718]"></a>SWI_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[ca3718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[ca3718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[ca36d0]"></a>PAbt_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[ca36d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAbt_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[ca36d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAbt_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[ca3688]"></a>DAbt_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[ca3688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAbt_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[ca3688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAbt_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[ca3640]"></a>IRQ_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[ca3640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[ca3640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[ca35f8]"></a>FIQ_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[ca35f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[ca35f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL><P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[c9c518]"></a>__ARM_exceptions_init</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[c9c638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (Weak Reference)
</UL>

<P><STRONG><a name="[c9c4d0]"></a>__Heap_DescSize</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[c9c638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (Weak Reference)
</UL>

<P><STRONG><a name="[c9c488]"></a>__alloca_initialize</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[c9c638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (Weak Reference)
</UL>

<P><STRONG><a name="[c9c440]"></a>__cpp_initialize__aeabi_</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[c9c638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (Weak Reference)
</UL>

<P><STRONG><a name="[c9c3f8]"></a>__cxa_finalize</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[c9c5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown (Weak Reference)
</UL>

<P><STRONG><a name="[c9e308]"></a>__user_heap_extend</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED, UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c9e3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_extend (Weak Reference)
</UL>

<P><STRONG><a name="[c9c3b0]"></a>_atexit_init</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[c9c638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (Weak Reference)
</UL>

<P><STRONG><a name="[c9ca28]"></a>_call_atexit_fns</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[c9cab8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit (Weak Reference)
</UL>

<P><STRONG><a name="[c9c368]"></a>_clock_init</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[c9c638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (Weak Reference)
</UL>

<P><STRONG><a name="[c9c320]"></a>_fp_trap_init</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[c9c638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (Weak Reference)
</UL>

<P><STRONG><a name="[c9c2d8]"></a>_get_lc_collate</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[c9c638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (Weak Reference)
</UL>

<P><STRONG><a name="[c9c290]"></a>_get_lc_ctype</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[c9c638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (Weak Reference)
</UL>

<P><STRONG><a name="[c9c248]"></a>_get_lc_monetary</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[c9c638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (Weak Reference)
</UL>

<P><STRONG><a name="[c9c200]"></a>_get_lc_numeric</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[c9c638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (Weak Reference)
</UL>

<P><STRONG><a name="[c9c1b8]"></a>_get_lc_time</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[c9c638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (Weak Reference)
</UL>

<P><STRONG><a name="[c9c170]"></a>_getenv_init</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[c9c638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (Weak Reference)
</UL>

<P><STRONG><a name="[c9c128]"></a>_init_alloc</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[c9c638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (Weak Reference)
</UL>

<P><STRONG><a name="[c9c0e0]"></a>_init_user_alloc</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[c9c638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (Weak Reference)
</UL>

<P><STRONG><a name="[c9c098]"></a>_initio</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[c9c638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (Weak Reference)
</UL>

<P><STRONG><a name="[c9c050]"></a>_rand_init</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[c9c638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (Weak Reference)
</UL>

<P><STRONG><a name="[c9c008]"></a>_signal_init</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[c9c638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (Weak Reference)
</UL>

<P><STRONG><a name="[c9bfc0]"></a>_terminate_user_alloc</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[c9c5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown (Weak Reference)
</UL>

<P><STRONG><a name="[c9bf78]"></a>_terminateio</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[c9c5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown (Weak Reference)
</UL>
<HR></body></html>
