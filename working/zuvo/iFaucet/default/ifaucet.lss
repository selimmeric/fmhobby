
ifaucet.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000868  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000018c  00800060  00000868  000008fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000273  008001ec  008001ec  00000a88  2**0
                  ALLOC
  3 .debug_aranges 00000060  00000000  00000000  00000a88  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000048e  00000000  00000000  00000ae8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000bd5  00000000  00000000  00000f76  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000037b  00000000  00000000  00001b4b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000a9d  00000000  00000000  00001ec6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001e0  00000000  00000000  00002964  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000043d  00000000  00000000  00002b44  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000004d0  00000000  00000000  00002f81  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00003451  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	1a c0       	rjmp	.+52     	; 0x36 <__ctors_end>
   2:	34 c0       	rjmp	.+104    	; 0x6c <__bad_interrupt>
   4:	33 c0       	rjmp	.+102    	; 0x6c <__bad_interrupt>
   6:	32 c0       	rjmp	.+100    	; 0x6c <__bad_interrupt>
   8:	31 c0       	rjmp	.+98     	; 0x6c <__bad_interrupt>
   a:	30 c0       	rjmp	.+96     	; 0x6c <__bad_interrupt>
   c:	2f c0       	rjmp	.+94     	; 0x6c <__bad_interrupt>
   e:	2e c0       	rjmp	.+92     	; 0x6c <__bad_interrupt>
  10:	2d c0       	rjmp	.+90     	; 0x6c <__bad_interrupt>
  12:	29 c2       	rjmp	.+1106   	; 0x466 <__vector_9>
  14:	2b c0       	rjmp	.+86     	; 0x6c <__bad_interrupt>
  16:	5d c0       	rjmp	.+186    	; 0xd2 <__vector_11>
  18:	29 c0       	rjmp	.+82     	; 0x6c <__bad_interrupt>
  1a:	28 c0       	rjmp	.+80     	; 0x6c <__bad_interrupt>
  1c:	27 c0       	rjmp	.+78     	; 0x6c <__bad_interrupt>
  1e:	26 c0       	rjmp	.+76     	; 0x6c <__bad_interrupt>
  20:	25 c0       	rjmp	.+74     	; 0x6c <__bad_interrupt>
  22:	24 c0       	rjmp	.+72     	; 0x6c <__bad_interrupt>
  24:	23 c0       	rjmp	.+70     	; 0x6c <__bad_interrupt>
  26:	1d c1       	rjmp	.+570    	; 0x262 <led_task+0x70>
  28:	21 c1       	rjmp	.+578    	; 0x26c <led_task+0x7a>
  2a:	25 c1       	rjmp	.+586    	; 0x276 <led_task+0x84>
  2c:	2f c1       	rjmp	.+606    	; 0x28c <led_task+0x9a>
  2e:	59 c1       	rjmp	.+690    	; 0x2e2 <led_task+0xf0>
  30:	68 c1       	rjmp	.+720    	; 0x302 <led_task+0x110>
  32:	77 c1       	rjmp	.+750    	; 0x322 <led_task+0x130>
  34:	87 c1       	rjmp	.+782    	; 0x344 <led_task+0x152>

00000036 <__ctors_end>:
  36:	11 24       	eor	r1, r1
  38:	1f be       	out	0x3f, r1	; 63
  3a:	cf e5       	ldi	r28, 0x5F	; 95
  3c:	d4 e0       	ldi	r29, 0x04	; 4
  3e:	de bf       	out	0x3e, r29	; 62
  40:	cd bf       	out	0x3d, r28	; 61

00000042 <__do_copy_data>:
  42:	11 e0       	ldi	r17, 0x01	; 1
  44:	a0 e6       	ldi	r26, 0x60	; 96
  46:	b0 e0       	ldi	r27, 0x00	; 0
  48:	e8 e6       	ldi	r30, 0x68	; 104
  4a:	f8 e0       	ldi	r31, 0x08	; 8
  4c:	02 c0       	rjmp	.+4      	; 0x52 <.do_copy_data_start>

0000004e <.do_copy_data_loop>:
  4e:	05 90       	lpm	r0, Z+
  50:	0d 92       	st	X+, r0

00000052 <.do_copy_data_start>:
  52:	ac 3e       	cpi	r26, 0xEC	; 236
  54:	b1 07       	cpc	r27, r17
  56:	d9 f7       	brne	.-10     	; 0x4e <.do_copy_data_loop>

00000058 <__do_clear_bss>:
  58:	14 e0       	ldi	r17, 0x04	; 4
  5a:	ac ee       	ldi	r26, 0xEC	; 236
  5c:	b1 e0       	ldi	r27, 0x01	; 1
  5e:	01 c0       	rjmp	.+2      	; 0x62 <.do_clear_bss_start>

00000060 <.do_clear_bss_loop>:
  60:	1d 92       	st	X+, r1

00000062 <.do_clear_bss_start>:
  62:	af 35       	cpi	r26, 0x5F	; 95
  64:	b1 07       	cpc	r27, r17
  66:	e1 f7       	brne	.-8      	; 0x60 <.do_clear_bss_loop>
  68:	58 d3       	rcall	.+1712   	; 0x71a <main>
  6a:	fc c3       	rjmp	.+2040   	; 0x864 <_exit>

0000006c <__bad_interrupt>:
  6c:	c9 cf       	rjmp	.-110    	; 0x0 <__vectors>

0000006e <ISR_UART_RECV>:
{

	 //uart has received a character in UDR 	 
	 unsigned char data;
//	 static unsigned char pdata;
	 data = UDR;
  6e:	9c b1       	in	r25, 0x0c	; 12

//	 PORTC ^= (1<<LED1);

	 // Set CmdReady Flag 
	 if ((data=='\r') || (data=='\n')) 
  70:	9d 30       	cpi	r25, 0x0D	; 13
  72:	11 f0       	breq	.+4      	; 0x78 <ISR_UART_RECV+0xa>
  74:	9a 30       	cpi	r25, 0x0A	; 10
  76:	f9 f4       	brne	.+62     	; 0xb6 <ISR_UART_RECV+0x48>
	 {
//	 	mCmdQ[0] |= 0x80;	
	 	mCmdQFlag = 1;	
  78:	81 e0       	ldi	r24, 0x01	; 1
  7a:	80 93 ec 01 	sts	0x01EC, r24
		// Ignore empty message
	 	if (mCmdQ[0] == 0x00)
  7e:	80 91 08 02 	lds	r24, 0x0208
  82:	88 23       	and	r24, r24
  84:	19 f4       	brne	.+6      	; 0x8c <ISR_UART_RECV+0x1e>
		{
			mCmdQFlag = 0x00;
  86:	10 92 ec 01 	sts	0x01EC, r1
  8a:	0c c0       	rjmp	.+24     	; 0xa4 <ISR_UART_RECV+0x36>
		}
		else if ((mCmdQ[0] == 0x01) && (mCmdQ[1] == 0xff))	// Process message with ONE BYTE
  8c:	81 30       	cpi	r24, 0x01	; 1
  8e:	51 f4       	brne	.+20     	; 0xa4 <ISR_UART_RECV+0x36>
  90:	80 91 09 02 	lds	r24, 0x0209
  94:	8f 3f       	cpi	r24, 0xFF	; 255
  96:	31 f4       	brne	.+12     	; 0xa4 <ISR_UART_RECV+0x36>
		{													// 0xff = Linux Login Reset
			mCmdQ[0] = 0x00;		
  98:	10 92 08 02 	sts	0x0208, r1
			mCmdQFlag = 0x00;
  9c:	10 92 ec 01 	sts	0x01EC, r1
			mLinuxMode = 0x00;
  a0:	10 92 b4 01 	sts	0x01B4, r1
		}

		if (mLinuxMode <=1)									// Ignor message when mLinux Mode <=1
  a4:	80 91 b4 01 	lds	r24, 0x01B4
  a8:	82 30       	cpi	r24, 0x02	; 2
  aa:	80 f4       	brcc	.+32     	; 0xcc <ISR_UART_RECV+0x5e>
		{
	 		mCmdQ[0] = 0x00;	
  ac:	10 92 08 02 	sts	0x0208, r1
			mCmdQFlag = 0x00;
  b0:	10 92 ec 01 	sts	0x01EC, r1
  b4:	0b c0       	rjmp	.+22     	; 0xcc <ISR_UART_RECV+0x5e>
	 		mCmdQ[0] = 0x00;	
			mCmdQFlag = 0x00;
		}
*/
	 }
	 else if (mCmdQ[0] < ((sizeof(mCmdQ))-1))	 
  b6:	e0 91 08 02 	lds	r30, 0x0208
  ba:	ef 33       	cpi	r30, 0x3F	; 63
  bc:	38 f4       	brcc	.+14     	; 0xcc <ISR_UART_RECV+0x5e>
//		 if ((mLinuxMode<=0x01) && (mpUART == ':') && data==' ')
//		 {
//			mCmdQ[0] |= 0x80;
//			mCmdQFlag = 1;
//		 }
	 	 mCmdQ[0]++;
  be:	ef 5f       	subi	r30, 0xFF	; 255
  c0:	e0 93 08 02 	sts	0x0208, r30
		 mCmdQ[mCmdQ[0]]=data;
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	e8 5f       	subi	r30, 0xF8	; 248
  c8:	fd 4f       	sbci	r31, 0xFD	; 253
  ca:	90 83       	st	Z, r25
	 }	

// 	 pdata = data;
	 mpUART = data;
  cc:	90 93 54 02 	sts	0x0254, r25


}
  d0:	08 95       	ret

000000d2 <__vector_11>:

#define LED_PWM 32

// Define Interrupt

SIGNAL(SIG_UART_RECV) { // USART RX interrupt
  d2:	1f 92       	push	r1
  d4:	0f 92       	push	r0
  d6:	0f b6       	in	r0, 0x3f	; 63
  d8:	0f 92       	push	r0
  da:	11 24       	eor	r1, r1
  dc:	2f 93       	push	r18
  de:	3f 93       	push	r19
  e0:	4f 93       	push	r20
  e2:	5f 93       	push	r21
  e4:	6f 93       	push	r22
  e6:	7f 93       	push	r23
  e8:	8f 93       	push	r24
  ea:	9f 93       	push	r25
  ec:	af 93       	push	r26
  ee:	bf 93       	push	r27
  f0:	ef 93       	push	r30
  f2:	ff 93       	push	r31

	ISR_UART_RECV();
  f4:	bc df       	rcall	.-136    	; 0x6e <ISR_UART_RECV>

}
  f6:	ff 91       	pop	r31
  f8:	ef 91       	pop	r30
  fa:	bf 91       	pop	r27
  fc:	af 91       	pop	r26
  fe:	9f 91       	pop	r25
 100:	8f 91       	pop	r24
 102:	7f 91       	pop	r23
 104:	6f 91       	pop	r22
 106:	5f 91       	pop	r21
 108:	4f 91       	pop	r20
 10a:	3f 91       	pop	r19
 10c:	2f 91       	pop	r18
 10e:	0f 90       	pop	r0
 110:	0f be       	out	0x3f, r0	; 63
 112:	0f 90       	pop	r0
 114:	1f 90       	pop	r1
 116:	18 95       	reti

00000118 <init_hardware>:
void init_hardware(void)
{

//	init UART

	UCSRA = 0x02; // U2X = 1
 118:	92 e0       	ldi	r25, 0x02	; 2
 11a:	9b b9       	out	0x0b, r25	; 11
	UCSRB = 0x00;	
 11c:	1a b8       	out	0x0a, r1	; 10
	UCSRC = 0x86; // No Parity | 1 Stop Bit | 8 Data Bit
 11e:	86 e8       	ldi	r24, 0x86	; 134
 120:	80 bd       	out	0x20, r24	; 32
	UBRRH = 0x00; // 115200bps @ 12.00MHz 0x4D=9600 0x33 = 115200
 122:	10 bc       	out	0x20, r1	; 32
	UBRRL = 0x0C; // 115200bps @ 12.00MHz 0x4D/9B=9600 ??/0x0C = 115200
 124:	8c e0       	ldi	r24, 0x0C	; 12
 126:	89 b9       	out	0x09, r24	; 9
	UCSRB = 0x98; // Enable Rx Interrupt, Rx/Tx PIN	
 128:	88 e9       	ldi	r24, 0x98	; 152
 12a:	8a b9       	out	0x0a, r24	; 10

	// Timer/Counter 0 initialization
	// Clock source: System Clock
	// Clock value: 125.000 kHz
//	TCCR0=0x05;		// Clk/1024 = 12000000/1024 = 11718.75Hz
	TCCR0=0x03;		// Clk/1024 = 12000000/1024 = 11718.75Hz
 12c:	83 e0       	ldi	r24, 0x03	; 3
 12e:	83 bf       	out	0x33, r24	; 51
	TCNT0=0x4E;
 130:	8e e4       	ldi	r24, 0x4E	; 78
 132:	82 bf       	out	0x32, r24	; 50
	TIMSK |= 0x01;	// Turn ON Timer0 Interrup
 134:	89 b7       	in	r24, 0x39	; 57
 136:	81 60       	ori	r24, 0x01	; 1
 138:	89 bf       	out	0x39, r24	; 57



	//  prepare 36kHz for IR - Communication
	TCCR1A = 0b01001000;	// Toggle OC1A on compare
 13a:	88 e4       	ldi	r24, 0x48	; 72
 13c:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = 0b00001000;	// CLK=STOP
 13e:	88 e0       	ldi	r24, 0x08	; 8
 140:	8e bd       	out	0x2e, r24	; 46
	OCR1AH  = 0x00; 		// 12MHz / 40Kz / 2 = 150 = 0x0096
 142:	1b bc       	out	0x2b, r1	; 43
	OCR1AL  = 0x94; 		// 
 144:	84 e9       	ldi	r24, 0x94	; 148
 146:	8a bd       	out	0x2a, r24	; 42
	TCNT1   = 0x0000;
 148:	1d bc       	out	0x2d, r1	; 45
 14a:	1c bc       	out	0x2c, r1	; 44
	TIMSK |= 0x10;	// Turn ON Timer0 Interrup
 14c:	89 b7       	in	r24, 0x39	; 57
 14e:	80 61       	ori	r24, 0x10	; 16
 150:	89 bf       	out	0x39, r24	; 57


//	init IO
	DDRC = 0x07; 
 152:	87 e0       	ldi	r24, 0x07	; 7
 154:	84 bb       	out	0x14, r24	; 20
//	DDRB = _BV(1);	// PB1 
	DDRB = 0x3B;
 156:	8b e3       	ldi	r24, 0x3B	; 59
 158:	87 bb       	out	0x17, r24	; 23
	DDRD = 0x02;
 15a:	91 bb       	out	0x11, r25	; 17
	PORTD = 0x00;
 15c:	12 ba       	out	0x12, r1	; 18

//	UCSRB = 0x98; // Enable Rx Interrupt, Rx/Tx PIN	
	UCSRB = 0x90; // Enable Rx Interrupt, Rx PIN	
 15e:	80 e9       	ldi	r24, 0x90	; 144
 160:	8a b9       	out	0x0a, r24	; 10

}
 162:	08 95       	ret

00000164 <izuvo_test_mode>:
}

void izuvo_test_mode(unsigned char iMode)
{

	switch (iMode)
 164:	81 30       	cpi	r24, 0x01	; 1
 166:	41 f0       	breq	.+16     	; 0x178 <izuvo_test_mode+0x14>
 168:	81 30       	cpi	r24, 0x01	; 1
 16a:	18 f0       	brcs	.+6      	; 0x172 <izuvo_test_mode+0xe>
 16c:	82 30       	cpi	r24, 0x02	; 2
 16e:	41 f5       	brne	.+80     	; 0x1c0 <izuvo_test_mode+0x5c>
 170:	18 c0       	rjmp	.+48     	; 0x1a2 <izuvo_test_mode+0x3e>
	{
		case 0:
			//1F301F301F301F30  : all fade
			mLED[0]=0x1F30;
 172:	80 e3       	ldi	r24, 0x30	; 48
 174:	9f e1       	ldi	r25, 0x1F	; 31
 176:	17 c0       	rjmp	.+46     	; 0x1a6 <izuvo_test_mode+0x42>
			mLED[2]=0x1F30;
			mLED[3]=0x1F30;
			break;
		case 1:
			//1F301F251F2A1F2F : Fade, Blink , Blink, Blink
			mLED[0]=0x1F30;
 178:	80 e3       	ldi	r24, 0x30	; 48
 17a:	9f e1       	ldi	r25, 0x1F	; 31
 17c:	90 93 56 02 	sts	0x0256, r25
 180:	80 93 55 02 	sts	0x0255, r24
			mLED[1]=0x1F25;
 184:	85 e2       	ldi	r24, 0x25	; 37
 186:	9f e1       	ldi	r25, 0x1F	; 31
 188:	90 93 58 02 	sts	0x0258, r25
 18c:	80 93 57 02 	sts	0x0257, r24
			mLED[2]=0x1F2A;
 190:	8a e2       	ldi	r24, 0x2A	; 42
 192:	9f e1       	ldi	r25, 0x1F	; 31
 194:	90 93 5a 02 	sts	0x025A, r25
 198:	80 93 59 02 	sts	0x0259, r24
			mLED[3]=0x1F2F;
 19c:	8f e2       	ldi	r24, 0x2F	; 47
 19e:	9f e1       	ldi	r25, 0x1F	; 31
 1a0:	23 c0       	rjmp	.+70     	; 0x1e8 <izuvo_test_mode+0x84>
			break;
		case 2:
			//1F101F151F1A1F1F : ON, ON , ON, ON
			mLED[0]=0x1F10;
 1a2:	80 e1       	ldi	r24, 0x10	; 16
 1a4:	9f e1       	ldi	r25, 0x1F	; 31
 1a6:	90 93 56 02 	sts	0x0256, r25
 1aa:	80 93 55 02 	sts	0x0255, r24
			mLED[1]=0x1F10;
 1ae:	90 93 58 02 	sts	0x0258, r25
 1b2:	80 93 57 02 	sts	0x0257, r24
			mLED[2]=0x1F10;
 1b6:	90 93 5a 02 	sts	0x025A, r25
 1ba:	80 93 59 02 	sts	0x0259, r24
 1be:	14 c0       	rjmp	.+40     	; 0x1e8 <izuvo_test_mode+0x84>
			mLED[3]=0x1F10;
			break;
		default:
			//EF1F101F251F4A1F6F : ON, Blink-InVBlink, Blink
			mLED[0]=0x1F10;
 1c0:	80 e1       	ldi	r24, 0x10	; 16
 1c2:	9f e1       	ldi	r25, 0x1F	; 31
 1c4:	90 93 56 02 	sts	0x0256, r25
 1c8:	80 93 55 02 	sts	0x0255, r24
			mLED[1]=0x1F25;
 1cc:	85 e2       	ldi	r24, 0x25	; 37
 1ce:	9f e1       	ldi	r25, 0x1F	; 31
 1d0:	90 93 58 02 	sts	0x0258, r25
 1d4:	80 93 57 02 	sts	0x0257, r24
			mLED[2]=0x1F4A;
 1d8:	8a e4       	ldi	r24, 0x4A	; 74
 1da:	9f e1       	ldi	r25, 0x1F	; 31
 1dc:	90 93 5a 02 	sts	0x025A, r25
 1e0:	80 93 59 02 	sts	0x0259, r24
			mLED[3]=0x1F6F;
 1e4:	8f e6       	ldi	r24, 0x6F	; 111
 1e6:	9f e1       	ldi	r25, 0x1F	; 31
 1e8:	90 93 5c 02 	sts	0x025C, r25
 1ec:	80 93 5b 02 	sts	0x025B, r24
 1f0:	08 95       	ret

000001f2 <led_task>:


}

void led_task(void)
{
 1f2:	0f 93       	push	r16
 1f4:	1f 93       	push	r17
 1f6:	60 e0       	ldi	r22, 0x00	; 0
 1f8:	70 e0       	ldi	r23, 0x00	; 0
	unsigned char period=0;
	unsigned char brightness=0;

	for (i=0; i<=3; i++)
	{
		brightness = (mLED[i] >> 8) & 0xff;
 1fa:	fb 01       	movw	r30, r22
 1fc:	ee 0f       	add	r30, r30
 1fe:	ff 1f       	adc	r31, r31
 200:	eb 5a       	subi	r30, 0xAB	; 171
 202:	fd 4f       	sbci	r31, 0xFD	; 253
 204:	80 81       	ld	r24, Z
 206:	91 81       	ldd	r25, Z+1	; 0x01
 208:	19 2f       	mov	r17, r25
		mode = (mLED[i] >> 4) & 0x000f;
 20a:	40 81       	ld	r20, Z
 20c:	51 81       	ldd	r21, Z+1	; 0x01
		period = (mLED[i] & 0x000f)+1;
 20e:	80 81       	ld	r24, Z
 210:	91 81       	ldd	r25, Z+1	; 0x01
 212:	08 2f       	mov	r16, r24
 214:	0f 70       	andi	r16, 0x0F	; 15
 216:	0f 5f       	subi	r16, 0xFF	; 255

		mLED_Cnt[i]++;
 218:	fb 01       	movw	r30, r22
 21a:	e8 5b       	subi	r30, 0xB8	; 184
 21c:	fd 4f       	sbci	r31, 0xFD	; 253
 21e:	80 81       	ld	r24, Z
 220:	8f 5f       	subi	r24, 0xFF	; 255
 222:	80 83       	st	Z, r24
		if (mLED_Cnt[i]>(period<<1))
 224:	20 81       	ld	r18, Z
 226:	30 e0       	ldi	r19, 0x00	; 0
 228:	80 2f       	mov	r24, r16
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	88 0f       	add	r24, r24
 22e:	99 1f       	adc	r25, r25
 230:	82 17       	cp	r24, r18
 232:	93 07       	cpc	r25, r19
 234:	0c f4       	brge	.+2      	; 0x238 <led_task+0x46>
		{
			mLED_Cnt[i] = 0x00;
 236:	10 82       	st	Z, r1
		}
		
		switch (mode)
 238:	e4 e0       	ldi	r30, 0x04	; 4
 23a:	56 95       	lsr	r21
 23c:	47 95       	ror	r20
 23e:	ea 95       	dec	r30
 240:	e1 f7       	brne	.-8      	; 0x23a <led_task+0x48>
 242:	84 2f       	mov	r24, r20
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	a0 e0       	ldi	r26, 0x00	; 0
 248:	b0 e0       	ldi	r27, 0x00	; 0
 24a:	8f 70       	andi	r24, 0x0F	; 15
 24c:	90 70       	andi	r25, 0x00	; 0
 24e:	a0 70       	andi	r26, 0x00	; 0
 250:	b0 70       	andi	r27, 0x00	; 0
 252:	fc 01       	movw	r30, r24
 254:	88 30       	cpi	r24, 0x08	; 8
 256:	91 05       	cpc	r25, r1
 258:	08 f0       	brcs	.+2      	; 0x25c <led_task+0x6a>
 25a:	97 c0       	rjmp	.+302    	; 0x38a <led_task+0x198>
 25c:	ed 5e       	subi	r30, 0xED	; 237
 25e:	ff 4f       	sbci	r31, 0xFF	; 255
 260:	09 94       	ijmp
		{
			case 0:			// OFF
				mLED_Brightness[i]=0x00;
 262:	fb 01       	movw	r30, r22
 264:	e4 5b       	subi	r30, 0xB4	; 180
 266:	fd 4f       	sbci	r31, 0xFD	; 253
 268:	10 82       	st	Z, r1
 26a:	8f c0       	rjmp	.+286    	; 0x38a <led_task+0x198>
				break;
			case 1:			// ON
				mLED_Brightness[i]=brightness;
 26c:	fb 01       	movw	r30, r22
 26e:	e4 5b       	subi	r30, 0xB4	; 180
 270:	fd 4f       	sbci	r31, 0xFD	; 253
 272:	10 83       	st	Z, r17
 274:	8a c0       	rjmp	.+276    	; 0x38a <led_task+0x198>
				break;
			case 2:			// Blink
				if (mLED_Cnt[i]<period)
 276:	fb 01       	movw	r30, r22
 278:	e8 5b       	subi	r30, 0xB8	; 184
 27a:	fd 4f       	sbci	r31, 0xFD	; 253
 27c:	80 81       	ld	r24, Z
 27e:	db 01       	movw	r26, r22
 280:	a4 5b       	subi	r26, 0xB4	; 180
 282:	bd 4f       	sbci	r27, 0xFD	; 253
 284:	80 17       	cp	r24, r16
 286:	58 f1       	brcs	.+86     	; 0x2de <led_task+0xec>
				{	
					mLED_Brightness[i]=brightness;
				}
				else
				{
					mLED_Brightness[i]=0x00;
 288:	1c 92       	st	X, r1
 28a:	7f c0       	rjmp	.+254    	; 0x38a <led_task+0x198>
				}
				break;
			case 3:			// Fade

				if ((mLED_Cnt[i] == 0) || (mLED_Cnt[i] == period))
 28c:	fb 01       	movw	r30, r22
 28e:	e8 5b       	subi	r30, 0xB8	; 184
 290:	fd 4f       	sbci	r31, 0xFD	; 253
 292:	80 81       	ld	r24, Z
 294:	88 23       	and	r24, r24
 296:	21 f0       	breq	.+8      	; 0x2a0 <led_task+0xae>
 298:	80 81       	ld	r24, Z
 29a:	80 17       	cp	r24, r16
 29c:	09 f0       	breq	.+2      	; 0x2a0 <led_task+0xae>
 29e:	75 c0       	rjmp	.+234    	; 0x38a <led_task+0x198>
				{
					mLED_Fade[i] ++;
 2a0:	fb 01       	movw	r30, r22
 2a2:	e0 5b       	subi	r30, 0xB0	; 176
 2a4:	fd 4f       	sbci	r31, 0xFD	; 253
 2a6:	80 81       	ld	r24, Z
 2a8:	8f 5f       	subi	r24, 0xFF	; 255
 2aa:	80 83       	st	Z, r24
					if (mLED_Fade[i] >= (brightness<<1))
 2ac:	20 81       	ld	r18, Z
 2ae:	30 e0       	ldi	r19, 0x00	; 0
 2b0:	81 2f       	mov	r24, r17
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	88 0f       	add	r24, r24
 2b6:	99 1f       	adc	r25, r25
 2b8:	28 17       	cp	r18, r24
 2ba:	39 07       	cpc	r19, r25
 2bc:	0c f0       	brlt	.+2      	; 0x2c0 <led_task+0xce>
					{
						mLED_Fade[i]=0x00;
 2be:	10 82       	st	Z, r1
					}

					if (mLED_Fade[i]<brightness)
 2c0:	fb 01       	movw	r30, r22
 2c2:	e0 5b       	subi	r30, 0xB0	; 176
 2c4:	fd 4f       	sbci	r31, 0xFD	; 253
 2c6:	80 81       	ld	r24, Z
 2c8:	db 01       	movw	r26, r22
 2ca:	a4 5b       	subi	r26, 0xB4	; 180
 2cc:	bd 4f       	sbci	r27, 0xFD	; 253
 2ce:	81 17       	cp	r24, r17
 2d0:	18 f4       	brcc	.+6      	; 0x2d8 <led_task+0xe6>
					{
						mLED_Brightness[i] = mLED_Fade[i];
 2d2:	80 81       	ld	r24, Z
 2d4:	8c 93       	st	X, r24
 2d6:	59 c0       	rjmp	.+178    	; 0x38a <led_task+0x198>
					}
					else
					{
						mLED_Brightness[i] = (brightness<<1) - mLED_Fade[i];
 2d8:	80 81       	ld	r24, Z
 2da:	11 0f       	add	r17, r17
 2dc:	18 1b       	sub	r17, r24
 2de:	1c 93       	st	X, r17
 2e0:	54 c0       	rjmp	.+168    	; 0x38a <led_task+0x198>
					}
				}
				break;
			case 4:			// Inv
				if (i==1)	// Y Inv_B
 2e2:	61 30       	cpi	r22, 0x01	; 1
 2e4:	19 f4       	brne	.+6      	; 0x2ec <led_task+0xfa>
				{
					if (mLED_Brightness[2]==0)
 2e6:	80 91 4e 02 	lds	r24, 0x024E
 2ea:	30 c0       	rjmp	.+96     	; 0x34c <led_task+0x15a>
					else
					{
						mLED_Brightness[1]=0;
					}
				}
				if (i==2)	// B Inv_Y
 2ec:	62 30       	cpi	r22, 0x02	; 2
 2ee:	19 f4       	brne	.+6      	; 0x2f6 <led_task+0x104>
				{
					if (mLED_Brightness[1]==0)
 2f0:	80 91 4d 02 	lds	r24, 0x024D
 2f4:	0c c0       	rjmp	.+24     	; 0x30e <led_task+0x11c>
					{
						mLED_Brightness[2]=0;
					}

				}
				if (i==3)	// R Inv_Y
 2f6:	63 30       	cpi	r22, 0x03	; 3
 2f8:	09 f0       	breq	.+2      	; 0x2fc <led_task+0x10a>
 2fa:	47 c0       	rjmp	.+142    	; 0x38a <led_task+0x198>
				{
					if (mLED_Brightness[1]==0)
 2fc:	80 91 4d 02 	lds	r24, 0x024D
 300:	0d c0       	rjmp	.+26     	; 0x31c <led_task+0x12a>
						mLED_Brightness[3]=0;
					}
				}
				break;
			case 5:			// Inv
				if (i==1)	// Y Inv_R
 302:	61 30       	cpi	r22, 0x01	; 1
 304:	09 f1       	breq	.+66     	; 0x348 <led_task+0x156>
					else
					{
						mLED_Brightness[1]=0;
					}
				}
				if (i==2)	// B Inv_R
 306:	62 30       	cpi	r22, 0x02	; 2
 308:	29 f4       	brne	.+10     	; 0x314 <led_task+0x122>
				{
					if (mLED_Brightness[3]==0)
 30a:	80 91 4f 02 	lds	r24, 0x024F
 30e:	88 23       	and	r24, r24
 310:	59 f5       	brne	.+86     	; 0x368 <led_task+0x176>
 312:	2d c0       	rjmp	.+90     	; 0x36e <led_task+0x17c>
					{
						mLED_Brightness[2]=0;
					}

				}
				if (i==3)	// R Inv_B
 314:	63 30       	cpi	r22, 0x03	; 3
 316:	c9 f5       	brne	.+114    	; 0x38a <led_task+0x198>
				{
					if (mLED_Brightness[2]==0)
 318:	80 91 4e 02 	lds	r24, 0x024E
 31c:	88 23       	and	r24, r24
 31e:	81 f5       	brne	.+96     	; 0x380 <led_task+0x18e>
 320:	32 c0       	rjmp	.+100    	; 0x386 <led_task+0x194>
						mLED_Brightness[3]=0;
					}
				}
				break;
			case 6:			// Sync
				if (i==1)	// Y_B
 322:	61 30       	cpi	r22, 0x01	; 1
 324:	29 f4       	brne	.+10     	; 0x330 <led_task+0x13e>
				{
					if (mLED_Brightness[2]==0)
 326:	80 91 4e 02 	lds	r24, 0x024E
 32a:	88 23       	and	r24, r24
 32c:	89 f4       	brne	.+34     	; 0x350 <led_task+0x15e>
 32e:	13 c0       	rjmp	.+38     	; 0x356 <led_task+0x164>
					else
					{
						mLED_Brightness[1]=brightness;
					}
				}
				if (i==2)	// B_Y
 330:	62 30       	cpi	r22, 0x02	; 2
 332:	19 f4       	brne	.+6      	; 0x33a <led_task+0x148>
				{
					if (mLED_Brightness[1]==0)
 334:	80 91 4d 02 	lds	r24, 0x024D
 338:	15 c0       	rjmp	.+42     	; 0x364 <led_task+0x172>
					{
						mLED_Brightness[2]=brightness;
					}

				}
				if (i==3)	// R_Y
 33a:	63 30       	cpi	r22, 0x03	; 3
 33c:	31 f5       	brne	.+76     	; 0x38a <led_task+0x198>
				{
					if (mLED_Brightness[1]==0)
 33e:	80 91 4d 02 	lds	r24, 0x024D
 342:	1c c0       	rjmp	.+56     	; 0x37c <led_task+0x18a>
						mLED_Brightness[3]=brightness;
					}
				}
				break;
			case 7:			// Sync
				if (i==1)	// Y_R
 344:	61 30       	cpi	r22, 0x01	; 1
 346:	51 f4       	brne	.+20     	; 0x35c <led_task+0x16a>
				{
					if (mLED_Brightness[3]==0)
 348:	80 91 4f 02 	lds	r24, 0x024F
 34c:	88 23       	and	r24, r24
 34e:	19 f4       	brne	.+6      	; 0x356 <led_task+0x164>
					{
						mLED_Brightness[1]=brightness;
 350:	10 93 4d 02 	sts	0x024D, r17
 354:	1a c0       	rjmp	.+52     	; 0x38a <led_task+0x198>
					}
					else
					{
						mLED_Brightness[1]=0;
 356:	10 92 4d 02 	sts	0x024D, r1
 35a:	17 c0       	rjmp	.+46     	; 0x38a <led_task+0x198>
					}
				}
				if (i==2)	// B_R
 35c:	62 30       	cpi	r22, 0x02	; 2
 35e:	51 f4       	brne	.+20     	; 0x374 <led_task+0x182>
				{
					if (mLED_Brightness[3]==0)
 360:	80 91 4f 02 	lds	r24, 0x024F
 364:	88 23       	and	r24, r24
 366:	19 f4       	brne	.+6      	; 0x36e <led_task+0x17c>
					{
						mLED_Brightness[2]=0;
 368:	10 92 4e 02 	sts	0x024E, r1
 36c:	0e c0       	rjmp	.+28     	; 0x38a <led_task+0x198>
					}
					else
					{
						mLED_Brightness[2]=brightness;
 36e:	10 93 4e 02 	sts	0x024E, r17
 372:	0b c0       	rjmp	.+22     	; 0x38a <led_task+0x198>
					}

				}
				if (i==3)	// R_B
 374:	63 30       	cpi	r22, 0x03	; 3
 376:	49 f4       	brne	.+18     	; 0x38a <led_task+0x198>
				{
					if (mLED_Brightness[2]==0)
 378:	80 91 4e 02 	lds	r24, 0x024E
 37c:	88 23       	and	r24, r24
 37e:	19 f4       	brne	.+6      	; 0x386 <led_task+0x194>
					{
						mLED_Brightness[3]=0;
 380:	10 92 4f 02 	sts	0x024F, r1
 384:	02 c0       	rjmp	.+4      	; 0x38a <led_task+0x198>
					}
					else
					{
						mLED_Brightness[3]=brightness;
 386:	10 93 4f 02 	sts	0x024F, r17
 38a:	6f 5f       	subi	r22, 0xFF	; 255
 38c:	7f 4f       	sbci	r23, 0xFF	; 255
	unsigned char i=0;
	unsigned char mode=0;
	unsigned char period=0;
	unsigned char brightness=0;

	for (i=0; i<=3; i++)
 38e:	64 30       	cpi	r22, 0x04	; 4
 390:	71 05       	cpc	r23, r1
 392:	09 f0       	breq	.+2      	; 0x396 <led_task+0x1a4>
 394:	32 cf       	rjmp	.-412    	; 0x1fa <led_task+0x8>


	}


}
 396:	1f 91       	pop	r17
 398:	0f 91       	pop	r16
 39a:	08 95       	ret

0000039c <process_tmr>:
{
//	static unsigned int tCnt=0;
	static unsigned char tSecCnt=0;	
//	static unsigned char tLED=0;

	if (mTimer0_Flag==1)	// @ very 196.6ms
 39c:	80 91 ef 01 	lds	r24, 0x01EF
 3a0:	81 30       	cpi	r24, 0x01	; 1
 3a2:	61 f4       	brne	.+24     	; 0x3bc <process_tmr+0x20>
	{
		mTimer0_Flag=0;
 3a4:	10 92 ef 01 	sts	0x01EF, r1
		tSecCnt++;
 3a8:	80 91 fd 01 	lds	r24, 0x01FD
 3ac:	8f 5f       	subi	r24, 0xFF	; 255
 3ae:	80 93 fd 01 	sts	0x01FD, r24
		if (tSecCnt>=10)
 3b2:	8a 30       	cpi	r24, 0x0A	; 10
 3b4:	10 f0       	brcs	.+4      	; 0x3ba <process_tmr+0x1e>
		{
			tSecCnt=0;
 3b6:	10 92 fd 01 	sts	0x01FD, r1

//			if (mLinuxMode!=2)
//				u_puts(EXIT);
		}

		led_task();
 3ba:	1b df       	rcall	.-458    	; 0x1f2 <led_task>
 3bc:	08 95       	ret

000003be <led_driver>:
{

	static unsigned char tCnt=0;
	unsigned char tLED=0;

	tCnt++;
 3be:	80 91 fc 01 	lds	r24, 0x01FC
 3c2:	8f 5f       	subi	r24, 0xFF	; 255
 3c4:	80 93 fc 01 	sts	0x01FC, r24
	if (tCnt>LED_PWM)
 3c8:	81 32       	cpi	r24, 0x21	; 33
 3ca:	10 f0       	brcs	.+4      	; 0x3d0 <led_driver+0x12>
	{
		tCnt=0;
 3cc:	10 92 fc 01 	sts	0x01FC, r1
	}

	tLED = mLED_Brightness[0];
 3d0:	90 91 4c 02 	lds	r25, 0x024C
	if (tLED==0)
 3d4:	99 23       	and	r25, r25
 3d6:	31 f0       	breq	.+12     	; 0x3e4 <led_driver+0x26>
	{
		LED_L_OFF();
	}
	else if (tLED>tCnt)
 3d8:	80 91 fc 01 	lds	r24, 0x01FC
 3dc:	89 17       	cp	r24, r25
 3de:	10 f4       	brcc	.+4      	; 0x3e4 <led_driver+0x26>
	{
		LED_L_ON();
 3e0:	c3 98       	cbi	0x18, 3	; 24
 3e2:	01 c0       	rjmp	.+2      	; 0x3e6 <led_driver+0x28>
	}
	else
	{
		LED_L_OFF();
 3e4:	c3 9a       	sbi	0x18, 3	; 24
	}

	tLED = mLED_Brightness[1];
 3e6:	90 91 4d 02 	lds	r25, 0x024D
	if (tLED==0)
 3ea:	99 23       	and	r25, r25
 3ec:	31 f0       	breq	.+12     	; 0x3fa <led_driver+0x3c>
	{
		LED_Y_OFF();
		LED_YY_OFF();
	}
	else if (tLED>tCnt)
 3ee:	80 91 fc 01 	lds	r24, 0x01FC
 3f2:	89 17       	cp	r24, r25
 3f4:	10 f4       	brcc	.+4      	; 0x3fa <led_driver+0x3c>
	{
//		LED_Y_ON();
		LED_YY_ON();
 3f6:	91 98       	cbi	0x12, 1	; 18
 3f8:	02 c0       	rjmp	.+4      	; 0x3fe <led_driver+0x40>
	}
	else
	{
		LED_Y_OFF();
 3fa:	a8 9a       	sbi	0x15, 0	; 21
		LED_YY_OFF();
 3fc:	91 9a       	sbi	0x12, 1	; 18
	}

	tLED = mLED_Brightness[2];
 3fe:	90 91 4e 02 	lds	r25, 0x024E
	if (tLED==0)
 402:	99 23       	and	r25, r25
 404:	31 f0       	breq	.+12     	; 0x412 <led_driver+0x54>
	{
		LED_B_OFF();
		LED_BB_OFF();
	}
	else if (tLED>tCnt)
 406:	80 91 fc 01 	lds	r24, 0x01FC
 40a:	89 17       	cp	r24, r25
 40c:	10 f4       	brcc	.+4      	; 0x412 <led_driver+0x54>
	{
//		LED_B_ON();
		LED_BB_ON();
 40e:	c5 98       	cbi	0x18, 5	; 24
 410:	02 c0       	rjmp	.+4      	; 0x416 <led_driver+0x58>
	}
	else
	{
		LED_B_OFF();
 412:	a9 9a       	sbi	0x15, 1	; 21
		LED_BB_OFF();
 414:	c5 9a       	sbi	0x18, 5	; 24
	}

	tLED = mLED_Brightness[3];
 416:	90 91 4f 02 	lds	r25, 0x024F
	if (tLED==0)
 41a:	99 23       	and	r25, r25
 41c:	31 f0       	breq	.+12     	; 0x42a <led_driver+0x6c>
	{
		LED_R_OFF();
		LED_RR_OFF();
	}
	else if (tLED>tCnt)
 41e:	80 91 fc 01 	lds	r24, 0x01FC
 422:	89 17       	cp	r24, r25
 424:	10 f4       	brcc	.+4      	; 0x42a <led_driver+0x6c>
	{
//		LED_R_ON();
		LED_RR_ON();
 426:	c4 98       	cbi	0x18, 4	; 24
 428:	08 95       	ret
	}
	else
	{
		LED_R_OFF();
 42a:	aa 9a       	sbi	0x15, 2	; 21
		LED_RR_OFF();
 42c:	c4 9a       	sbi	0x18, 4	; 24
 42e:	08 95       	ret

00000430 <ISR_TIMER0_OVR>:

void ISR_TIMER0_OVR (void)
{
//	TCNT0=0x4E;
//	TCNT0=0x58;
	TCNT0=0xAC;
 430:	8c ea       	ldi	r24, 0xAC	; 172
 432:	82 bf       	out	0x32, r24	; 50
	
	led_driver();
 434:	c4 df       	rcall	.-120    	; 0x3be <led_driver>
	mTimer0_Cnt++;
 436:	80 91 f0 01 	lds	r24, 0x01F0
 43a:	90 91 f1 01 	lds	r25, 0x01F1
 43e:	01 96       	adiw	r24, 0x01	; 1
 440:	90 93 f1 01 	sts	0x01F1, r25
 444:	80 93 f0 01 	sts	0x01F0, r24
//	if (mTimer0_Cnt>=9)	// 21.84533ms * 9 = 196.6ms
//	if (mTimer0_Cnt>=200)	// 1ms * 200 = 196.6ms
	if (mTimer0_Cnt>=200)	// 1ms * 200 = 196.6ms
 448:	80 91 f0 01 	lds	r24, 0x01F0
 44c:	90 91 f1 01 	lds	r25, 0x01F1
 450:	88 3c       	cpi	r24, 0xC8	; 200
 452:	91 05       	cpc	r25, r1
 454:	38 f0       	brcs	.+14     	; 0x464 <__stack+0x5>
	{
		mTimer0_Flag = 1;
 456:	81 e0       	ldi	r24, 0x01	; 1
 458:	80 93 ef 01 	sts	0x01EF, r24
		mTimer0_Cnt =0;
 45c:	10 92 f1 01 	sts	0x01F1, r1
 460:	10 92 f0 01 	sts	0x01F0, r1
 464:	08 95       	ret

00000466 <__vector_9>:
*/

// uses timer0 for base timer
// Interrupt for every 21.845333mS
SIGNAL (TIMER0_OVF_vect)	
{
 466:	1f 92       	push	r1
 468:	0f 92       	push	r0
 46a:	0f b6       	in	r0, 0x3f	; 63
 46c:	0f 92       	push	r0
 46e:	11 24       	eor	r1, r1
 470:	2f 93       	push	r18
 472:	3f 93       	push	r19
 474:	4f 93       	push	r20
 476:	5f 93       	push	r21
 478:	6f 93       	push	r22
 47a:	7f 93       	push	r23
 47c:	8f 93       	push	r24
 47e:	9f 93       	push	r25
 480:	af 93       	push	r26
 482:	bf 93       	push	r27
 484:	ef 93       	push	r30
 486:	ff 93       	push	r31
	ISR_TIMER0_OVR();
 488:	d3 df       	rcall	.-90     	; 0x430 <ISR_TIMER0_OVR>
}
 48a:	ff 91       	pop	r31
 48c:	ef 91       	pop	r30
 48e:	bf 91       	pop	r27
 490:	af 91       	pop	r26
 492:	9f 91       	pop	r25
 494:	8f 91       	pop	r24
 496:	7f 91       	pop	r23
 498:	6f 91       	pop	r22
 49a:	5f 91       	pop	r21
 49c:	4f 91       	pop	r20
 49e:	3f 91       	pop	r19
 4a0:	2f 91       	pop	r18
 4a2:	0f 90       	pop	r0
 4a4:	0f be       	out	0x3f, r0	; 63
 4a6:	0f 90       	pop	r0
 4a8:	1f 90       	pop	r1
 4aa:	18 95       	reti

000004ac <process_cmd_izuvo_led>:
	}
}


void process_cmd_izuvo_led(char *sptr)
{
 4ac:	0f 93       	push	r16
 4ae:	1f 93       	push	r17
 4b0:	8c 01       	movw	r16, r24

		mLED[0]=u_asc2uint(4,sptr);
 4b2:	84 e0       	ldi	r24, 0x04	; 4
 4b4:	b8 01       	movw	r22, r16
 4b6:	60 d1       	rcall	.+704    	; 0x778 <u_asc2uint>
 4b8:	90 93 56 02 	sts	0x0256, r25
 4bc:	80 93 55 02 	sts	0x0255, r24
		mLED[1]=u_asc2uint(4,sptr+4);
 4c0:	0c 5f       	subi	r16, 0xFC	; 252
 4c2:	1f 4f       	sbci	r17, 0xFF	; 255
 4c4:	84 e0       	ldi	r24, 0x04	; 4
 4c6:	b8 01       	movw	r22, r16
 4c8:	57 d1       	rcall	.+686    	; 0x778 <u_asc2uint>
 4ca:	90 93 58 02 	sts	0x0258, r25
 4ce:	80 93 57 02 	sts	0x0257, r24
		mLED[2]=u_asc2uint(4,sptr+8);
 4d2:	0c 5f       	subi	r16, 0xFC	; 252
 4d4:	1f 4f       	sbci	r17, 0xFF	; 255
 4d6:	84 e0       	ldi	r24, 0x04	; 4
 4d8:	b8 01       	movw	r22, r16
 4da:	4e d1       	rcall	.+668    	; 0x778 <u_asc2uint>
 4dc:	90 93 5a 02 	sts	0x025A, r25
 4e0:	80 93 59 02 	sts	0x0259, r24
		mLED[3]=u_asc2uint(4,sptr+12);
 4e4:	0c 5f       	subi	r16, 0xFC	; 252
 4e6:	1f 4f       	sbci	r17, 0xFF	; 255
 4e8:	84 e0       	ldi	r24, 0x04	; 4
 4ea:	b8 01       	movw	r22, r16
 4ec:	45 d1       	rcall	.+650    	; 0x778 <u_asc2uint>
 4ee:	90 93 5c 02 	sts	0x025C, r25
 4f2:	80 93 5b 02 	sts	0x025B, r24


}
 4f6:	1f 91       	pop	r17
 4f8:	0f 91       	pop	r16
 4fa:	08 95       	ret

000004fc <process_cmd_izuvo>:

//ELZ384E120005014D01001


void process_cmd_izuvo(char *sptr, unsigned char len)
{
 4fc:	1f 93       	push	r17
 4fe:	cf 93       	push	r28
 500:	df 93       	push	r29
 502:	ec 01       	movw	r28, r24
 504:	16 2f       	mov	r17, r22
	unsigned char i;
	char tmp;
	if (len <=2 )
 506:	63 30       	cpi	r22, 0x03	; 3
 508:	48 f4       	brcc	.+18     	; 0x51c <process_cmd_izuvo+0x20>
	{
		u_puts("iZuVo echo command 0x");	
 50a:	80 e6       	ldi	r24, 0x60	; 96
 50c:	90 e0       	ldi	r25, 0x00	; 0
 50e:	84 d1       	rcall	.+776    	; 0x818 <u_puts>
		u_putHexByte(len, ' ');
 510:	81 2f       	mov	r24, r17
 512:	60 e2       	ldi	r22, 0x20	; 32
 514:	59 d1       	rcall	.+690    	; 0x7c8 <u_putHexByte>
		u_puts("/0x16 \r\n");
 516:	86 e7       	ldi	r24, 0x76	; 118
 518:	90 e0       	ldi	r25, 0x00	; 0
 51a:	2b c0       	rjmp	.+86     	; 0x572 <process_cmd_izuvo+0x76>
	}
	else
	{

		tmp = *(sptr+1);
 51c:	89 81       	ldd	r24, Y+1	; 0x01

		if (tmp== 'L')
 51e:	8c 34       	cpi	r24, 0x4C	; 76
 520:	19 f4       	brne	.+6      	; 0x528 <process_cmd_izuvo+0x2c>
		{
			u_puts("iZuVo Local echo\r\n");	
 522:	8f e7       	ldi	r24, 0x7F	; 127
 524:	90 e0       	ldi	r25, 0x00	; 0
 526:	25 c0       	rjmp	.+74     	; 0x572 <process_cmd_izuvo+0x76>
		}

		if (tmp == 'S')
 528:	83 35       	cpi	r24, 0x53	; 83
 52a:	19 f4       	brne	.+6      	; 0x532 <process_cmd_izuvo+0x36>
		{
			u_puts("iZuVo Server echo\r\n");	
 52c:	82 e9       	ldi	r24, 0x92	; 146
 52e:	90 e0       	ldi	r25, 0x00	; 0
 530:	20 c0       	rjmp	.+64     	; 0x572 <process_cmd_izuvo+0x76>
		}


		if (tmp == 'F')
 532:	86 34       	cpi	r24, 0x46	; 70
 534:	f9 f4       	brne	.+62     	; 0x574 <process_cmd_izuvo+0x78>
		{
			u_puts("iZuVo Faucet echo ");	
 536:	86 ea       	ldi	r24, 0xA6	; 166
 538:	90 e0       	ldi	r25, 0x00	; 0
 53a:	6e d1       	rcall	.+732    	; 0x818 <u_puts>
			u_putHexByte(len, ' ');
 53c:	81 2f       	mov	r24, r17
 53e:	60 e2       	ldi	r22, 0x20	; 32
 540:	43 d1       	rcall	.+646    	; 0x7c8 <u_putHexByte>
			if (len>=0x12)
 542:	12 31       	cpi	r17, 0x12	; 18
 544:	18 f0       	brcs	.+6      	; 0x54c <process_cmd_izuvo+0x50>
			{
				process_cmd_izuvo_led(sptr+2);				
 546:	ce 01       	movw	r24, r28
 548:	02 96       	adiw	r24, 0x02	; 2
 54a:	b0 df       	rcall	.-160    	; 0x4ac <process_cmd_izuvo_led>
 54c:	c0 e0       	ldi	r28, 0x00	; 0
 54e:	d0 e0       	ldi	r29, 0x00	; 0
			}
			for (i=0;i<=3;i++)
			{
				u_putHexWord(mLED[i]);
 550:	fe 01       	movw	r30, r28
 552:	ee 0f       	add	r30, r30
 554:	ff 1f       	adc	r31, r31
 556:	eb 5a       	subi	r30, 0xAB	; 171
 558:	fd 4f       	sbci	r31, 0xFD	; 253
 55a:	80 81       	ld	r24, Z
 55c:	91 81       	ldd	r25, Z+1	; 0x01
 55e:	4e d1       	rcall	.+668    	; 0x7fc <u_putHexWord>
				u_puts(" ");
 560:	89 eb       	ldi	r24, 0xB9	; 185
 562:	90 e0       	ldi	r25, 0x00	; 0
 564:	59 d1       	rcall	.+690    	; 0x818 <u_puts>
 566:	21 96       	adiw	r28, 0x01	; 1
			u_putHexByte(len, ' ');
			if (len>=0x12)
			{
				process_cmd_izuvo_led(sptr+2);				
			}
			for (i=0;i<=3;i++)
 568:	c4 30       	cpi	r28, 0x04	; 4
 56a:	d1 05       	cpc	r29, r1
 56c:	89 f7       	brne	.-30     	; 0x550 <process_cmd_izuvo+0x54>
			{
				u_putHexWord(mLED[i]);
				u_puts(" ");
			}
			u_puts("\r\n");
 56e:	8b eb       	ldi	r24, 0xBB	; 187
 570:	90 e0       	ldi	r25, 0x00	; 0
 572:	52 d1       	rcall	.+676    	; 0x818 <u_puts>
			u_putch(tmp);
		}
		u_puts("\r\n");
*/
	}
}
 574:	df 91       	pop	r29
 576:	cf 91       	pop	r28
 578:	1f 91       	pop	r17
 57a:	08 95       	ret

0000057c <process_cmd_izuvo_mode>:
}

void process_cmd_izuvo_mode(unsigned char iMode)
{

	mZuVoMode = iMode;
 57c:	80 93 fb 01 	sts	0x01FB, r24
	u_puts("Mode = ");	
	u_putHexByte(tMode,' ');
	u_delay(10);
	u_puts("\r\n");	
*/
	u_putHexByte(mZuVoMode,' ');
 580:	80 91 fb 01 	lds	r24, 0x01FB
 584:	60 e2       	ldi	r22, 0x20	; 32
 586:	20 d1       	rcall	.+576    	; 0x7c8 <u_putHexByte>
	u_delay(10);
 588:	8a e0       	ldi	r24, 0x0A	; 10
 58a:	90 e0       	ldi	r25, 0x00	; 0
 58c:	cf d0       	rcall	.+414    	; 0x72c <u_delay>
	u_puts("\r\n");	
 58e:	8b eb       	ldi	r24, 0xBB	; 187
 590:	90 e0       	ldi	r25, 0x00	; 0
 592:	42 d1       	rcall	.+644    	; 0x818 <u_puts>

	switch (mZuVoMode)
 594:	80 91 fb 01 	lds	r24, 0x01FB
		default:
			break;
	}


}
 598:	08 95       	ret

0000059a <process_cmd_ifaucet>:


//izuvo_update.sh ZFFFF000000000012001D0

void process_cmd_ifaucet(char *sptr, unsigned char len)
{
 59a:	0f 93       	push	r16
 59c:	1f 93       	push	r17
 59e:	cf 93       	push	r28
 5a0:	df 93       	push	r29
 5a2:	ec 01       	movw	r28, r24
 5a4:	06 2f       	mov	r16, r22
	unsigned char i;
	unsigned int tmp;


	if (len == 0x24)
 5a6:	64 32       	cpi	r22, 0x24	; 36
 5a8:	31 f4       	brne	.+12     	; 0x5b6 <process_cmd_ifaucet+0x1c>
	{
//		u_puts("Valid command length\r\n");	
		tmp = u_asc2uint(2,	sptr + 30);
 5aa:	6e 96       	adiw	r28, 0x1e	; 30
 5ac:	82 e0       	ldi	r24, 0x02	; 2
 5ae:	be 01       	movw	r22, r28
 5b0:	e3 d0       	rcall	.+454    	; 0x778 <u_asc2uint>
		process_cmd_izuvo_mode(tmp & 0xff);
 5b2:	e4 df       	rcall	.-56     	; 0x57c <process_cmd_izuvo_mode>
 5b4:	17 c0       	rjmp	.+46     	; 0x5e4 <process_cmd_ifaucet+0x4a>
	}
	else
	{
		u_puts("iFaucet command 0x");	
 5b6:	8e eb       	ldi	r24, 0xBE	; 190
 5b8:	90 e0       	ldi	r25, 0x00	; 0
 5ba:	2e d1       	rcall	.+604    	; 0x818 <u_puts>
		u_putHexByte(len, ' ');
 5bc:	80 2f       	mov	r24, r16
 5be:	60 e2       	ldi	r22, 0x20	; 32
 5c0:	03 d1       	rcall	.+518    	; 0x7c8 <u_putHexByte>
		u_puts("/0x24 \r\n");
 5c2:	81 ed       	ldi	r24, 0xD1	; 209
 5c4:	90 e0       	ldi	r25, 0x00	; 0
 5c6:	28 d1       	rcall	.+592    	; 0x818 <u_puts>

		u_puts("Invalid Length ");	
 5c8:	8a ed       	ldi	r24, 0xDA	; 218
 5ca:	90 e0       	ldi	r25, 0x00	; 0
 5cc:	25 d1       	rcall	.+586    	; 0x818 <u_puts>
 5ce:	11 e0       	ldi	r17, 0x01	; 1
 5d0:	03 c0       	rjmp	.+6      	; 0x5d8 <process_cmd_ifaucet+0x3e>
		for (i=1; i<len; i++)
		{
			tmp = *(sptr+i);
			u_putch(tmp);
 5d2:	88 81       	ld	r24, Y
 5d4:	1d d1       	rcall	.+570    	; 0x810 <u_putch>
		u_puts("iFaucet command 0x");	
		u_putHexByte(len, ' ');
		u_puts("/0x24 \r\n");

		u_puts("Invalid Length ");	
		for (i=1; i<len; i++)
 5d6:	1f 5f       	subi	r17, 0xFF	; 255
 5d8:	21 96       	adiw	r28, 0x01	; 1
 5da:	10 17       	cp	r17, r16
 5dc:	d0 f3       	brcs	.-12     	; 0x5d2 <process_cmd_ifaucet+0x38>
		{
			tmp = *(sptr+i);
			u_putch(tmp);
		}
		u_puts("\r\n");
 5de:	8b eb       	ldi	r24, 0xBB	; 187
 5e0:	90 e0       	ldi	r25, 0x00	; 0
 5e2:	1a d1       	rcall	.+564    	; 0x818 <u_puts>
	}
}
 5e4:	df 91       	pop	r29
 5e6:	cf 91       	pop	r28
 5e8:	1f 91       	pop	r17
 5ea:	0f 91       	pop	r16
 5ec:	08 95       	ret

000005ee <process_cmd_hal>:
	}

}
*/
void process_cmd_hal(unsigned char *sptr, unsigned char len)
{
 5ee:	0f 93       	push	r16
 5f0:	1f 93       	push	r17
 5f2:	cf 93       	push	r28
 5f4:	df 93       	push	r29
 5f6:	ec 01       	movw	r28, r24
 5f8:	06 2f       	mov	r16, r22

	unsigned char i,j;
	unsigned char tCmd;
	char tmp;

	tCmd=u_toupper(*sptr);
 5fa:	88 81       	ld	r24, Y
 5fc:	17 d1       	rcall	.+558    	; 0x82c <u_toupper>
 5fe:	28 2f       	mov	r18, r24
	mCmdCnt ++;
 600:	80 91 ed 01 	lds	r24, 0x01ED
 604:	90 91 ee 01 	lds	r25, 0x01EE
 608:	01 96       	adiw	r24, 0x01	; 1
 60a:	90 93 ee 01 	sts	0x01EE, r25
 60e:	80 93 ed 01 	sts	0x01ED, r24
	switch (tCmd)
 612:	26 35       	cpi	r18, 0x56	; 86
 614:	a1 f0       	breq	.+40     	; 0x63e <process_cmd_hal+0x50>
 616:	27 35       	cpi	r18, 0x57	; 87
 618:	28 f4       	brcc	.+10     	; 0x624 <process_cmd_hal+0x36>
 61a:	25 34       	cpi	r18, 0x45	; 69
 61c:	59 f1       	breq	.+86     	; 0x674 <process_cmd_hal+0x86>
 61e:	24 35       	cpi	r18, 0x54	; 84
 620:	d9 f5       	brne	.+118    	; 0x698 <process_cmd_hal+0xaa>
 622:	2c c0       	rjmp	.+88     	; 0x67c <process_cmd_hal+0x8e>
 624:	2a 35       	cpi	r18, 0x5A	; 90
 626:	11 f1       	breq	.+68     	; 0x66c <process_cmd_hal+0x7e>
 628:	2e 37       	cpi	r18, 0x7E	; 126
 62a:	b1 f5       	brne	.+108    	; 0x698 <process_cmd_hal+0xaa>
 62c:	11 e0       	ldi	r17, 0x01	; 1
 62e:	03 c0       	rjmp	.+6      	; 0x636 <process_cmd_hal+0x48>
	{
		case '~':	// Echo message back
			for (i=1; i<len; i++)
			{
				tmp = *(sptr+i);
				u_putch(tmp);
 630:	88 81       	ld	r24, Y
 632:	ee d0       	rcall	.+476    	; 0x810 <u_putch>
	tCmd=u_toupper(*sptr);
	mCmdCnt ++;
	switch (tCmd)
	{
		case '~':	// Echo message back
			for (i=1; i<len; i++)
 634:	1f 5f       	subi	r17, 0xFF	; 255
 636:	21 96       	adiw	r28, 0x01	; 1
 638:	10 17       	cp	r17, r16
 63a:	d0 f3       	brcs	.-12     	; 0x630 <process_cmd_hal+0x42>
 63c:	2a c0       	rjmp	.+84     	; 0x692 <process_cmd_hal+0xa4>
			u_putHexWord(mCmdCnt);u_puts(":");
			u_puts("\r\n");
			break;
*/
		case 'V':	// Version
			u_puts(LinuxCmd);
 63e:	8a ee       	ldi	r24, 0xEA	; 234
 640:	90 e0       	ldi	r25, 0x00	; 0
 642:	ea d0       	rcall	.+468    	; 0x818 <u_puts>
			u_puts("'V' ");
 644:	8d ef       	ldi	r24, 0xFD	; 253
 646:	90 e0       	ldi	r25, 0x00	; 0
 648:	e7 d0       	rcall	.+462    	; 0x818 <u_puts>
			u_puts(VERSION);
 64a:	82 e0       	ldi	r24, 0x02	; 2
 64c:	91 e0       	ldi	r25, 0x01	; 1
 64e:	e4 d0       	rcall	.+456    	; 0x818 <u_puts>
			u_puts(" |");
 650:	86 e2       	ldi	r24, 0x26	; 38
 652:	91 e0       	ldi	r25, 0x01	; 1
 654:	e1 d0       	rcall	.+450    	; 0x818 <u_puts>
			u_putHexByte(mTestMode,'|');
 656:	80 91 fa 01 	lds	r24, 0x01FA
 65a:	6c e7       	ldi	r22, 0x7C	; 124
 65c:	b5 d0       	rcall	.+362    	; 0x7c8 <u_putHexByte>
			u_putHexByte(mZuVoMode,'|');
 65e:	80 91 fb 01 	lds	r24, 0x01FB
 662:	6c e7       	ldi	r22, 0x7C	; 124
 664:	b1 d0       	rcall	.+354    	; 0x7c8 <u_putHexByte>
			u_puts("'\r\n");
 666:	89 e2       	ldi	r24, 0x29	; 41
 668:	91 e0       	ldi	r25, 0x01	; 1
 66a:	15 c0       	rjmp	.+42     	; 0x696 <process_cmd_hal+0xa8>
//			mZuvoAuto ^= 0x01;
//			izuvo_init_capture_pulse();
//			u_puts("ZuVo ");
//			u_putHexByte(mZuvoAuto,' ');
//			u_puts("\r\n");
			process_cmd_ifaucet((char*)sptr, len);
 66c:	ce 01       	movw	r24, r28
 66e:	60 2f       	mov	r22, r16
 670:	94 df       	rcall	.-216    	; 0x59a <process_cmd_ifaucet>
 672:	12 c0       	rjmp	.+36     	; 0x698 <process_cmd_hal+0xaa>
			break;

		case 'E': 	// iZuVo echo command
			process_cmd_izuvo((char*)sptr, len);
 674:	ce 01       	movw	r24, r28
 676:	60 2f       	mov	r22, r16
 678:	41 df       	rcall	.-382    	; 0x4fc <process_cmd_izuvo>
 67a:	0e c0       	rjmp	.+28     	; 0x698 <process_cmd_hal+0xaa>
			break;


		case 'T': 	// Test Command
			u_puts("Test :");
 67c:	8d e2       	ldi	r24, 0x2D	; 45
 67e:	91 e0       	ldi	r25, 0x01	; 1
 680:	cb d0       	rcall	.+406    	; 0x818 <u_puts>
 682:	11 e0       	ldi	r17, 0x01	; 1
 684:	03 c0       	rjmp	.+6      	; 0x68c <process_cmd_hal+0x9e>
			for (i=1; i<len; i++)
			{
				tmp = *(sptr+i);
				u_putch(tmp);
 686:	88 81       	ld	r24, Y
 688:	c3 d0       	rcall	.+390    	; 0x810 <u_putch>
			break;


		case 'T': 	// Test Command
			u_puts("Test :");
			for (i=1; i<len; i++)
 68a:	1f 5f       	subi	r17, 0xFF	; 255
 68c:	21 96       	adiw	r28, 0x01	; 1
 68e:	10 17       	cp	r17, r16
 690:	d0 f3       	brcs	.-12     	; 0x686 <process_cmd_hal+0x98>
			{
				tmp = *(sptr+i);
				u_putch(tmp);
			}
			u_puts("\r\n");
 692:	8b eb       	ldi	r24, 0xBB	; 187
 694:	90 e0       	ldi	r25, 0x00	; 0
 696:	c0 d0       	rcall	.+384    	; 0x818 <u_puts>
			break;


	}
}
 698:	df 91       	pop	r29
 69a:	cf 91       	pop	r28
 69c:	1f 91       	pop	r17
 69e:	0f 91       	pop	r16
 6a0:	08 95       	ret

000006a2 <process_cmd>:
void process_cmd(void)
{
	unsigned char index;

//	if (mCmdQ[0]>=0x80)	// Message available for process
	if (mCmdQFlag==1)	// Message available for process
 6a2:	80 91 ec 01 	lds	r24, 0x01EC
 6a6:	81 30       	cpi	r24, 0x01	; 1
 6a8:	51 f4       	brne	.+20     	; 0x6be <process_cmd+0x1c>
				process_cmd_hal(&mCmdQ[2],index-2);

		}
*/

		process_cmd_hal(&mCmdQ[2],index-2);
 6aa:	60 91 08 02 	lds	r22, 0x0208
 6ae:	62 50       	subi	r22, 0x02	; 2
 6b0:	8a e0       	ldi	r24, 0x0A	; 10
 6b2:	92 e0       	ldi	r25, 0x02	; 2
 6b4:	9c df       	rcall	.-200    	; 0x5ee <process_cmd_hal>
		mCmdQ[0]=0;		
 6b6:	10 92 08 02 	sts	0x0208, r1
		mCmdQFlag=0;
 6ba:	10 92 ec 01 	sts	0x01EC, r1
 6be:	08 95       	ret

000006c0 <init_system>:
}

void init_system(void)
{
	unsigned char i;
	u_puts(EXIT);
 6c0:	84 e3       	ldi	r24, 0x34	; 52
 6c2:	91 e0       	ldi	r25, 0x01	; 1
 6c4:	a9 d0       	rcall	.+338    	; 0x818 <u_puts>
 6c6:	ed e5       	ldi	r30, 0x5D	; 93
 6c8:	f1 e0       	ldi	r31, 0x01	; 1
 6ca:	a9 e0       	ldi	r26, 0x09	; 9
 6cc:	b2 e0       	ldi	r27, 0x02	; 2
	for (i=0; i<sizeof(T_PRONTO_CODE); i++)
	{
		mCmdQ[i+1]=T_PRONTO_CODE[i];
 6ce:	81 91       	ld	r24, Z+
 6d0:	8d 93       	st	X+, r24

void init_system(void)
{
	unsigned char i;
	u_puts(EXIT);
	for (i=0; i<sizeof(T_PRONTO_CODE); i++)
 6d2:	81 e0       	ldi	r24, 0x01	; 1
 6d4:	e4 3b       	cpi	r30, 0xB4	; 180
 6d6:	f8 07       	cpc	r31, r24
 6d8:	d1 f7       	brne	.-12     	; 0x6ce <init_system+0xe>
	{
		mCmdQ[i+1]=T_PRONTO_CODE[i];
	}	
	mCmdQ[0] = sizeof(T_PRONTO_CODE)-1;
 6da:	86 e5       	ldi	r24, 0x56	; 86
 6dc:	80 93 08 02 	sts	0x0208, r24
	mCmdQFlag = 1;
 6e0:	81 e0       	ldi	r24, 0x01	; 1
 6e2:	80 93 ec 01 	sts	0x01EC, r24
//	i = izuvo_search_header();

//	mZuvoAuto = 1;
//	izuvo_init_capture_pulse();

	i=eeprom_read_byte(0x00);	
 6e6:	80 e0       	ldi	r24, 0x00	; 0
 6e8:	90 e0       	ldi	r25, 0x00	; 0
 6ea:	a7 d0       	rcall	.+334    	; 0x83a <__eerd_byte_m8>
	mTestMode = (i+1) & 0x03;
 6ec:	8f 5f       	subi	r24, 0xFF	; 255
 6ee:	83 70       	andi	r24, 0x03	; 3
 6f0:	80 93 fa 01 	sts	0x01FA, r24
	eeprom_write_byte(0x00,mTestMode);
 6f4:	60 91 fa 01 	lds	r22, 0x01FA
 6f8:	80 e0       	ldi	r24, 0x00	; 0
 6fa:	90 e0       	ldi	r25, 0x00	; 0
 6fc:	a6 d0       	rcall	.+332    	; 0x84a <__eewr_byte_m8>

	izuvo_test_mode	(mTestMode);
 6fe:	80 91 fa 01 	lds	r24, 0x01FA
 702:	30 dd       	rcall	.-1440   	; 0x164 <izuvo_test_mode>

	u_puts(VERSION);
 704:	82 e0       	ldi	r24, 0x02	; 2
 706:	91 e0       	ldi	r25, 0x01	; 1
 708:	87 d0       	rcall	.+270    	; 0x818 <u_puts>
	u_putHexByte(mTestMode,' ');
 70a:	80 91 fa 01 	lds	r24, 0x01FA
 70e:	60 e2       	ldi	r22, 0x20	; 32
 710:	5b d0       	rcall	.+182    	; 0x7c8 <u_putHexByte>
	u_puts("\r\n");
 712:	8b eb       	ldi	r24, 0xBB	; 187
 714:	90 e0       	ldi	r25, 0x00	; 0
 716:	80 d0       	rcall	.+256    	; 0x818 <u_puts>

}
 718:	08 95       	ret

0000071a <main>:

extern unsigned char mTimer0_Flag;

int main (void)
{
	init_hardware();	// init Hardware
 71a:	fe dc       	rcall	.-1540   	; 0x118 <init_hardware>
	init_system();		// init system parameter
 71c:	d1 df       	rcall	.-94     	; 0x6c0 <init_system>
	sei();				// Enable Interrupt
 71e:	78 94       	sei

	u_puts(VERSION);
 720:	86 eb       	ldi	r24, 0xB6	; 182
 722:	91 e0       	ldi	r25, 0x01	; 1
 724:	79 d0       	rcall	.+242    	; 0x818 <u_puts>

	while (1)			// Start Task
	{
		process_tmr();	// process timer event			
 726:	3a de       	rcall	.-908    	; 0x39c <process_tmr>
		process_cmd();	// process uart command
 728:	bc df       	rcall	.-136    	; 0x6a2 <process_cmd>
 72a:	fd cf       	rjmp	.-6      	; 0x726 <main+0xc>

0000072c <u_delay>:

	while(iDelay--){ 
	x=130; 		// 8MHz Clock
	while(x--); 
	} 
} 
 72c:	08 95       	ret

0000072e <u_abs>:
// Notes			:
//----------------------------------------------------------------------------

INT16U u_abs(INT16S a)
{
	if(a < 0)
 72e:	97 ff       	sbrs	r25, 7
 730:	05 c0       	rjmp	.+10     	; 0x73c <u_abs+0xe>
		return -a;
 732:	22 27       	eor	r18, r18
 734:	33 27       	eor	r19, r19
 736:	28 1b       	sub	r18, r24
 738:	39 0b       	sbc	r19, r25
 73a:	01 c0       	rjmp	.+2      	; 0x73e <u_abs+0x10>
	return (INT16U) a;
 73c:	9c 01       	movw	r18, r24
}
 73e:	c9 01       	movw	r24, r18
 740:	08 95       	ret

00000742 <u_sign>:
// Notes			    :
//----------------------------------------------------------------------------

INT16S u_sign(INT16S x) 
{
	if (x<0) return (-1);
 742:	97 fd       	sbrc	r25, 7
 744:	03 c0       	rjmp	.+6      	; 0x74c <u_sign+0xa>
 746:	21 e0       	ldi	r18, 0x01	; 1
 748:	30 e0       	ldi	r19, 0x00	; 0
 74a:	02 c0       	rjmp	.+4      	; 0x750 <u_sign+0xe>
 74c:	2f ef       	ldi	r18, 0xFF	; 255
 74e:	3f ef       	ldi	r19, 0xFF	; 255
	return(1);
}
 750:	c9 01       	movw	r24, r18
 752:	08 95       	ret

00000754 <u_hex2dec>:
//                     
// Notes			 :
//----------------------------------------------------------------------------

INT8U u_hex2dec(INT8U c) 
{
 754:	98 2f       	mov	r25, r24
	if ((c>='0') && (c<='9')) 
 756:	80 53       	subi	r24, 0x30	; 48
 758:	8a 30       	cpi	r24, 0x0A	; 10
 75a:	68 f0       	brcs	.+26     	; 0x776 <u_hex2dec+0x22>
    {
		return (c-0x30);
	}else if ((c>='A') && (c<='F')) 
 75c:	81 51       	subi	r24, 0x11	; 17
 75e:	86 30       	cpi	r24, 0x06	; 6
 760:	10 f4       	brcc	.+4      	; 0x766 <u_hex2dec+0x12>
    {
		return (c-'A'+10);
 762:	86 5f       	subi	r24, 0xF6	; 246
 764:	08 95       	ret
	}else if ((c>='a') && (c<='f')) 
 766:	89 2f       	mov	r24, r25
 768:	81 56       	subi	r24, 0x61	; 97
 76a:	86 30       	cpi	r24, 0x06	; 6
 76c:	10 f0       	brcs	.+4      	; 0x772 <u_hex2dec+0x1e>
 76e:	80 e0       	ldi	r24, 0x00	; 0
 770:	08 95       	ret
    {
		return (c-'a'+10);
 772:	89 2f       	mov	r24, r25
 774:	87 55       	subi	r24, 0x57	; 87
	}

	return 0;
}
 776:	08 95       	ret

00000778 <u_asc2uint>:
// Date created		: 16 May 2002
// Description		: Convert alphanumeric string to hex. value
// Notes				:
//----------------------------------------------------------------------------
INT16U u_asc2uint(INT8U len, INT8U *sptr)
{
 778:	ef 92       	push	r14
 77a:	ff 92       	push	r15
 77c:	0f 93       	push	r16
 77e:	1f 93       	push	r17
 780:	cf 93       	push	r28
 782:	df 93       	push	r29
 784:	e8 2e       	mov	r14, r24
 786:	8b 01       	movw	r16, r22
	INT8U i;
	INT16U temp;

	temp = u_hex2dec(*sptr++);
 788:	fb 01       	movw	r30, r22
 78a:	80 81       	ld	r24, Z
 78c:	e3 df       	rcall	.-58     	; 0x754 <u_hex2dec>
 78e:	48 2f       	mov	r20, r24
 790:	50 e0       	ldi	r21, 0x00	; 0
 792:	f0 2e       	mov	r15, r16
 794:	e8 01       	movw	r28, r16
 796:	0b c0       	rjmp	.+22     	; 0x7ae <u_asc2uint+0x36>
	for(i = 1; i < len; i++)
		temp = temp * 0x10 + u_hex2dec(*sptr++);
 798:	8a 01       	movw	r16, r20
 79a:	84 e0       	ldi	r24, 0x04	; 4
 79c:	00 0f       	add	r16, r16
 79e:	11 1f       	adc	r17, r17
 7a0:	8a 95       	dec	r24
 7a2:	e1 f7       	brne	.-8      	; 0x79c <u_asc2uint+0x24>
 7a4:	88 81       	ld	r24, Y
 7a6:	d6 df       	rcall	.-84     	; 0x754 <u_hex2dec>
 7a8:	a8 01       	movw	r20, r16
 7aa:	48 0f       	add	r20, r24
 7ac:	51 1d       	adc	r21, r1
 7ae:	21 96       	adiw	r28, 0x01	; 1
{
	INT8U i;
	INT16U temp;

	temp = u_hex2dec(*sptr++);
	for(i = 1; i < len; i++)
 7b0:	9e 01       	movw	r18, r28
 7b2:	2f 19       	sub	r18, r15
 7b4:	2e 15       	cp	r18, r14
 7b6:	80 f3       	brcs	.-32     	; 0x798 <u_asc2uint+0x20>
		temp = temp * 0x10 + u_hex2dec(*sptr++);
	return (temp);
}
 7b8:	ca 01       	movw	r24, r20
 7ba:	df 91       	pop	r29
 7bc:	cf 91       	pop	r28
 7be:	1f 91       	pop	r17
 7c0:	0f 91       	pop	r16
 7c2:	ff 90       	pop	r15
 7c4:	ef 90       	pop	r14
 7c6:	08 95       	ret

000007c8 <u_putHexByte>:
//----------------------------------------------------------------------------

void u_putHexByte(INT8U c, INT8U t) 
{
	static const char STR_HEX[]="0123456789ABCDEF";
	u_putch(STR_HEX[(c&0xF0)>>4]);
 7c8:	e8 2f       	mov	r30, r24
 7ca:	e2 95       	swap	r30
 7cc:	ef 70       	andi	r30, 0x0F	; 15
 7ce:	f0 e0       	ldi	r31, 0x00	; 0
 7d0:	e6 52       	subi	r30, 0x26	; 38
 7d2:	fe 4f       	sbci	r31, 0xFE	; 254
 7d4:	e0 81       	ld	r30, Z
void u_putch(INT8U abyte) 
{

//	UCSRB |= 0x08; // enable transmitter

    while (!(UCSRA & 0x20))
 7d6:	5d 9b       	sbis	0x0b, 5	; 11
 7d8:	fe cf       	rjmp	.-4      	; 0x7d6 <u_putHexByte+0xe>
	{
		// do nothing
	}
	
    UDR = abyte;
 7da:	ec b9       	out	0x0c, r30	; 12

void u_putHexByte(INT8U c, INT8U t) 
{
	static const char STR_HEX[]="0123456789ABCDEF";
	u_putch(STR_HEX[(c&0xF0)>>4]);
	u_putch(STR_HEX[c&0x0F]);
 7dc:	e8 2f       	mov	r30, r24
 7de:	f0 e0       	ldi	r31, 0x00	; 0
 7e0:	ef 70       	andi	r30, 0x0F	; 15
 7e2:	f0 70       	andi	r31, 0x00	; 0
 7e4:	e6 52       	subi	r30, 0x26	; 38
 7e6:	fe 4f       	sbci	r31, 0xFE	; 254
 7e8:	80 81       	ld	r24, Z
void u_putch(INT8U abyte) 
{

//	UCSRB |= 0x08; // enable transmitter

    while (!(UCSRA & 0x20))
 7ea:	5d 9b       	sbis	0x0b, 5	; 11
 7ec:	fe cf       	rjmp	.-4      	; 0x7ea <u_putHexByte+0x22>
	{
		// do nothing
	}
	
    UDR = abyte;
 7ee:	8c b9       	out	0x0c, r24	; 12
{
	static const char STR_HEX[]="0123456789ABCDEF";
	u_putch(STR_HEX[(c&0xF0)>>4]);
	u_putch(STR_HEX[c&0x0F]);

    if (t != 0)
 7f0:	66 23       	and	r22, r22
 7f2:	19 f0       	breq	.+6      	; 0x7fa <u_putHexByte+0x32>
void u_putch(INT8U abyte) 
{

//	UCSRB |= 0x08; // enable transmitter

    while (!(UCSRA & 0x20))
 7f4:	5d 9b       	sbis	0x0b, 5	; 11
 7f6:	fe cf       	rjmp	.-4      	; 0x7f4 <u_putHexByte+0x2c>
	{
		// do nothing
	}
	
    UDR = abyte;
 7f8:	6c b9       	out	0x0c, r22	; 12
 7fa:	08 95       	ret

000007fc <u_putHexWord>:
//                     
// Notes			:
//----------------------------------------------------------------------------

void u_putHexWord(INT16U w)
{	
 7fc:	1f 93       	push	r17
 7fe:	18 2f       	mov	r17, r24
    u_putHexByte((INT8U) (w>>8),0);
 800:	89 2f       	mov	r24, r25
 802:	60 e0       	ldi	r22, 0x00	; 0
 804:	e1 df       	rcall	.-62     	; 0x7c8 <u_putHexByte>
	u_putHexByte((INT8U) (w & 0xff),0);
 806:	81 2f       	mov	r24, r17
 808:	60 e0       	ldi	r22, 0x00	; 0
 80a:	de df       	rcall	.-68     	; 0x7c8 <u_putHexByte>
//    u_putch(' ');
}
 80c:	1f 91       	pop	r17
 80e:	08 95       	ret

00000810 <u_putch>:
void u_putch(INT8U abyte) 
{

//	UCSRB |= 0x08; // enable transmitter

    while (!(UCSRA & 0x20))
 810:	5d 9b       	sbis	0x0b, 5	; 11
 812:	fe cf       	rjmp	.-4      	; 0x810 <u_putch>
	{
		// do nothing
	}
	
    UDR = abyte;
 814:	8c b9       	out	0x0c, r24	; 12

}
 816:	08 95       	ret

00000818 <u_puts>:
//                     
// Notes			:
//----------------------------------------------------------------------------

void u_puts( INT8U *sptr) 
{
 818:	fc 01       	movw	r30, r24
 81a:	04 c0       	rjmp	.+8      	; 0x824 <u_puts+0xc>
void u_putch(INT8U abyte) 
{

//	UCSRB |= 0x08; // enable transmitter

    while (!(UCSRA & 0x20))
 81c:	5d 9b       	sbis	0x0b, 5	; 11
 81e:	fe cf       	rjmp	.-4      	; 0x81c <u_puts+0x4>
//----------------------------------------------------------------------------

void u_puts( INT8U *sptr) 
{
	while(*sptr != 0) 
        u_putch(*sptr++);
 820:	31 96       	adiw	r30, 0x01	; 1
    while (!(UCSRA & 0x20))
	{
		// do nothing
	}
	
    UDR = abyte;
 822:	8c b9       	out	0x0c, r24	; 12
// Notes			:
//----------------------------------------------------------------------------

void u_puts( INT8U *sptr) 
{
	while(*sptr != 0) 
 824:	80 81       	ld	r24, Z
 826:	88 23       	and	r24, r24
 828:	c9 f7       	brne	.-14     	; 0x81c <u_puts+0x4>
        u_putch(*sptr++);
}
 82a:	08 95       	ret

0000082c <u_toupper>:

INT8U u_toupper(INT8U c)

{
 82c:	98 2f       	mov	r25, r24

	if ((c>='a') && (c<='z'))		//convert lower case to upper case
 82e:	81 56       	subi	r24, 0x61	; 97
 830:	8a 31       	cpi	r24, 0x1A	; 26
 832:	08 f4       	brcc	.+2      	; 0x836 <u_toupper+0xa>
		return(c-0x20);
 834:	90 52       	subi	r25, 0x20	; 32
	else
		return(c);

}
 836:	89 2f       	mov	r24, r25
 838:	08 95       	ret

0000083a <__eerd_byte_m8>:
 83a:	e1 99       	sbic	0x1c, 1	; 28
 83c:	fe cf       	rjmp	.-4      	; 0x83a <__eerd_byte_m8>
 83e:	9f bb       	out	0x1f, r25	; 31
 840:	8e bb       	out	0x1e, r24	; 30
 842:	e0 9a       	sbi	0x1c, 0	; 28
 844:	99 27       	eor	r25, r25
 846:	8d b3       	in	r24, 0x1d	; 29
 848:	08 95       	ret

0000084a <__eewr_byte_m8>:
 84a:	26 2f       	mov	r18, r22

0000084c <__eewr_r18_m8>:
 84c:	e1 99       	sbic	0x1c, 1	; 28
 84e:	fe cf       	rjmp	.-4      	; 0x84c <__eewr_r18_m8>
 850:	9f bb       	out	0x1f, r25	; 31
 852:	8e bb       	out	0x1e, r24	; 30
 854:	2d bb       	out	0x1d, r18	; 29
 856:	0f b6       	in	r0, 0x3f	; 63
 858:	f8 94       	cli
 85a:	e2 9a       	sbi	0x1c, 2	; 28
 85c:	e1 9a       	sbi	0x1c, 1	; 28
 85e:	0f be       	out	0x3f, r0	; 63
 860:	01 96       	adiw	r24, 0x01	; 1
 862:	08 95       	ret

00000864 <_exit>:
 864:	f8 94       	cli

00000866 <__stop_program>:
 866:	ff cf       	rjmp	.-2      	; 0x866 <__stop_program>
