
hab-remote.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001438  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000010e  00800060  00001438  000014cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000269  0080016e  0080016e  000015da  2**0
                  ALLOC
  3 .debug_aranges 00000080  00000000  00000000  000015da  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000400  00000000  00000000  0000165a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b2b  00000000  00000000  00001a5a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000386  00000000  00000000  00002585  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000dc2  00000000  00000000  0000290b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000260  00000000  00000000  000036d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000040e  00000000  00000000  00003930  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
       2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
       4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
       6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
       8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
       a:	02 c2       	rjmp	.+1028   	; 0x410 <__vector_5>
       c:	a9 c1       	rjmp	.+850    	; 0x360 <__vector_6>
       e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
      10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
      12:	4c c1       	rjmp	.+664    	; 0x2ac <__vector_9>
      14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
      16:	2d c0       	rjmp	.+90     	; 0x72 <__vector_11>
      18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
      1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
      1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
      1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
      20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
      22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
      24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
      26:	11 24       	eor	r1, r1
      28:	1f be       	out	0x3f, r1	; 63
      2a:	cf e5       	ldi	r28, 0x5F	; 95
      2c:	d4 e0       	ldi	r29, 0x04	; 4
      2e:	de bf       	out	0x3e, r29	; 62
      30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
      32:	11 e0       	ldi	r17, 0x01	; 1
      34:	a0 e6       	ldi	r26, 0x60	; 96
      36:	b0 e0       	ldi	r27, 0x00	; 0
      38:	e8 e3       	ldi	r30, 0x38	; 56
      3a:	f4 e1       	ldi	r31, 0x14	; 20
      3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
      3e:	05 90       	lpm	r0, Z+
      40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
      42:	ae 36       	cpi	r26, 0x6E	; 110
      44:	b1 07       	cpc	r27, r17
      46:	d9 f7       	brne	.-10     	; 0x3e <.do_copy_data_loop>

00000048 <__do_clear_bss>:
      48:	13 e0       	ldi	r17, 0x03	; 3
      4a:	ae e6       	ldi	r26, 0x6E	; 110
      4c:	b1 e0       	ldi	r27, 0x01	; 1
      4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
      50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
      52:	a7 3d       	cpi	r26, 0xD7	; 215
      54:	b1 07       	cpc	r27, r17
      56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
      58:	02 d0       	rcall	.+4      	; 0x5e <main>
      5a:	ec c9       	rjmp	.-3112   	; 0xfffff434 <__eeprom_end+0xff7ef434>

0000005c <__bad_interrupt>:
      5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <main>:
#include "utility.h"

extern unsigned char mTimer0_Flag;

int main (void)
{
      5e:	df 93       	push	r29
      60:	cf 93       	push	r28
      62:	cd b7       	in	r28, 0x3d	; 61
      64:	de b7       	in	r29, 0x3e	; 62
	init_hardware();	// init Hardware
      66:	27 d2       	rcall	.+1102   	; 0x4b6 <init_hardware>
	init_system();		// init system parameter
      68:	73 d2       	rcall	.+1254   	; 0x550 <init_system>
	sei();				// Enable Interrupt
      6a:	78 94       	sei

	while (1)			// Start Task
	{
		process_tmr();	// process timer event			
      6c:	9d d2       	rcall	.+1338   	; 0x5a8 <process_tmr>
		process_cmd();	// process uart command
      6e:	e6 d2       	rcall	.+1484   	; 0x63c <process_cmd>
      70:	fd cf       	rjmp	.-6      	; 0x6c <main+0xe>

00000072 <__vector_11>:
											// 1 - Send Pulse Function
											// 2 - Capture Pulse Function	

// Define Interrupt

SIGNAL(SIG_UART_RECV) { // USART RX interrupt
      72:	1f 92       	push	r1
      74:	0f 92       	push	r0
      76:	0f b6       	in	r0, 0x3f	; 63
      78:	0f 92       	push	r0
      7a:	11 24       	eor	r1, r1
      7c:	2f 93       	push	r18
      7e:	3f 93       	push	r19
      80:	4f 93       	push	r20
      82:	5f 93       	push	r21
      84:	6f 93       	push	r22
      86:	7f 93       	push	r23
      88:	8f 93       	push	r24
      8a:	9f 93       	push	r25
      8c:	af 93       	push	r26
      8e:	bf 93       	push	r27
      90:	ef 93       	push	r30
      92:	ff 93       	push	r31
      94:	df 93       	push	r29
      96:	cf 93       	push	r28
      98:	cd b7       	in	r28, 0x3d	; 61
      9a:	de b7       	in	r29, 0x3e	; 62

	ISR_UART_RECV();
      9c:	13 d0       	rcall	.+38     	; 0xc4 <ISR_UART_RECV>

}
      9e:	cf 91       	pop	r28
      a0:	df 91       	pop	r29
      a2:	ff 91       	pop	r31
      a4:	ef 91       	pop	r30
      a6:	bf 91       	pop	r27
      a8:	af 91       	pop	r26
      aa:	9f 91       	pop	r25
      ac:	8f 91       	pop	r24
      ae:	7f 91       	pop	r23
      b0:	6f 91       	pop	r22
      b2:	5f 91       	pop	r21
      b4:	4f 91       	pop	r20
      b6:	3f 91       	pop	r19
      b8:	2f 91       	pop	r18
      ba:	0f 90       	pop	r0
      bc:	0f be       	out	0x3f, r0	; 63
      be:	0f 90       	pop	r0
      c0:	1f 90       	pop	r1
      c2:	18 95       	reti

000000c4 <ISR_UART_RECV>:

void ISR_UART_RECV(void)
{
      c4:	df 93       	push	r29
      c6:	cf 93       	push	r28
      c8:	00 d0       	rcall	.+0      	; 0xca <ISR_UART_RECV+0x6>
      ca:	0f 92       	push	r0
      cc:	cd b7       	in	r28, 0x3d	; 61
      ce:	de b7       	in	r29, 0x3e	; 62

	 //uart has received a character in UDR 	 
	 unsigned char data;
//	 static unsigned char pdata;
	 data = UDR;
      d0:	ec e2       	ldi	r30, 0x2C	; 44
      d2:	f0 e0       	ldi	r31, 0x00	; 0
      d4:	80 81       	ld	r24, Z
      d6:	89 83       	std	Y+1, r24	; 0x01

	 PORTC ^= (1<<LED1);
      d8:	a5 e3       	ldi	r26, 0x35	; 53
      da:	b0 e0       	ldi	r27, 0x00	; 0
      dc:	e5 e3       	ldi	r30, 0x35	; 53
      de:	f0 e0       	ldi	r31, 0x00	; 0
      e0:	90 81       	ld	r25, Z
      e2:	81 e0       	ldi	r24, 0x01	; 1
      e4:	89 27       	eor	r24, r25
      e6:	8c 93       	st	X, r24

	 // Set CmdReady Flag 
	 if ((data=='\r') || (data=='\n')) 
      e8:	89 81       	ldd	r24, Y+1	; 0x01
      ea:	8d 30       	cpi	r24, 0x0D	; 13
      ec:	19 f0       	breq	.+6      	; 0xf4 <ISR_UART_RECV+0x30>
      ee:	89 81       	ldd	r24, Y+1	; 0x01
      f0:	8a 30       	cpi	r24, 0x0A	; 10
      f2:	c9 f5       	brne	.+114    	; 0x166 <ISR_UART_RECV+0xa2>
	 {
//	 	mCmdQ[0] |= 0x80;	
	 	mCmdQFlag = 1;	
      f4:	81 e0       	ldi	r24, 0x01	; 1
      f6:	80 93 6e 01 	sts	0x016E, r24
		// Ignore empty message
	 	if (mCmdQ[0] == 0x00)
      fa:	80 91 76 01 	lds	r24, 0x0176
      fe:	88 23       	and	r24, r24
     100:	19 f4       	brne	.+6      	; 0x108 <ISR_UART_RECV+0x44>
		{
			mCmdQFlag = 0x00;
     102:	10 92 6e 01 	sts	0x016E, r1
     106:	0e c0       	rjmp	.+28     	; 0x124 <ISR_UART_RECV+0x60>
		}
		else if ((mCmdQ[0] == 0x01) && (mCmdQ[1] == 0xff))	// Process message with ONE BYTE
     108:	80 91 76 01 	lds	r24, 0x0176
     10c:	81 30       	cpi	r24, 0x01	; 1
     10e:	51 f4       	brne	.+20     	; 0x124 <ISR_UART_RECV+0x60>
     110:	80 91 77 01 	lds	r24, 0x0177
     114:	8f 3f       	cpi	r24, 0xFF	; 255
     116:	31 f4       	brne	.+12     	; 0x124 <ISR_UART_RECV+0x60>
		{													// 0xff = Linux Login Reset
			mCmdQ[0] = 0x00;		
     118:	10 92 76 01 	sts	0x0176, r1
			mCmdQFlag = 0x00;
     11c:	10 92 6e 01 	sts	0x016E, r1
			mLinuxMode = 0x00;
     120:	10 92 d7 00 	sts	0x00D7, r1
		}

		if (mLinuxMode <=1)									// Ignor message when mLinux Mode <=1
     124:	80 91 d7 00 	lds	r24, 0x00D7
     128:	82 30       	cpi	r24, 0x02	; 2
     12a:	28 f4       	brcc	.+10     	; 0x136 <ISR_UART_RECV+0x72>
		{
	 		mCmdQ[0] = 0x00;	
     12c:	10 92 76 01 	sts	0x0176, r1
			mCmdQFlag = 0x00;
     130:	10 92 6e 01 	sts	0x016E, r1
     134:	38 c0       	rjmp	.+112    	; 0x1a6 <ISR_UART_RECV+0xe2>
		}
		else if ((mpUART != '~') | (mCmdQ[1] != '~'))		// Ignor message not started with and terminated by "~"
     136:	80 91 f6 01 	lds	r24, 0x01F6
     13a:	1b 82       	std	Y+3, r1	; 0x03
     13c:	8e 37       	cpi	r24, 0x7E	; 126
     13e:	11 f0       	breq	.+4      	; 0x144 <ISR_UART_RECV+0x80>
     140:	81 e0       	ldi	r24, 0x01	; 1
     142:	8b 83       	std	Y+3, r24	; 0x03
     144:	80 91 77 01 	lds	r24, 0x0177
     148:	1a 82       	std	Y+2, r1	; 0x02
     14a:	8e 37       	cpi	r24, 0x7E	; 126
     14c:	11 f0       	breq	.+4      	; 0x152 <ISR_UART_RECV+0x8e>
     14e:	91 e0       	ldi	r25, 0x01	; 1
     150:	9a 83       	std	Y+2, r25	; 0x02
     152:	8b 81       	ldd	r24, Y+3	; 0x03
     154:	9a 81       	ldd	r25, Y+2	; 0x02
     156:	89 2b       	or	r24, r25
     158:	88 23       	and	r24, r24
     15a:	29 f1       	breq	.+74     	; 0x1a6 <ISR_UART_RECV+0xe2>
		{
	 		mCmdQ[0] = 0x00;	
     15c:	10 92 76 01 	sts	0x0176, r1
			mCmdQFlag = 0x00;
     160:	10 92 6e 01 	sts	0x016E, r1
     164:	20 c0       	rjmp	.+64     	; 0x1a6 <ISR_UART_RECV+0xe2>
		}
	 }
	 else if (mCmdQ[0] < ((sizeof(mCmdQ))-1))	 
     166:	80 91 76 01 	lds	r24, 0x0176
     16a:	8f 37       	cpi	r24, 0x7F	; 127
     16c:	e0 f4       	brcc	.+56     	; 0x1a6 <ISR_UART_RECV+0xe2>
	 {
		 if ((mLinuxMode<=0x01) && (mpUART == ':') && data==' ')
     16e:	80 91 d7 00 	lds	r24, 0x00D7
     172:	82 30       	cpi	r24, 0x02	; 2
     174:	50 f4       	brcc	.+20     	; 0x18a <ISR_UART_RECV+0xc6>
     176:	80 91 f6 01 	lds	r24, 0x01F6
     17a:	8a 33       	cpi	r24, 0x3A	; 58
     17c:	31 f4       	brne	.+12     	; 0x18a <ISR_UART_RECV+0xc6>
     17e:	89 81       	ldd	r24, Y+1	; 0x01
     180:	80 32       	cpi	r24, 0x20	; 32
     182:	19 f4       	brne	.+6      	; 0x18a <ISR_UART_RECV+0xc6>
		 {
//			mCmdQ[0] |= 0x80;
			mCmdQFlag = 1;
     184:	81 e0       	ldi	r24, 0x01	; 1
     186:	80 93 6e 01 	sts	0x016E, r24
		 }
	 	 mCmdQ[0]++;
     18a:	80 91 76 01 	lds	r24, 0x0176
     18e:	8f 5f       	subi	r24, 0xFF	; 255
     190:	80 93 76 01 	sts	0x0176, r24
		 mCmdQ[mCmdQ[0]]=data;
     194:	80 91 76 01 	lds	r24, 0x0176
     198:	88 2f       	mov	r24, r24
     19a:	90 e0       	ldi	r25, 0x00	; 0
     19c:	fc 01       	movw	r30, r24
     19e:	ea 58       	subi	r30, 0x8A	; 138
     1a0:	fe 4f       	sbci	r31, 0xFE	; 254
     1a2:	89 81       	ldd	r24, Y+1	; 0x01
     1a4:	80 83       	st	Z, r24
	 }	

// 	 pdata = data;
	 mpUART = data;
     1a6:	89 81       	ldd	r24, Y+1	; 0x01
     1a8:	80 93 f6 01 	sts	0x01F6, r24


}
     1ac:	0f 90       	pop	r0
     1ae:	0f 90       	pop	r0
     1b0:	0f 90       	pop	r0
     1b2:	cf 91       	pop	r28
     1b4:	df 91       	pop	r29
     1b6:	08 95       	ret

000001b8 <POLL_UART_RECV>:

void POLL_UART_RECV(void)
{
     1b8:	df 93       	push	r29
     1ba:	cf 93       	push	r28
     1bc:	00 d0       	rcall	.+0      	; 0x1be <POLL_UART_RECV+0x6>
     1be:	0f 92       	push	r0
     1c0:	cd b7       	in	r28, 0x3d	; 61
     1c2:	de b7       	in	r29, 0x3e	; 62

 	 //uart has received a character in UDR 	 
	 unsigned char data;
//	 static unsigned char pdata;
	 data = UDR;
     1c4:	ec e2       	ldi	r30, 0x2C	; 44
     1c6:	f0 e0       	ldi	r31, 0x00	; 0
     1c8:	80 81       	ld	r24, Z
     1ca:	89 83       	std	Y+1, r24	; 0x01

	 PORTC ^= (1<<LED1);
     1cc:	a5 e3       	ldi	r26, 0x35	; 53
     1ce:	b0 e0       	ldi	r27, 0x00	; 0
     1d0:	e5 e3       	ldi	r30, 0x35	; 53
     1d2:	f0 e0       	ldi	r31, 0x00	; 0
     1d4:	90 81       	ld	r25, Z
     1d6:	81 e0       	ldi	r24, 0x01	; 1
     1d8:	89 27       	eor	r24, r25
     1da:	8c 93       	st	X, r24

	 // Set CmdReady Flag 
	 if ((data=='\r') || (data=='\n')) 
     1dc:	89 81       	ldd	r24, Y+1	; 0x01
     1de:	8d 30       	cpi	r24, 0x0D	; 13
     1e0:	19 f0       	breq	.+6      	; 0x1e8 <POLL_UART_RECV+0x30>
     1e2:	89 81       	ldd	r24, Y+1	; 0x01
     1e4:	8a 30       	cpi	r24, 0x0A	; 10
     1e6:	c9 f5       	brne	.+114    	; 0x25a <POLL_UART_RECV+0xa2>
	 {
//	 	mCmdQ[0] |= 0x80;	
	 	mCmdQFlag = 1;	
     1e8:	81 e0       	ldi	r24, 0x01	; 1
     1ea:	80 93 6e 01 	sts	0x016E, r24
		// Ignore empty message
	 	if (mCmdQ[0] == 0x00)
     1ee:	80 91 76 01 	lds	r24, 0x0176
     1f2:	88 23       	and	r24, r24
     1f4:	19 f4       	brne	.+6      	; 0x1fc <POLL_UART_RECV+0x44>
		{
			mCmdQFlag = 0x00;
     1f6:	10 92 6e 01 	sts	0x016E, r1
     1fa:	0e c0       	rjmp	.+28     	; 0x218 <POLL_UART_RECV+0x60>
		}
		else if ((mCmdQ[0] == 0x01) && (mCmdQ[1] == 0xff))	// Process message with ONE BYTE
     1fc:	80 91 76 01 	lds	r24, 0x0176
     200:	81 30       	cpi	r24, 0x01	; 1
     202:	51 f4       	brne	.+20     	; 0x218 <POLL_UART_RECV+0x60>
     204:	80 91 77 01 	lds	r24, 0x0177
     208:	8f 3f       	cpi	r24, 0xFF	; 255
     20a:	31 f4       	brne	.+12     	; 0x218 <POLL_UART_RECV+0x60>
		{													// 0xff = Linux Login Reset
			mCmdQ[0] = 0x00;		
     20c:	10 92 76 01 	sts	0x0176, r1
			mCmdQFlag = 0x00;
     210:	10 92 6e 01 	sts	0x016E, r1
			mLinuxMode = 0x00;
     214:	10 92 d7 00 	sts	0x00D7, r1
		}

		if (mLinuxMode <=1)									// Ignor message when mLinux Mode <=1
     218:	80 91 d7 00 	lds	r24, 0x00D7
     21c:	82 30       	cpi	r24, 0x02	; 2
     21e:	28 f4       	brcc	.+10     	; 0x22a <POLL_UART_RECV+0x72>
		{
	 		mCmdQ[0] = 0x00;	
     220:	10 92 76 01 	sts	0x0176, r1
			mCmdQFlag = 0x00;
     224:	10 92 6e 01 	sts	0x016E, r1
     228:	38 c0       	rjmp	.+112    	; 0x29a <POLL_UART_RECV+0xe2>
		}
		else if ((mpUART != '~') | (mCmdQ[1] != '~'))		// Ignor message not started with and terminated by "~"
     22a:	80 91 f6 01 	lds	r24, 0x01F6
     22e:	1b 82       	std	Y+3, r1	; 0x03
     230:	8e 37       	cpi	r24, 0x7E	; 126
     232:	11 f0       	breq	.+4      	; 0x238 <POLL_UART_RECV+0x80>
     234:	81 e0       	ldi	r24, 0x01	; 1
     236:	8b 83       	std	Y+3, r24	; 0x03
     238:	80 91 77 01 	lds	r24, 0x0177
     23c:	1a 82       	std	Y+2, r1	; 0x02
     23e:	8e 37       	cpi	r24, 0x7E	; 126
     240:	11 f0       	breq	.+4      	; 0x246 <POLL_UART_RECV+0x8e>
     242:	91 e0       	ldi	r25, 0x01	; 1
     244:	9a 83       	std	Y+2, r25	; 0x02
     246:	8b 81       	ldd	r24, Y+3	; 0x03
     248:	9a 81       	ldd	r25, Y+2	; 0x02
     24a:	89 2b       	or	r24, r25
     24c:	88 23       	and	r24, r24
     24e:	29 f1       	breq	.+74     	; 0x29a <POLL_UART_RECV+0xe2>
		{
	 		mCmdQ[0] = 0x00;	
     250:	10 92 76 01 	sts	0x0176, r1
			mCmdQFlag = 0x00;
     254:	10 92 6e 01 	sts	0x016E, r1
     258:	20 c0       	rjmp	.+64     	; 0x29a <POLL_UART_RECV+0xe2>
		}
	 }
	 else if (mCmdQ[0] < ((sizeof(mCmdQ))-1))	 
     25a:	80 91 76 01 	lds	r24, 0x0176
     25e:	8f 37       	cpi	r24, 0x7F	; 127
     260:	e0 f4       	brcc	.+56     	; 0x29a <POLL_UART_RECV+0xe2>
	 {
		 if ((mLinuxMode<=0x01) && (mpUART == ':') && data==' ')
     262:	80 91 d7 00 	lds	r24, 0x00D7
     266:	82 30       	cpi	r24, 0x02	; 2
     268:	50 f4       	brcc	.+20     	; 0x27e <POLL_UART_RECV+0xc6>
     26a:	80 91 f6 01 	lds	r24, 0x01F6
     26e:	8a 33       	cpi	r24, 0x3A	; 58
     270:	31 f4       	brne	.+12     	; 0x27e <POLL_UART_RECV+0xc6>
     272:	89 81       	ldd	r24, Y+1	; 0x01
     274:	80 32       	cpi	r24, 0x20	; 32
     276:	19 f4       	brne	.+6      	; 0x27e <POLL_UART_RECV+0xc6>
		 {
//			mCmdQ[0] |= 0x80;
			mCmdQFlag = 1;
     278:	81 e0       	ldi	r24, 0x01	; 1
     27a:	80 93 6e 01 	sts	0x016E, r24
		 }
	 	 mCmdQ[0]++;
     27e:	80 91 76 01 	lds	r24, 0x0176
     282:	8f 5f       	subi	r24, 0xFF	; 255
     284:	80 93 76 01 	sts	0x0176, r24
		 mCmdQ[mCmdQ[0]]=data;
     288:	80 91 76 01 	lds	r24, 0x0176
     28c:	88 2f       	mov	r24, r24
     28e:	90 e0       	ldi	r25, 0x00	; 0
     290:	fc 01       	movw	r30, r24
     292:	ea 58       	subi	r30, 0x8A	; 138
     294:	fe 4f       	sbci	r31, 0xFE	; 254
     296:	89 81       	ldd	r24, Y+1	; 0x01
     298:	80 83       	st	Z, r24
	 }	

// 	 pdata = data;
	 mpUART = data;
     29a:	89 81       	ldd	r24, Y+1	; 0x01
     29c:	80 93 f6 01 	sts	0x01F6, r24

}
     2a0:	0f 90       	pop	r0
     2a2:	0f 90       	pop	r0
     2a4:	0f 90       	pop	r0
     2a6:	cf 91       	pop	r28
     2a8:	df 91       	pop	r29
     2aa:	08 95       	ret

000002ac <__vector_9>:


// uses timer0 for base timer
// Interrupt for every 21.845333mS
SIGNAL (TIMER0_OVF_vect)	
{
     2ac:	1f 92       	push	r1
     2ae:	0f 92       	push	r0
     2b0:	0f b6       	in	r0, 0x3f	; 63
     2b2:	0f 92       	push	r0
     2b4:	11 24       	eor	r1, r1
     2b6:	2f 93       	push	r18
     2b8:	3f 93       	push	r19
     2ba:	4f 93       	push	r20
     2bc:	5f 93       	push	r21
     2be:	6f 93       	push	r22
     2c0:	7f 93       	push	r23
     2c2:	8f 93       	push	r24
     2c4:	9f 93       	push	r25
     2c6:	af 93       	push	r26
     2c8:	bf 93       	push	r27
     2ca:	ef 93       	push	r30
     2cc:	ff 93       	push	r31
     2ce:	df 93       	push	r29
     2d0:	cf 93       	push	r28
     2d2:	cd b7       	in	r28, 0x3d	; 61
     2d4:	de b7       	in	r29, 0x3e	; 62
	ISR_TIMER0_OVR();
     2d6:	13 d0       	rcall	.+38     	; 0x2fe <ISR_TIMER0_OVR>
}
     2d8:	cf 91       	pop	r28
     2da:	df 91       	pop	r29
     2dc:	ff 91       	pop	r31
     2de:	ef 91       	pop	r30
     2e0:	bf 91       	pop	r27
     2e2:	af 91       	pop	r26
     2e4:	9f 91       	pop	r25
     2e6:	8f 91       	pop	r24
     2e8:	7f 91       	pop	r23
     2ea:	6f 91       	pop	r22
     2ec:	5f 91       	pop	r21
     2ee:	4f 91       	pop	r20
     2f0:	3f 91       	pop	r19
     2f2:	2f 91       	pop	r18
     2f4:	0f 90       	pop	r0
     2f6:	0f be       	out	0x3f, r0	; 63
     2f8:	0f 90       	pop	r0
     2fa:	1f 90       	pop	r1
     2fc:	18 95       	reti

000002fe <ISR_TIMER0_OVR>:

void ISR_TIMER0_OVR (void)
{
     2fe:	df 93       	push	r29
     300:	cf 93       	push	r28
     302:	cd b7       	in	r28, 0x3d	; 61
     304:	de b7       	in	r29, 0x3e	; 62
	mTimer0_Cnt++;
     306:	80 91 72 01 	lds	r24, 0x0172
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	80 93 72 01 	sts	0x0172, r24
	if (mTimer0_Cnt>=9)	// 21.84533ms * 9 = 196.6ms
     310:	80 91 72 01 	lds	r24, 0x0172
     314:	89 30       	cpi	r24, 0x09	; 9
     316:	28 f0       	brcs	.+10     	; 0x322 <ISR_TIMER0_OVR+0x24>
	{
		mTimer0_Flag = 1;
     318:	81 e0       	ldi	r24, 0x01	; 1
     31a:	80 93 71 01 	sts	0x0171, r24
		mTimer0_Cnt =0;
     31e:	10 92 72 01 	sts	0x0172, r1
	}
}
     322:	cf 91       	pop	r28
     324:	df 91       	pop	r29
     326:	08 95       	ret

00000328 <POLL_TIMER0_OVR>:

void POLL_TIMER0_OVR(void)
{
     328:	df 93       	push	r29
     32a:	cf 93       	push	r28
     32c:	cd b7       	in	r28, 0x3d	; 61
     32e:	de b7       	in	r29, 0x3e	; 62

	TIFR |= 0x01;			// Clear TOV0 Flag
     330:	a8 e5       	ldi	r26, 0x58	; 88
     332:	b0 e0       	ldi	r27, 0x00	; 0
     334:	e8 e5       	ldi	r30, 0x58	; 88
     336:	f0 e0       	ldi	r31, 0x00	; 0
     338:	80 81       	ld	r24, Z
     33a:	81 60       	ori	r24, 0x01	; 1
     33c:	8c 93       	st	X, r24
	mTimer0_Cnt++;
     33e:	80 91 72 01 	lds	r24, 0x0172
     342:	8f 5f       	subi	r24, 0xFF	; 255
     344:	80 93 72 01 	sts	0x0172, r24
	if (mTimer0_Cnt>=9)	// 21.84533ms * 9 = 196.6ms
     348:	80 91 72 01 	lds	r24, 0x0172
     34c:	89 30       	cpi	r24, 0x09	; 9
     34e:	28 f0       	brcs	.+10     	; 0x35a <POLL_TIMER0_OVR+0x32>
	{
		mTimer0_Flag = 1;
     350:	81 e0       	ldi	r24, 0x01	; 1
     352:	80 93 71 01 	sts	0x0171, r24
		mTimer0_Cnt =0;
     356:	10 92 72 01 	sts	0x0172, r1
	}
}
     35a:	cf 91       	pop	r28
     35c:	df 91       	pop	r29
     35e:	08 95       	ret

00000360 <__vector_6>:


SIGNAL (SIG_OUTPUT_COMPARE1A)
{
     360:	1f 92       	push	r1
     362:	0f 92       	push	r0
     364:	0f b6       	in	r0, 0x3f	; 63
     366:	0f 92       	push	r0
     368:	11 24       	eor	r1, r1
     36a:	2f 93       	push	r18
     36c:	3f 93       	push	r19
     36e:	8f 93       	push	r24
     370:	9f 93       	push	r25
     372:	af 93       	push	r26
     374:	bf 93       	push	r27
     376:	ef 93       	push	r30
     378:	ff 93       	push	r31
     37a:	df 93       	push	r29
     37c:	cf 93       	push	r28
     37e:	cd b7       	in	r28, 0x3d	; 61
     380:	de b7       	in	r29, 0x3e	; 62

	mPulseCnt --;
     382:	80 91 19 02 	lds	r24, 0x0219
     386:	90 91 1a 02 	lds	r25, 0x021A
     38a:	01 97       	sbiw	r24, 0x01	; 1
     38c:	90 93 1a 02 	sts	0x021A, r25
     390:	80 93 19 02 	sts	0x0219, r24

	if (mPulseCnt==mPulse[1])
     394:	20 91 d5 03 	lds	r18, 0x03D5
     398:	30 91 d6 03 	lds	r19, 0x03D6
     39c:	80 91 19 02 	lds	r24, 0x0219
     3a0:	90 91 1a 02 	lds	r25, 0x021A
     3a4:	28 17       	cp	r18, r24
     3a6:	39 07       	cpc	r19, r25
     3a8:	a9 f4       	brne	.+42     	; 0x3d4 <__vector_6+0x74>
	{
		PORTB  &= ~(0x02);			// Set OC1A pin to "0"
     3aa:	a8 e3       	ldi	r26, 0x38	; 56
     3ac:	b0 e0       	ldi	r27, 0x00	; 0
     3ae:	e8 e3       	ldi	r30, 0x38	; 56
     3b0:	f0 e0       	ldi	r31, 0x00	; 0
     3b2:	80 81       	ld	r24, Z
     3b4:	8d 7f       	andi	r24, 0xFD	; 253
     3b6:	8c 93       	st	X, r24
		TCCR1A &= ~(0b11000000);	// Disconnect OC1A on compare
     3b8:	af e4       	ldi	r26, 0x4F	; 79
     3ba:	b0 e0       	ldi	r27, 0x00	; 0
     3bc:	ef e4       	ldi	r30, 0x4F	; 79
     3be:	f0 e0       	ldi	r31, 0x00	; 0
     3c0:	80 81       	ld	r24, Z
     3c2:	8f 73       	andi	r24, 0x3F	; 63
     3c4:	8c 93       	st	X, r24
		PORTC  &= ~(1 << LED3);		// Clear LED3
     3c6:	a5 e3       	ldi	r26, 0x35	; 53
     3c8:	b0 e0       	ldi	r27, 0x00	; 0
     3ca:	e5 e3       	ldi	r30, 0x35	; 53
     3cc:	f0 e0       	ldi	r31, 0x00	; 0
     3ce:	80 81       	ld	r24, Z
     3d0:	8b 7f       	andi	r24, 0xFB	; 251
     3d2:	8c 93       	st	X, r24
	}

	if (mPulseCnt==0)
     3d4:	80 91 19 02 	lds	r24, 0x0219
     3d8:	90 91 1a 02 	lds	r25, 0x021A
     3dc:	00 97       	sbiw	r24, 0x00	; 0
     3de:	49 f4       	brne	.+18     	; 0x3f2 <__vector_6+0x92>
	{
		mTxFlag = 0;
     3e0:	10 92 ae 03 	sts	0x03AE, r1
		TCCR1B &= 0b11111000;		// Stop Clock
     3e4:	ae e4       	ldi	r26, 0x4E	; 78
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	ee e4       	ldi	r30, 0x4E	; 78
     3ea:	f0 e0       	ldi	r31, 0x00	; 0
     3ec:	80 81       	ld	r24, Z
     3ee:	88 7f       	andi	r24, 0xF8	; 248
     3f0:	8c 93       	st	X, r24
	}

}
     3f2:	cf 91       	pop	r28
     3f4:	df 91       	pop	r29
     3f6:	ff 91       	pop	r31
     3f8:	ef 91       	pop	r30
     3fa:	bf 91       	pop	r27
     3fc:	af 91       	pop	r26
     3fe:	9f 91       	pop	r25
     400:	8f 91       	pop	r24
     402:	3f 91       	pop	r19
     404:	2f 91       	pop	r18
     406:	0f 90       	pop	r0
     408:	0f be       	out	0x3f, r0	; 63
     40a:	0f 90       	pop	r0
     40c:	1f 90       	pop	r1
     40e:	18 95       	reti

00000410 <__vector_5>:

SIGNAL (SIG_INPUT_CAPTURE1)
{
     410:	1f 92       	push	r1
     412:	0f 92       	push	r0
     414:	0f b6       	in	r0, 0x3f	; 63
     416:	0f 92       	push	r0
     418:	11 24       	eor	r1, r1
     41a:	2f 93       	push	r18
     41c:	3f 93       	push	r19
     41e:	8f 93       	push	r24
     420:	9f 93       	push	r25
     422:	ef 93       	push	r30
     424:	ff 93       	push	r31
     426:	df 93       	push	r29
     428:	cf 93       	push	r28
     42a:	0f 92       	push	r0
     42c:	cd b7       	in	r28, 0x3d	; 61
     42e:	de b7       	in	r29, 0x3e	; 62
	unsigned char tmp;
	mCapturePulse[mCaptureIndex] = ICR1;	// Capture Timer1
     430:	80 91 1b 02 	lds	r24, 0x021B
     434:	90 91 1c 02 	lds	r25, 0x021C
     438:	e6 e4       	ldi	r30, 0x46	; 70
     43a:	f0 e0       	ldi	r31, 0x00	; 0
     43c:	20 81       	ld	r18, Z
     43e:	31 81       	ldd	r19, Z+1	; 0x01
     440:	88 0f       	add	r24, r24
     442:	99 1f       	adc	r25, r25
     444:	fc 01       	movw	r30, r24
     446:	e3 5e       	subi	r30, 0xE3	; 227
     448:	fd 4f       	sbci	r31, 0xFD	; 253
     44a:	31 83       	std	Z+1, r19	; 0x01
     44c:	20 83       	st	Z, r18
	TCNT1 = 0x00;							// Set Timer1 = 0x00;
     44e:	ec e4       	ldi	r30, 0x4C	; 76
     450:	f0 e0       	ldi	r31, 0x00	; 0
     452:	11 82       	std	Z+1, r1	; 0x01
     454:	10 82       	st	Z, r1

//	TCCR1B ^= 0x01000000;					// Toggle Trigger Edge
	tmp = TCCR1B;
     456:	ee e4       	ldi	r30, 0x4E	; 78
     458:	f0 e0       	ldi	r31, 0x00	; 0
     45a:	80 81       	ld	r24, Z
     45c:	89 83       	std	Y+1, r24	; 0x01
	tmp ^= 0x40;
     45e:	99 81       	ldd	r25, Y+1	; 0x01
     460:	80 e4       	ldi	r24, 0x40	; 64
     462:	89 27       	eor	r24, r25
     464:	89 83       	std	Y+1, r24	; 0x01
	TCCR1B = tmp;							// Toggle Trigger Edge
     466:	ee e4       	ldi	r30, 0x4E	; 78
     468:	f0 e0       	ldi	r31, 0x00	; 0
     46a:	89 81       	ldd	r24, Y+1	; 0x01
     46c:	80 83       	st	Z, r24

	mCaptureIndex++;
     46e:	80 91 1b 02 	lds	r24, 0x021B
     472:	90 91 1c 02 	lds	r25, 0x021C
     476:	01 96       	adiw	r24, 0x01	; 1
     478:	90 93 1c 02 	sts	0x021C, r25
     47c:	80 93 1b 02 	sts	0x021B, r24
	if (mCaptureIndex > (sizeof(mCapturePulse)/2))
     480:	80 91 1b 02 	lds	r24, 0x021B
     484:	90 91 1c 02 	lds	r25, 0x021C
     488:	89 3c       	cpi	r24, 0xC9	; 201
     48a:	91 05       	cpc	r25, r1
     48c:	30 f0       	brcs	.+12     	; 0x49a <__stack+0x3b>
		mCaptureIndex = sizeof(mCapturePulse)/2;
     48e:	88 ec       	ldi	r24, 0xC8	; 200
     490:	90 e0       	ldi	r25, 0x00	; 0
     492:	90 93 1c 02 	sts	0x021C, r25
     496:	80 93 1b 02 	sts	0x021B, r24
}
     49a:	0f 90       	pop	r0
     49c:	cf 91       	pop	r28
     49e:	df 91       	pop	r29
     4a0:	ff 91       	pop	r31
     4a2:	ef 91       	pop	r30
     4a4:	9f 91       	pop	r25
     4a6:	8f 91       	pop	r24
     4a8:	3f 91       	pop	r19
     4aa:	2f 91       	pop	r18
     4ac:	0f 90       	pop	r0
     4ae:	0f be       	out	0x3f, r0	; 63
     4b0:	0f 90       	pop	r0
     4b2:	1f 90       	pop	r1
     4b4:	18 95       	reti

000004b6 <init_hardware>:



void init_hardware(void)
{
     4b6:	df 93       	push	r29
     4b8:	cf 93       	push	r28
     4ba:	cd b7       	in	r28, 0x3d	; 61
     4bc:	de b7       	in	r29, 0x3e	; 62

//	init UART

	UCSRA = 0x02; // U2X = 1
     4be:	eb e2       	ldi	r30, 0x2B	; 43
     4c0:	f0 e0       	ldi	r31, 0x00	; 0
     4c2:	82 e0       	ldi	r24, 0x02	; 2
     4c4:	80 83       	st	Z, r24
	UCSRB = 0x00;	
     4c6:	ea e2       	ldi	r30, 0x2A	; 42
     4c8:	f0 e0       	ldi	r31, 0x00	; 0
     4ca:	10 82       	st	Z, r1
	UCSRC = 0x86; // No Parity | 1 Stop Bit | 8 Data Bit
     4cc:	e0 e4       	ldi	r30, 0x40	; 64
     4ce:	f0 e0       	ldi	r31, 0x00	; 0
     4d0:	86 e8       	ldi	r24, 0x86	; 134
     4d2:	80 83       	st	Z, r24
	UBRRH = 0x00; // 115200bps @ 12.00MHz 0x4D=9600 0x33 = 115200
     4d4:	e0 e4       	ldi	r30, 0x40	; 64
     4d6:	f0 e0       	ldi	r31, 0x00	; 0
     4d8:	10 82       	st	Z, r1
	UBRRL = 0x0C; // 115200bps @ 12.00MHz 0x4D/9B=9600 ??/0x0C = 115200
     4da:	e9 e2       	ldi	r30, 0x29	; 41
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	8c e0       	ldi	r24, 0x0C	; 12
     4e0:	80 83       	st	Z, r24
	UCSRB = 0x98; // Enable Rx Interrupt, Rx/Tx PIN	
     4e2:	ea e2       	ldi	r30, 0x2A	; 42
     4e4:	f0 e0       	ldi	r31, 0x00	; 0
     4e6:	88 e9       	ldi	r24, 0x98	; 152
     4e8:	80 83       	st	Z, r24

	// Timer/Counter 0 initialization
	// Clock source: System Clock
	// Clock value: 125.000 kHz
	TCCR0=0x05;		// Clk/1024 = 12000000/1024 = 11718.75Hz
     4ea:	e3 e5       	ldi	r30, 0x53	; 83
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	85 e0       	ldi	r24, 0x05	; 5
     4f0:	80 83       	st	Z, r24
	TCNT0=0x00;
     4f2:	e2 e5       	ldi	r30, 0x52	; 82
     4f4:	f0 e0       	ldi	r31, 0x00	; 0
     4f6:	10 82       	st	Z, r1
	TIMSK |= 0x01;	// Turn ON Timer0 Interrup
     4f8:	a9 e5       	ldi	r26, 0x59	; 89
     4fa:	b0 e0       	ldi	r27, 0x00	; 0
     4fc:	e9 e5       	ldi	r30, 0x59	; 89
     4fe:	f0 e0       	ldi	r31, 0x00	; 0
     500:	80 81       	ld	r24, Z
     502:	81 60       	ori	r24, 0x01	; 1
     504:	8c 93       	st	X, r24


	//  prepare 36kHz for IR - Communication
	TCCR1A = 0b01001000;	// Toggle OC1A on compare
     506:	ef e4       	ldi	r30, 0x4F	; 79
     508:	f0 e0       	ldi	r31, 0x00	; 0
     50a:	88 e4       	ldi	r24, 0x48	; 72
     50c:	80 83       	st	Z, r24
	TCCR1B = 0b00001000;	// CLK=STOP
     50e:	ee e4       	ldi	r30, 0x4E	; 78
     510:	f0 e0       	ldi	r31, 0x00	; 0
     512:	88 e0       	ldi	r24, 0x08	; 8
     514:	80 83       	st	Z, r24
	OCR1AH  = 0x00; 		// 12MHz / 40Kz / 2 = 150 = 0x0096
     516:	eb e4       	ldi	r30, 0x4B	; 75
     518:	f0 e0       	ldi	r31, 0x00	; 0
     51a:	10 82       	st	Z, r1
	OCR1AL  = 0x94; 		// 
     51c:	ea e4       	ldi	r30, 0x4A	; 74
     51e:	f0 e0       	ldi	r31, 0x00	; 0
     520:	84 e9       	ldi	r24, 0x94	; 148
     522:	80 83       	st	Z, r24
	TCNT1   = 0x0000;
     524:	ec e4       	ldi	r30, 0x4C	; 76
     526:	f0 e0       	ldi	r31, 0x00	; 0
     528:	11 82       	std	Z+1, r1	; 0x01
     52a:	10 82       	st	Z, r1
	TIMSK |= 0x10;	// Turn ON OC1A compare interrupt
     52c:	a9 e5       	ldi	r26, 0x59	; 89
     52e:	b0 e0       	ldi	r27, 0x00	; 0
     530:	e9 e5       	ldi	r30, 0x59	; 89
     532:	f0 e0       	ldi	r31, 0x00	; 0
     534:	80 81       	ld	r24, Z
     536:	80 61       	ori	r24, 0x10	; 16
     538:	8c 93       	st	X, r24


//	init IO
	DDRC = 0x07; 
     53a:	e4 e3       	ldi	r30, 0x34	; 52
     53c:	f0 e0       	ldi	r31, 0x00	; 0
     53e:	87 e0       	ldi	r24, 0x07	; 7
     540:	80 83       	st	Z, r24
	DDRB = _BV(1);	// PB1 
     542:	e7 e3       	ldi	r30, 0x37	; 55
     544:	f0 e0       	ldi	r31, 0x00	; 0
     546:	82 e0       	ldi	r24, 0x02	; 2
     548:	80 83       	st	Z, r24


}
     54a:	cf 91       	pop	r28
     54c:	df 91       	pop	r29
     54e:	08 95       	ret

00000550 <init_system>:

void init_system(void)
{
     550:	df 93       	push	r29
     552:	cf 93       	push	r28
     554:	0f 92       	push	r0
     556:	cd b7       	in	r28, 0x3d	; 61
     558:	de b7       	in	r29, 0x3e	; 62
	unsigned char i;
	u_puts(EXIT);
     55a:	88 ed       	ldi	r24, 0xD8	; 216
     55c:	90 e0       	ldi	r25, 0x00	; 0
     55e:	59 d3       	rcall	.+1714   	; 0xc12 <u_puts>
	for (i=0; i<sizeof(T_PRONTO_CODE); i++)
     560:	19 82       	std	Y+1, r1	; 0x01
     562:	14 c0       	rjmp	.+40     	; 0x58c <init_system+0x3c>
	{
		mCmdQ[i+1]=T_PRONTO_CODE[i];
     564:	89 81       	ldd	r24, Y+1	; 0x01
     566:	88 2f       	mov	r24, r24
     568:	90 e0       	ldi	r25, 0x00	; 0
     56a:	9c 01       	movw	r18, r24
     56c:	2f 5f       	subi	r18, 0xFF	; 255
     56e:	3f 4f       	sbci	r19, 0xFF	; 255
     570:	89 81       	ldd	r24, Y+1	; 0x01
     572:	88 2f       	mov	r24, r24
     574:	90 e0       	ldi	r25, 0x00	; 0
     576:	fc 01       	movw	r30, r24
     578:	e0 58       	subi	r30, 0x80	; 128
     57a:	ff 4f       	sbci	r31, 0xFF	; 255
     57c:	80 81       	ld	r24, Z
     57e:	f9 01       	movw	r30, r18
     580:	ea 58       	subi	r30, 0x8A	; 138
     582:	fe 4f       	sbci	r31, 0xFE	; 254
     584:	80 83       	st	Z, r24

void init_system(void)
{
	unsigned char i;
	u_puts(EXIT);
	for (i=0; i<sizeof(T_PRONTO_CODE); i++)
     586:	89 81       	ldd	r24, Y+1	; 0x01
     588:	8f 5f       	subi	r24, 0xFF	; 255
     58a:	89 83       	std	Y+1, r24	; 0x01
     58c:	89 81       	ldd	r24, Y+1	; 0x01
     58e:	87 35       	cpi	r24, 0x57	; 87
     590:	48 f3       	brcs	.-46     	; 0x564 <init_system+0x14>
	{
		mCmdQ[i+1]=T_PRONTO_CODE[i];
	}	
	mCmdQ[0] = sizeof(T_PRONTO_CODE)-1;
     592:	86 e5       	ldi	r24, 0x56	; 86
     594:	80 93 76 01 	sts	0x0176, r24
	mCmdQFlag = 1;
     598:	81 e0       	ldi	r24, 0x01	; 1
     59a:	80 93 6e 01 	sts	0x016E, r24
	process_cmd();
     59e:	4e d0       	rcall	.+156    	; 0x63c <process_cmd>


}
     5a0:	0f 90       	pop	r0
     5a2:	cf 91       	pop	r28
     5a4:	df 91       	pop	r29
     5a6:	08 95       	ret

000005a8 <process_tmr>:

void process_tmr(void)
{
     5a8:	df 93       	push	r29
     5aa:	cf 93       	push	r28
     5ac:	00 d0       	rcall	.+0      	; 0x5ae <process_tmr+0x6>
     5ae:	cd b7       	in	r28, 0x3d	; 61
     5b0:	de b7       	in	r29, 0x3e	; 62
	static unsigned int tCnt=0;


	if (mTimer0_Flag==1)	// @ very 196.6ms
     5b2:	80 91 71 01 	lds	r24, 0x0171
     5b6:	81 30       	cpi	r24, 0x01	; 1
     5b8:	e1 f5       	brne	.+120    	; 0x632 <process_tmr+0x8a>
	{
		mTimer0_Flag=0;
     5ba:	10 92 71 01 	sts	0x0171, r1
		tCnt ++	;
     5be:	80 91 74 01 	lds	r24, 0x0174
     5c2:	90 91 75 01 	lds	r25, 0x0175
     5c6:	01 96       	adiw	r24, 0x01	; 1
     5c8:	90 93 75 01 	sts	0x0175, r25
     5cc:	80 93 74 01 	sts	0x0174, r24
		if (mLinuxMode!=2)	
     5d0:	80 91 d7 00 	lds	r24, 0x00D7
     5d4:	82 30       	cpi	r24, 0x02	; 2
     5d6:	31 f0       	breq	.+12     	; 0x5e4 <process_tmr+0x3c>
		{
			tCnt=0xff;
     5d8:	8f ef       	ldi	r24, 0xFF	; 255
     5da:	90 e0       	ldi	r25, 0x00	; 0
     5dc:	90 93 75 01 	sts	0x0175, r25
     5e0:	80 93 74 01 	sts	0x0174, r24
		}

		if (tCnt>=10)		
     5e4:	80 91 74 01 	lds	r24, 0x0174
     5e8:	90 91 75 01 	lds	r25, 0x0175
     5ec:	8a 30       	cpi	r24, 0x0A	; 10
     5ee:	91 05       	cpc	r25, r1
     5f0:	60 f0       	brcs	.+24     	; 0x60a <process_tmr+0x62>
		{
			tCnt=0;
     5f2:	10 92 75 01 	sts	0x0175, r1
     5f6:	10 92 74 01 	sts	0x0174, r1
			PORTC ^= (1 << LED1);
     5fa:	a5 e3       	ldi	r26, 0x35	; 53
     5fc:	b0 e0       	ldi	r27, 0x00	; 0
     5fe:	e5 e3       	ldi	r30, 0x35	; 53
     600:	f0 e0       	ldi	r31, 0x00	; 0
     602:	90 81       	ld	r25, Z
     604:	81 e0       	ldi	r24, 0x01	; 1
     606:	89 27       	eor	r24, r25
     608:	8c 93       	st	X, r24
		}
		switch (mFunctionMode)
     60a:	80 91 73 01 	lds	r24, 0x0173
     60e:	28 2f       	mov	r18, r24
     610:	30 e0       	ldi	r19, 0x00	; 0
     612:	3a 83       	std	Y+2, r19	; 0x02
     614:	29 83       	std	Y+1, r18	; 0x01
     616:	89 81       	ldd	r24, Y+1	; 0x01
     618:	9a 81       	ldd	r25, Y+2	; 0x02
     61a:	81 30       	cpi	r24, 0x01	; 1
     61c:	91 05       	cpc	r25, r1
     61e:	31 f0       	breq	.+12     	; 0x62c <process_tmr+0x84>
     620:	29 81       	ldd	r18, Y+1	; 0x01
     622:	3a 81       	ldd	r19, Y+2	; 0x02
     624:	22 30       	cpi	r18, 0x02	; 2
     626:	31 05       	cpc	r19, r1
     628:	19 f0       	breq	.+6      	; 0x630 <process_tmr+0x88>
     62a:	03 c0       	rjmp	.+6      	; 0x632 <process_tmr+0x8a>
		{
			case 0:
				break;
			case 1:
				ir_send_pulseEx();
     62c:	98 d5       	rcall	.+2864   	; 0x115e <ir_send_pulseEx>
     62e:	01 c0       	rjmp	.+2      	; 0x632 <process_tmr+0x8a>
				break;
			case 2:
				ir_capture_pulse();
     630:	93 d6       	rcall	.+3366   	; 0x1358 <ir_capture_pulse>
			default:
				break;
		}
	}

}
     632:	0f 90       	pop	r0
     634:	0f 90       	pop	r0
     636:	cf 91       	pop	r28
     638:	df 91       	pop	r29
     63a:	08 95       	ret

0000063c <process_cmd>:

void process_cmd(void)
{
     63c:	df 93       	push	r29
     63e:	cf 93       	push	r28
     640:	0f 92       	push	r0
     642:	cd b7       	in	r28, 0x3d	; 61
     644:	de b7       	in	r29, 0x3e	; 62
	unsigned char index;

//	if (mCmdQ[0]>=0x80)	// Message available for process
	if (mCmdQFlag==1)	// Message available for process
     646:	80 91 6e 01 	lds	r24, 0x016E
     64a:	81 30       	cpi	r24, 0x01	; 1
     64c:	71 f5       	brne	.+92     	; 0x6aa <process_cmd+0x6e>
	{
//		index = mCmdQ[0] & 0x7f;
		index = mCmdQ[0];
     64e:	80 91 76 01 	lds	r24, 0x0176
     652:	89 83       	std	Y+1, r24	; 0x01
		PORTC ^=(1 << LED1);
     654:	a5 e3       	ldi	r26, 0x35	; 53
     656:	b0 e0       	ldi	r27, 0x00	; 0
     658:	e5 e3       	ldi	r30, 0x35	; 53
     65a:	f0 e0       	ldi	r31, 0x00	; 0
     65c:	90 81       	ld	r25, Z
     65e:	81 e0       	ldi	r24, 0x01	; 1
     660:	89 27       	eor	r24, r25
     662:	8c 93       	st	X, r24

		// Valid message neeed to have at least FOUR character
		if (index>=3) 
     664:	89 81       	ldd	r24, Y+1	; 0x01
     666:	83 30       	cpi	r24, 0x03	; 3
     668:	e0 f0       	brcs	.+56     	; 0x6a2 <process_cmd+0x66>
		{
			if (mLinuxMode<=0x01)
     66a:	80 91 d7 00 	lds	r24, 0x00D7
     66e:	82 30       	cpi	r24, 0x02	; 2
     670:	20 f4       	brcc	.+8      	; 0x67a <process_cmd+0x3e>
				process_cmd_linux(mLinuxMode);
     672:	80 91 d7 00 	lds	r24, 0x00D7
     676:	1d d0       	rcall	.+58     	; 0x6b2 <process_cmd_linux>
     678:	14 c0       	rjmp	.+40     	; 0x6a2 <process_cmd+0x66>
			else if ((mCmdQ[1]=='~') && (mCmdQ[index]=='~'))
     67a:	80 91 77 01 	lds	r24, 0x0177
     67e:	8e 37       	cpi	r24, 0x7E	; 126
     680:	81 f4       	brne	.+32     	; 0x6a2 <process_cmd+0x66>
     682:	89 81       	ldd	r24, Y+1	; 0x01
     684:	88 2f       	mov	r24, r24
     686:	90 e0       	ldi	r25, 0x00	; 0
     688:	fc 01       	movw	r30, r24
     68a:	ea 58       	subi	r30, 0x8A	; 138
     68c:	fe 4f       	sbci	r31, 0xFE	; 254
     68e:	80 81       	ld	r24, Z
     690:	8e 37       	cpi	r24, 0x7E	; 126
     692:	39 f4       	brne	.+14     	; 0x6a2 <process_cmd+0x66>
				process_cmd_hal(&mCmdQ[2],index-2);
     694:	89 81       	ldd	r24, Y+1	; 0x01
     696:	28 2f       	mov	r18, r24
     698:	22 50       	subi	r18, 0x02	; 2
     69a:	88 e7       	ldi	r24, 0x78	; 120
     69c:	91 e0       	ldi	r25, 0x01	; 1
     69e:	62 2f       	mov	r22, r18
     6a0:	3b d0       	rcall	.+118    	; 0x718 <process_cmd_hal>

		}
		mCmdQ[0]=0;		
     6a2:	10 92 76 01 	sts	0x0176, r1
		mCmdQFlag=0;
     6a6:	10 92 6e 01 	sts	0x016E, r1
	}
}
     6aa:	0f 90       	pop	r0
     6ac:	cf 91       	pop	r28
     6ae:	df 91       	pop	r29
     6b0:	08 95       	ret

000006b2 <process_cmd_linux>:

void process_cmd_linux(unsigned char iMode)
{
     6b2:	df 93       	push	r29
     6b4:	cf 93       	push	r28
     6b6:	00 d0       	rcall	.+0      	; 0x6b8 <process_cmd_linux+0x6>
     6b8:	0f 92       	push	r0
     6ba:	cd b7       	in	r28, 0x3d	; 61
     6bc:	de b7       	in	r29, 0x3e	; 62
     6be:	89 83       	std	Y+1, r24	; 0x01
	switch (iMode)
     6c0:	89 81       	ldd	r24, Y+1	; 0x01
     6c2:	28 2f       	mov	r18, r24
     6c4:	30 e0       	ldi	r19, 0x00	; 0
     6c6:	3b 83       	std	Y+3, r19	; 0x03
     6c8:	2a 83       	std	Y+2, r18	; 0x02
     6ca:	8a 81       	ldd	r24, Y+2	; 0x02
     6cc:	9b 81       	ldd	r25, Y+3	; 0x03
     6ce:	00 97       	sbiw	r24, 0x00	; 0
     6d0:	31 f0       	breq	.+12     	; 0x6de <process_cmd_linux+0x2c>
     6d2:	2a 81       	ldd	r18, Y+2	; 0x02
     6d4:	3b 81       	ldd	r19, Y+3	; 0x03
     6d6:	21 30       	cpi	r18, 0x01	; 1
     6d8:	31 05       	cpc	r19, r1
     6da:	59 f0       	breq	.+22     	; 0x6f2 <process_cmd_linux+0x40>
     6dc:	14 c0       	rjmp	.+40     	; 0x706 <process_cmd_linux+0x54>
	{
		case 0x00:
			mLinuxMode = 0x01;
     6de:	81 e0       	ldi	r24, 0x01	; 1
     6e0:	80 93 d7 00 	sts	0x00D7, r24
			u_puts(mLinux_user);
     6e4:	80 e6       	ldi	r24, 0x60	; 96
     6e6:	90 e0       	ldi	r25, 0x00	; 0
     6e8:	94 d2       	rcall	.+1320   	; 0xc12 <u_puts>
			u_puts("\r\n");
     6ea:	81 ee       	ldi	r24, 0xE1	; 225
     6ec:	90 e0       	ldi	r25, 0x00	; 0
     6ee:	91 d2       	rcall	.+1314   	; 0xc12 <u_puts>
     6f0:	0d c0       	rjmp	.+26     	; 0x70c <process_cmd_linux+0x5a>
			break;

		case 0x01:
			mLinuxMode = 0x02;
     6f2:	82 e0       	ldi	r24, 0x02	; 2
     6f4:	80 93 d7 00 	sts	0x00D7, r24
			u_puts(mLinux_passwd);
     6f8:	80 e7       	ldi	r24, 0x70	; 112
     6fa:	90 e0       	ldi	r25, 0x00	; 0
     6fc:	8a d2       	rcall	.+1300   	; 0xc12 <u_puts>
			u_puts("\r\n");
     6fe:	81 ee       	ldi	r24, 0xE1	; 225
     700:	90 e0       	ldi	r25, 0x00	; 0
     702:	87 d2       	rcall	.+1294   	; 0xc12 <u_puts>
     704:	03 c0       	rjmp	.+6      	; 0x70c <process_cmd_linux+0x5a>
			break;

		default:
			mLinuxMode=0xff;
     706:	8f ef       	ldi	r24, 0xFF	; 255
     708:	80 93 d7 00 	sts	0x00D7, r24
	}

}
     70c:	0f 90       	pop	r0
     70e:	0f 90       	pop	r0
     710:	0f 90       	pop	r0
     712:	cf 91       	pop	r28
     714:	df 91       	pop	r29
     716:	08 95       	ret

00000718 <process_cmd_hal>:

void process_cmd_hal(unsigned char *sptr, unsigned char len)
{
     718:	df 93       	push	r29
     71a:	cf 93       	push	r28
     71c:	cd b7       	in	r28, 0x3d	; 61
     71e:	de b7       	in	r29, 0x3e	; 62
     720:	29 97       	sbiw	r28, 0x09	; 9
     722:	0f b6       	in	r0, 0x3f	; 63
     724:	f8 94       	cli
     726:	de bf       	out	0x3e, r29	; 62
     728:	0f be       	out	0x3f, r0	; 63
     72a:	cd bf       	out	0x3d, r28	; 61
     72c:	9e 83       	std	Y+6, r25	; 0x06
     72e:	8d 83       	std	Y+5, r24	; 0x05
     730:	6f 83       	std	Y+7, r22	; 0x07

	unsigned char i,j;
	unsigned char tCmd;
	char tmp;

	tCmd=u_toupper(*sptr);
     732:	ed 81       	ldd	r30, Y+5	; 0x05
     734:	fe 81       	ldd	r31, Y+6	; 0x06
     736:	80 81       	ld	r24, Z
     738:	88 d2       	rcall	.+1296   	; 0xc4a <u_toupper>
     73a:	8a 83       	std	Y+2, r24	; 0x02
	mCmdCnt ++;
     73c:	80 91 6f 01 	lds	r24, 0x016F
     740:	90 91 70 01 	lds	r25, 0x0170
     744:	01 96       	adiw	r24, 0x01	; 1
     746:	90 93 70 01 	sts	0x0170, r25
     74a:	80 93 6f 01 	sts	0x016F, r24
	switch (tCmd)
     74e:	8a 81       	ldd	r24, Y+2	; 0x02
     750:	28 2f       	mov	r18, r24
     752:	30 e0       	ldi	r19, 0x00	; 0
     754:	39 87       	std	Y+9, r19	; 0x09
     756:	28 87       	std	Y+8, r18	; 0x08
     758:	88 85       	ldd	r24, Y+8	; 0x08
     75a:	99 85       	ldd	r25, Y+9	; 0x09
     75c:	83 35       	cpi	r24, 0x53	; 83
     75e:	91 05       	cpc	r25, r1
     760:	09 f4       	brne	.+2      	; 0x764 <process_cmd_hal+0x4c>
     762:	ba c0       	rjmp	.+372    	; 0x8d8 <process_cmd_hal+0x1c0>
     764:	28 85       	ldd	r18, Y+8	; 0x08
     766:	39 85       	ldd	r19, Y+9	; 0x09
     768:	24 35       	cpi	r18, 0x54	; 84
     76a:	31 05       	cpc	r19, r1
     76c:	64 f4       	brge	.+24     	; 0x786 <process_cmd_hal+0x6e>
     76e:	88 85       	ldd	r24, Y+8	; 0x08
     770:	99 85       	ldd	r25, Y+9	; 0x09
     772:	8c 34       	cpi	r24, 0x4C	; 76
     774:	91 05       	cpc	r25, r1
     776:	99 f1       	breq	.+102    	; 0x7de <process_cmd_hal+0xc6>
     778:	28 85       	ldd	r18, Y+8	; 0x08
     77a:	39 85       	ldd	r19, Y+9	; 0x09
     77c:	22 35       	cpi	r18, 0x52	; 82
     77e:	31 05       	cpc	r19, r1
     780:	09 f4       	brne	.+2      	; 0x784 <process_cmd_hal+0x6c>
     782:	d9 c0       	rjmp	.+434    	; 0x936 <process_cmd_hal+0x21e>
     784:	f8 c0       	rjmp	.+496    	; 0x976 <process_cmd_hal+0x25e>
     786:	88 85       	ldd	r24, Y+8	; 0x08
     788:	99 85       	ldd	r25, Y+9	; 0x09
     78a:	86 35       	cpi	r24, 0x56	; 86
     78c:	91 05       	cpc	r25, r1
     78e:	09 f4       	brne	.+2      	; 0x792 <process_cmd_hal+0x7a>
     790:	c5 c0       	rjmp	.+394    	; 0x91c <process_cmd_hal+0x204>
     792:	28 85       	ldd	r18, Y+8	; 0x08
     794:	39 85       	ldd	r19, Y+9	; 0x09
     796:	2e 37       	cpi	r18, 0x7E	; 126
     798:	31 05       	cpc	r19, r1
     79a:	39 f0       	breq	.+14     	; 0x7aa <process_cmd_hal+0x92>
     79c:	88 85       	ldd	r24, Y+8	; 0x08
     79e:	99 85       	ldd	r25, Y+9	; 0x09
     7a0:	84 35       	cpi	r24, 0x54	; 84
     7a2:	91 05       	cpc	r25, r1
     7a4:	09 f4       	brne	.+2      	; 0x7a8 <process_cmd_hal+0x90>
     7a6:	cb c0       	rjmp	.+406    	; 0x93e <process_cmd_hal+0x226>
     7a8:	e6 c0       	rjmp	.+460    	; 0x976 <process_cmd_hal+0x25e>
	{
		case '~':	// Echo message back
			for (i=1; i<len; i++)
     7aa:	81 e0       	ldi	r24, 0x01	; 1
     7ac:	8c 83       	std	Y+4, r24	; 0x04
     7ae:	0f c0       	rjmp	.+30     	; 0x7ce <process_cmd_hal+0xb6>
			{
				tmp = *(sptr+i);
     7b0:	8c 81       	ldd	r24, Y+4	; 0x04
     7b2:	28 2f       	mov	r18, r24
     7b4:	30 e0       	ldi	r19, 0x00	; 0
     7b6:	8d 81       	ldd	r24, Y+5	; 0x05
     7b8:	9e 81       	ldd	r25, Y+6	; 0x06
     7ba:	fc 01       	movw	r30, r24
     7bc:	e2 0f       	add	r30, r18
     7be:	f3 1f       	adc	r31, r19
     7c0:	80 81       	ld	r24, Z
     7c2:	89 83       	std	Y+1, r24	; 0x01
				u_putch(tmp);
     7c4:	89 81       	ldd	r24, Y+1	; 0x01
     7c6:	07 d2       	rcall	.+1038   	; 0xbd6 <u_putch>
	tCmd=u_toupper(*sptr);
	mCmdCnt ++;
	switch (tCmd)
	{
		case '~':	// Echo message back
			for (i=1; i<len; i++)
     7c8:	8c 81       	ldd	r24, Y+4	; 0x04
     7ca:	8f 5f       	subi	r24, 0xFF	; 255
     7cc:	8c 83       	std	Y+4, r24	; 0x04
     7ce:	9c 81       	ldd	r25, Y+4	; 0x04
     7d0:	8f 81       	ldd	r24, Y+7	; 0x07
     7d2:	98 17       	cp	r25, r24
     7d4:	68 f3       	brcs	.-38     	; 0x7b0 <process_cmd_hal+0x98>
			{
				tmp = *(sptr+i);
				u_putch(tmp);
			}
			u_puts("\r\n");
     7d6:	81 ee       	ldi	r24, 0xE1	; 225
     7d8:	90 e0       	ldi	r25, 0x00	; 0
     7da:	1b d2       	rcall	.+1078   	; 0xc12 <u_puts>
     7dc:	cc c0       	rjmp	.+408    	; 0x976 <process_cmd_hal+0x25e>
			break;

		case 'L':	// Login information
			for (i=1; i<len; i++)
     7de:	81 e0       	ldi	r24, 0x01	; 1
     7e0:	8c 83       	std	Y+4, r24	; 0x04
     7e2:	10 c0       	rjmp	.+32     	; 0x804 <process_cmd_hal+0xec>
			{
				tmp = *(sptr+i);
     7e4:	8c 81       	ldd	r24, Y+4	; 0x04
     7e6:	28 2f       	mov	r18, r24
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	8d 81       	ldd	r24, Y+5	; 0x05
     7ec:	9e 81       	ldd	r25, Y+6	; 0x06
     7ee:	fc 01       	movw	r30, r24
     7f0:	e2 0f       	add	r30, r18
     7f2:	f3 1f       	adc	r31, r19
     7f4:	80 81       	ld	r24, Z
     7f6:	89 83       	std	Y+1, r24	; 0x01
				if (tmp==' ')
     7f8:	89 81       	ldd	r24, Y+1	; 0x01
     7fa:	80 32       	cpi	r24, 0x20	; 32
     7fc:	39 f0       	breq	.+14     	; 0x80c <process_cmd_hal+0xf4>
			}
			u_puts("\r\n");
			break;

		case 'L':	// Login information
			for (i=1; i<len; i++)
     7fe:	8c 81       	ldd	r24, Y+4	; 0x04
     800:	8f 5f       	subi	r24, 0xFF	; 255
     802:	8c 83       	std	Y+4, r24	; 0x04
     804:	9c 81       	ldd	r25, Y+4	; 0x04
     806:	8f 81       	ldd	r24, Y+7	; 0x07
     808:	98 17       	cp	r25, r24
     80a:	60 f3       	brcs	.-40     	; 0x7e4 <process_cmd_hal+0xcc>
				tmp = *(sptr+i);
				if (tmp==' ')
					break;
			}

			if (i<(len-1))
     80c:	8c 81       	ldd	r24, Y+4	; 0x04
     80e:	28 2f       	mov	r18, r24
     810:	30 e0       	ldi	r19, 0x00	; 0
     812:	8f 81       	ldd	r24, Y+7	; 0x07
     814:	88 2f       	mov	r24, r24
     816:	90 e0       	ldi	r25, 0x00	; 0
     818:	01 97       	sbiw	r24, 0x01	; 1
     81a:	28 17       	cp	r18, r24
     81c:	39 07       	cpc	r19, r25
     81e:	0c f0       	brlt	.+2      	; 0x822 <process_cmd_hal+0x10a>
     820:	aa c0       	rjmp	.+340    	; 0x976 <process_cmd_hal+0x25e>
			{
				for (j=0; j<sizeof(mLinux_user); j++)
     822:	1b 82       	std	Y+3, r1	; 0x03
     824:	11 c0       	rjmp	.+34     	; 0x848 <process_cmd_hal+0x130>
				{
					mLinux_user[j]=0x00;
     826:	8b 81       	ldd	r24, Y+3	; 0x03
     828:	88 2f       	mov	r24, r24
     82a:	90 e0       	ldi	r25, 0x00	; 0
     82c:	fc 01       	movw	r30, r24
     82e:	e0 5a       	subi	r30, 0xA0	; 160
     830:	ff 4f       	sbci	r31, 0xFF	; 255
     832:	10 82       	st	Z, r1
					mLinux_passwd[j]=0x00;
     834:	8b 81       	ldd	r24, Y+3	; 0x03
     836:	88 2f       	mov	r24, r24
     838:	90 e0       	ldi	r25, 0x00	; 0
     83a:	fc 01       	movw	r30, r24
     83c:	e0 59       	subi	r30, 0x90	; 144
     83e:	ff 4f       	sbci	r31, 0xFF	; 255
     840:	10 82       	st	Z, r1
					break;
			}

			if (i<(len-1))
			{
				for (j=0; j<sizeof(mLinux_user); j++)
     842:	8b 81       	ldd	r24, Y+3	; 0x03
     844:	8f 5f       	subi	r24, 0xFF	; 255
     846:	8b 83       	std	Y+3, r24	; 0x03
     848:	8b 81       	ldd	r24, Y+3	; 0x03
     84a:	80 31       	cpi	r24, 0x10	; 16
     84c:	60 f3       	brcs	.-40     	; 0x826 <process_cmd_hal+0x10e>
				{
					mLinux_user[j]=0x00;
					mLinux_passwd[j]=0x00;
				}

				for (j=1; j<i; j++)
     84e:	81 e0       	ldi	r24, 0x01	; 1
     850:	8b 83       	std	Y+3, r24	; 0x03
     852:	16 c0       	rjmp	.+44     	; 0x880 <process_cmd_hal+0x168>
				{
					mLinux_user[j-1]=*(sptr+j);
     854:	8b 81       	ldd	r24, Y+3	; 0x03
     856:	88 2f       	mov	r24, r24
     858:	90 e0       	ldi	r25, 0x00	; 0
     85a:	ac 01       	movw	r20, r24
     85c:	41 50       	subi	r20, 0x01	; 1
     85e:	50 40       	sbci	r21, 0x00	; 0
     860:	8b 81       	ldd	r24, Y+3	; 0x03
     862:	28 2f       	mov	r18, r24
     864:	30 e0       	ldi	r19, 0x00	; 0
     866:	8d 81       	ldd	r24, Y+5	; 0x05
     868:	9e 81       	ldd	r25, Y+6	; 0x06
     86a:	fc 01       	movw	r30, r24
     86c:	e2 0f       	add	r30, r18
     86e:	f3 1f       	adc	r31, r19
     870:	80 81       	ld	r24, Z
     872:	fa 01       	movw	r30, r20
     874:	e0 5a       	subi	r30, 0xA0	; 160
     876:	ff 4f       	sbci	r31, 0xFF	; 255
     878:	80 83       	st	Z, r24
				{
					mLinux_user[j]=0x00;
					mLinux_passwd[j]=0x00;
				}

				for (j=1; j<i; j++)
     87a:	8b 81       	ldd	r24, Y+3	; 0x03
     87c:	8f 5f       	subi	r24, 0xFF	; 255
     87e:	8b 83       	std	Y+3, r24	; 0x03
     880:	9b 81       	ldd	r25, Y+3	; 0x03
     882:	8c 81       	ldd	r24, Y+4	; 0x04
     884:	98 17       	cp	r25, r24
     886:	30 f3       	brcs	.-52     	; 0x854 <process_cmd_hal+0x13c>
				{
					mLinux_user[j-1]=*(sptr+j);
				}
				for (j=(i+1); j<len; j++)
     888:	8c 81       	ldd	r24, Y+4	; 0x04
     88a:	8f 5f       	subi	r24, 0xFF	; 255
     88c:	8b 83       	std	Y+3, r24	; 0x03
     88e:	1c c0       	rjmp	.+56     	; 0x8c8 <process_cmd_hal+0x1b0>
				{
					mLinux_passwd[j-1-i]=*(sptr+j);
     890:	8b 81       	ldd	r24, Y+3	; 0x03
     892:	88 2f       	mov	r24, r24
     894:	90 e0       	ldi	r25, 0x00	; 0
     896:	9c 01       	movw	r18, r24
     898:	21 50       	subi	r18, 0x01	; 1
     89a:	30 40       	sbci	r19, 0x00	; 0
     89c:	8c 81       	ldd	r24, Y+4	; 0x04
     89e:	88 2f       	mov	r24, r24
     8a0:	90 e0       	ldi	r25, 0x00	; 0
     8a2:	a9 01       	movw	r20, r18
     8a4:	48 1b       	sub	r20, r24
     8a6:	59 0b       	sbc	r21, r25
     8a8:	8b 81       	ldd	r24, Y+3	; 0x03
     8aa:	28 2f       	mov	r18, r24
     8ac:	30 e0       	ldi	r19, 0x00	; 0
     8ae:	8d 81       	ldd	r24, Y+5	; 0x05
     8b0:	9e 81       	ldd	r25, Y+6	; 0x06
     8b2:	fc 01       	movw	r30, r24
     8b4:	e2 0f       	add	r30, r18
     8b6:	f3 1f       	adc	r31, r19
     8b8:	80 81       	ld	r24, Z
     8ba:	fa 01       	movw	r30, r20
     8bc:	e0 59       	subi	r30, 0x90	; 144
     8be:	ff 4f       	sbci	r31, 0xFF	; 255
     8c0:	80 83       	st	Z, r24

				for (j=1; j<i; j++)
				{
					mLinux_user[j-1]=*(sptr+j);
				}
				for (j=(i+1); j<len; j++)
     8c2:	8b 81       	ldd	r24, Y+3	; 0x03
     8c4:	8f 5f       	subi	r24, 0xFF	; 255
     8c6:	8b 83       	std	Y+3, r24	; 0x03
     8c8:	9b 81       	ldd	r25, Y+3	; 0x03
     8ca:	8f 81       	ldd	r24, Y+7	; 0x07
     8cc:	98 17       	cp	r25, r24
     8ce:	00 f3       	brcs	.-64     	; 0x890 <process_cmd_hal+0x178>
				{
					mLinux_passwd[j-1-i]=*(sptr+j);
				}

				u_puts("\r\n");
     8d0:	81 ee       	ldi	r24, 0xE1	; 225
     8d2:	90 e0       	ldi	r25, 0x00	; 0
     8d4:	9e d1       	rcall	.+828    	; 0xc12 <u_puts>
     8d6:	4f c0       	rjmp	.+158    	; 0x976 <process_cmd_hal+0x25e>
			}

  			break;

		case 'S':	// Status
			u_puts(LinuxCmd);
     8d8:	84 ee       	ldi	r24, 0xE4	; 228
     8da:	90 e0       	ldi	r25, 0x00	; 0
     8dc:	9a d1       	rcall	.+820    	; 0xc12 <u_puts>
			u_puts("'S' mcu_status:");				// Status command
     8de:	82 ef       	ldi	r24, 0xF2	; 242
     8e0:	90 e0       	ldi	r25, 0x00	; 0
     8e2:	97 d1       	rcall	.+814    	; 0xc12 <u_puts>
			u_puts(mLinux_user);
     8e4:	80 e6       	ldi	r24, 0x60	; 96
     8e6:	90 e0       	ldi	r25, 0x00	; 0
     8e8:	94 d1       	rcall	.+808    	; 0xc12 <u_puts>
			u_puts("/");
     8ea:	82 e0       	ldi	r24, 0x02	; 2
     8ec:	91 e0       	ldi	r25, 0x01	; 1
     8ee:	91 d1       	rcall	.+802    	; 0xc12 <u_puts>
			u_puts(mLinux_passwd);u_puts(":");
     8f0:	80 e7       	ldi	r24, 0x70	; 112
     8f2:	90 e0       	ldi	r25, 0x00	; 0
     8f4:	8e d1       	rcall	.+796    	; 0xc12 <u_puts>
     8f6:	84 e0       	ldi	r24, 0x04	; 4
     8f8:	91 e0       	ldi	r25, 0x01	; 1
     8fa:	8b d1       	rcall	.+790    	; 0xc12 <u_puts>
			u_putHexByte(mLinuxMode,':');	// mLinuxMode = 0x02 : Login Linux already
     8fc:	80 91 d7 00 	lds	r24, 0x00D7
     900:	6a e3       	ldi	r22, 0x3A	; 58
     902:	43 d1       	rcall	.+646    	; 0xb8a <u_putHexByte>
			u_putHexWord(mCmdCnt);u_puts(":");
     904:	80 91 6f 01 	lds	r24, 0x016F
     908:	90 91 70 01 	lds	r25, 0x0170
     90c:	29 d1       	rcall	.+594    	; 0xb60 <u_putHexWord>
     90e:	84 e0       	ldi	r24, 0x04	; 4
     910:	91 e0       	ldi	r25, 0x01	; 1
     912:	7f d1       	rcall	.+766    	; 0xc12 <u_puts>
			u_puts("\r\n");
     914:	81 ee       	ldi	r24, 0xE1	; 225
     916:	90 e0       	ldi	r25, 0x00	; 0
     918:	7c d1       	rcall	.+760    	; 0xc12 <u_puts>
     91a:	2d c0       	rjmp	.+90     	; 0x976 <process_cmd_hal+0x25e>
			break;

		case 'V':	// Version
			u_puts(LinuxCmd);
     91c:	84 ee       	ldi	r24, 0xE4	; 228
     91e:	90 e0       	ldi	r25, 0x00	; 0
     920:	78 d1       	rcall	.+752    	; 0xc12 <u_puts>
			u_puts("'V' ");
     922:	86 e0       	ldi	r24, 0x06	; 6
     924:	91 e0       	ldi	r25, 0x01	; 1
     926:	75 d1       	rcall	.+746    	; 0xc12 <u_puts>
			u_puts(VERSION);
     928:	8b e0       	ldi	r24, 0x0B	; 11
     92a:	91 e0       	ldi	r25, 0x01	; 1
     92c:	72 d1       	rcall	.+740    	; 0xc12 <u_puts>
			u_puts("'\r\n");
     92e:	82 e3       	ldi	r24, 0x32	; 50
     930:	91 e0       	ldi	r25, 0x01	; 1
     932:	6f d1       	rcall	.+734    	; 0xc12 <u_puts>
     934:	20 c0       	rjmp	.+64     	; 0x976 <process_cmd_hal+0x25e>
			break;

		case 'R': 	// Remote command
			process_remote_command((char*) (sptr));
     936:	8d 81       	ldd	r24, Y+5	; 0x05
     938:	9e 81       	ldd	r25, Y+6	; 0x06
     93a:	a0 d1       	rcall	.+832    	; 0xc7c <process_remote_command>
     93c:	1c c0       	rjmp	.+56     	; 0x976 <process_cmd_hal+0x25e>
			break;

		case 'T': 	// Test Command
			u_puts("Test :");
     93e:	86 e3       	ldi	r24, 0x36	; 54
     940:	91 e0       	ldi	r25, 0x01	; 1
     942:	67 d1       	rcall	.+718    	; 0xc12 <u_puts>
			for (i=1; i<len; i++)
     944:	81 e0       	ldi	r24, 0x01	; 1
     946:	8c 83       	std	Y+4, r24	; 0x04
     948:	0f c0       	rjmp	.+30     	; 0x968 <process_cmd_hal+0x250>
			{
				tmp = *(sptr+i);
     94a:	8c 81       	ldd	r24, Y+4	; 0x04
     94c:	28 2f       	mov	r18, r24
     94e:	30 e0       	ldi	r19, 0x00	; 0
     950:	8d 81       	ldd	r24, Y+5	; 0x05
     952:	9e 81       	ldd	r25, Y+6	; 0x06
     954:	fc 01       	movw	r30, r24
     956:	e2 0f       	add	r30, r18
     958:	f3 1f       	adc	r31, r19
     95a:	80 81       	ld	r24, Z
     95c:	89 83       	std	Y+1, r24	; 0x01
				u_putch(tmp);
     95e:	89 81       	ldd	r24, Y+1	; 0x01
     960:	3a d1       	rcall	.+628    	; 0xbd6 <u_putch>
			process_remote_command((char*) (sptr));
			break;

		case 'T': 	// Test Command
			u_puts("Test :");
			for (i=1; i<len; i++)
     962:	8c 81       	ldd	r24, Y+4	; 0x04
     964:	8f 5f       	subi	r24, 0xFF	; 255
     966:	8c 83       	std	Y+4, r24	; 0x04
     968:	9c 81       	ldd	r25, Y+4	; 0x04
     96a:	8f 81       	ldd	r24, Y+7	; 0x07
     96c:	98 17       	cp	r25, r24
     96e:	68 f3       	brcs	.-38     	; 0x94a <process_cmd_hal+0x232>
			{
				tmp = *(sptr+i);
				u_putch(tmp);
			}
			u_puts("\r\n");
     970:	81 ee       	ldi	r24, 0xE1	; 225
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	4e d1       	rcall	.+668    	; 0xc12 <u_puts>
			break;

	}
}
     976:	29 96       	adiw	r28, 0x09	; 9
     978:	0f b6       	in	r0, 0x3f	; 63
     97a:	f8 94       	cli
     97c:	de bf       	out	0x3e, r29	; 62
     97e:	0f be       	out	0x3f, r0	; 63
     980:	cd bf       	out	0x3d, r28	; 61
     982:	cf 91       	pop	r28
     984:	df 91       	pop	r29
     986:	08 95       	ret

00000988 <u_delay>:
//                       
// Assumption       : 
//                    
// Notes			:
//----------------------------------------------------------------------------
void u_delay(unsigned int iDelay){ 
     988:	df 93       	push	r29
     98a:	cf 93       	push	r28
     98c:	00 d0       	rcall	.+0      	; 0x98e <u_delay+0x6>
     98e:	00 d0       	rcall	.+0      	; 0x990 <u_delay+0x8>
     990:	00 d0       	rcall	.+0      	; 0x992 <u_delay+0xa>
     992:	cd b7       	in	r28, 0x3d	; 61
     994:	de b7       	in	r29, 0x3e	; 62
     996:	9c 83       	std	Y+4, r25	; 0x04
     998:	8b 83       	std	Y+3, r24	; 0x03
     99a:	13 c0       	rjmp	.+38     	; 0x9c2 <u_delay+0x3a>
	//delay n 100us 
	unsigned int x; 

	while(iDelay--){ 
	x=130; 		// 8MHz Clock
     99c:	82 e8       	ldi	r24, 0x82	; 130
     99e:	90 e0       	ldi	r25, 0x00	; 0
     9a0:	9a 83       	std	Y+2, r25	; 0x02
     9a2:	89 83       	std	Y+1, r24	; 0x01
	while(x--); 
     9a4:	1e 82       	std	Y+6, r1	; 0x06
     9a6:	89 81       	ldd	r24, Y+1	; 0x01
     9a8:	9a 81       	ldd	r25, Y+2	; 0x02
     9aa:	00 97       	sbiw	r24, 0x00	; 0
     9ac:	11 f0       	breq	.+4      	; 0x9b2 <u_delay+0x2a>
     9ae:	81 e0       	ldi	r24, 0x01	; 1
     9b0:	8e 83       	std	Y+6, r24	; 0x06
     9b2:	89 81       	ldd	r24, Y+1	; 0x01
     9b4:	9a 81       	ldd	r25, Y+2	; 0x02
     9b6:	01 97       	sbiw	r24, 0x01	; 1
     9b8:	9a 83       	std	Y+2, r25	; 0x02
     9ba:	89 83       	std	Y+1, r24	; 0x01
     9bc:	8e 81       	ldd	r24, Y+6	; 0x06
     9be:	88 23       	and	r24, r24
     9c0:	89 f7       	brne	.-30     	; 0x9a4 <u_delay+0x1c>
//----------------------------------------------------------------------------
void u_delay(unsigned int iDelay){ 
	//delay n 100us 
	unsigned int x; 

	while(iDelay--){ 
     9c2:	1d 82       	std	Y+5, r1	; 0x05
     9c4:	8b 81       	ldd	r24, Y+3	; 0x03
     9c6:	9c 81       	ldd	r25, Y+4	; 0x04
     9c8:	00 97       	sbiw	r24, 0x00	; 0
     9ca:	11 f0       	breq	.+4      	; 0x9d0 <u_delay+0x48>
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	8d 83       	std	Y+5, r24	; 0x05
     9d0:	8b 81       	ldd	r24, Y+3	; 0x03
     9d2:	9c 81       	ldd	r25, Y+4	; 0x04
     9d4:	01 97       	sbiw	r24, 0x01	; 1
     9d6:	9c 83       	std	Y+4, r25	; 0x04
     9d8:	8b 83       	std	Y+3, r24	; 0x03
     9da:	8d 81       	ldd	r24, Y+5	; 0x05
     9dc:	88 23       	and	r24, r24
     9de:	f1 f6       	brne	.-68     	; 0x99c <u_delay+0x14>
	x=130; 		// 8MHz Clock
	while(x--); 
	} 
} 
     9e0:	26 96       	adiw	r28, 0x06	; 6
     9e2:	0f b6       	in	r0, 0x3f	; 63
     9e4:	f8 94       	cli
     9e6:	de bf       	out	0x3e, r29	; 62
     9e8:	0f be       	out	0x3f, r0	; 63
     9ea:	cd bf       	out	0x3d, r28	; 61
     9ec:	cf 91       	pop	r28
     9ee:	df 91       	pop	r29
     9f0:	08 95       	ret

000009f2 <u_abs>:
//                    
// Notes			:
//----------------------------------------------------------------------------

INT16U u_abs(INT16S a)
{
     9f2:	df 93       	push	r29
     9f4:	cf 93       	push	r28
     9f6:	00 d0       	rcall	.+0      	; 0x9f8 <u_abs+0x6>
     9f8:	00 d0       	rcall	.+0      	; 0x9fa <u_abs+0x8>
     9fa:	cd b7       	in	r28, 0x3d	; 61
     9fc:	de b7       	in	r29, 0x3e	; 62
     9fe:	9a 83       	std	Y+2, r25	; 0x02
     a00:	89 83       	std	Y+1, r24	; 0x01
	if(a < 0)
     a02:	89 81       	ldd	r24, Y+1	; 0x01
     a04:	9a 81       	ldd	r25, Y+2	; 0x02
     a06:	99 23       	and	r25, r25
     a08:	44 f4       	brge	.+16     	; 0xa1a <u_abs+0x28>
		return -a;
     a0a:	89 81       	ldd	r24, Y+1	; 0x01
     a0c:	9a 81       	ldd	r25, Y+2	; 0x02
     a0e:	90 95       	com	r25
     a10:	81 95       	neg	r24
     a12:	9f 4f       	sbci	r25, 0xFF	; 255
     a14:	9c 83       	std	Y+4, r25	; 0x04
     a16:	8b 83       	std	Y+3, r24	; 0x03
     a18:	04 c0       	rjmp	.+8      	; 0xa22 <u_abs+0x30>
	return (INT16U) a;
     a1a:	89 81       	ldd	r24, Y+1	; 0x01
     a1c:	9a 81       	ldd	r25, Y+2	; 0x02
     a1e:	9c 83       	std	Y+4, r25	; 0x04
     a20:	8b 83       	std	Y+3, r24	; 0x03
     a22:	8b 81       	ldd	r24, Y+3	; 0x03
     a24:	9c 81       	ldd	r25, Y+4	; 0x04
}
     a26:	0f 90       	pop	r0
     a28:	0f 90       	pop	r0
     a2a:	0f 90       	pop	r0
     a2c:	0f 90       	pop	r0
     a2e:	cf 91       	pop	r28
     a30:	df 91       	pop	r29
     a32:	08 95       	ret

00000a34 <u_sign>:
//                     
// Notes			    :
//----------------------------------------------------------------------------

INT16S u_sign(INT16S x) 
{
     a34:	df 93       	push	r29
     a36:	cf 93       	push	r28
     a38:	00 d0       	rcall	.+0      	; 0xa3a <u_sign+0x6>
     a3a:	00 d0       	rcall	.+0      	; 0xa3c <u_sign+0x8>
     a3c:	cd b7       	in	r28, 0x3d	; 61
     a3e:	de b7       	in	r29, 0x3e	; 62
     a40:	9a 83       	std	Y+2, r25	; 0x02
     a42:	89 83       	std	Y+1, r24	; 0x01
	if (x<0) return (-1);
     a44:	89 81       	ldd	r24, Y+1	; 0x01
     a46:	9a 81       	ldd	r25, Y+2	; 0x02
     a48:	99 23       	and	r25, r25
     a4a:	2c f4       	brge	.+10     	; 0xa56 <u_sign+0x22>
     a4c:	8f ef       	ldi	r24, 0xFF	; 255
     a4e:	9f ef       	ldi	r25, 0xFF	; 255
     a50:	9c 83       	std	Y+4, r25	; 0x04
     a52:	8b 83       	std	Y+3, r24	; 0x03
     a54:	04 c0       	rjmp	.+8      	; 0xa5e <u_sign+0x2a>
	return(1);
     a56:	81 e0       	ldi	r24, 0x01	; 1
     a58:	90 e0       	ldi	r25, 0x00	; 0
     a5a:	9c 83       	std	Y+4, r25	; 0x04
     a5c:	8b 83       	std	Y+3, r24	; 0x03
     a5e:	8b 81       	ldd	r24, Y+3	; 0x03
     a60:	9c 81       	ldd	r25, Y+4	; 0x04
}
     a62:	0f 90       	pop	r0
     a64:	0f 90       	pop	r0
     a66:	0f 90       	pop	r0
     a68:	0f 90       	pop	r0
     a6a:	cf 91       	pop	r28
     a6c:	df 91       	pop	r29
     a6e:	08 95       	ret

00000a70 <u_asc2uint>:
// Date created		: 16 May 2002
// Description		: Convert alphanumeric string to hex. value
// Notes				:
//----------------------------------------------------------------------------
INT16U u_asc2uint(INT8U len, INT8U *sptr)
{
     a70:	0f 93       	push	r16
     a72:	1f 93       	push	r17
     a74:	df 93       	push	r29
     a76:	cf 93       	push	r28
     a78:	00 d0       	rcall	.+0      	; 0xa7a <u_asc2uint+0xa>
     a7a:	00 d0       	rcall	.+0      	; 0xa7c <u_asc2uint+0xc>
     a7c:	00 d0       	rcall	.+0      	; 0xa7e <u_asc2uint+0xe>
     a7e:	cd b7       	in	r28, 0x3d	; 61
     a80:	de b7       	in	r29, 0x3e	; 62
     a82:	8c 83       	std	Y+4, r24	; 0x04
     a84:	7e 83       	std	Y+6, r23	; 0x06
     a86:	6d 83       	std	Y+5, r22	; 0x05
	INT8U i;
	INT16U temp;

	temp = u_hex2dec(*sptr++);
     a88:	ed 81       	ldd	r30, Y+5	; 0x05
     a8a:	fe 81       	ldd	r31, Y+6	; 0x06
     a8c:	20 81       	ld	r18, Z
     a8e:	8d 81       	ldd	r24, Y+5	; 0x05
     a90:	9e 81       	ldd	r25, Y+6	; 0x06
     a92:	01 96       	adiw	r24, 0x01	; 1
     a94:	9e 83       	std	Y+6, r25	; 0x06
     a96:	8d 83       	std	Y+5, r24	; 0x05
     a98:	82 2f       	mov	r24, r18
     a9a:	34 d0       	rcall	.+104    	; 0xb04 <u_hex2dec>
     a9c:	88 2f       	mov	r24, r24
     a9e:	90 e0       	ldi	r25, 0x00	; 0
     aa0:	9a 83       	std	Y+2, r25	; 0x02
     aa2:	89 83       	std	Y+1, r24	; 0x01
	for(i = 1; i < len; i++)
     aa4:	81 e0       	ldi	r24, 0x01	; 1
     aa6:	8b 83       	std	Y+3, r24	; 0x03
     aa8:	1c c0       	rjmp	.+56     	; 0xae2 <u_asc2uint+0x72>
		temp = temp * 0x10 + u_hex2dec(*sptr++);
     aaa:	89 81       	ldd	r24, Y+1	; 0x01
     aac:	9a 81       	ldd	r25, Y+2	; 0x02
     aae:	8c 01       	movw	r16, r24
     ab0:	02 95       	swap	r16
     ab2:	12 95       	swap	r17
     ab4:	10 7f       	andi	r17, 0xF0	; 240
     ab6:	10 27       	eor	r17, r16
     ab8:	00 7f       	andi	r16, 0xF0	; 240
     aba:	10 27       	eor	r17, r16
     abc:	ed 81       	ldd	r30, Y+5	; 0x05
     abe:	fe 81       	ldd	r31, Y+6	; 0x06
     ac0:	20 81       	ld	r18, Z
     ac2:	8d 81       	ldd	r24, Y+5	; 0x05
     ac4:	9e 81       	ldd	r25, Y+6	; 0x06
     ac6:	01 96       	adiw	r24, 0x01	; 1
     ac8:	9e 83       	std	Y+6, r25	; 0x06
     aca:	8d 83       	std	Y+5, r24	; 0x05
     acc:	82 2f       	mov	r24, r18
     ace:	1a d0       	rcall	.+52     	; 0xb04 <u_hex2dec>
     ad0:	88 2f       	mov	r24, r24
     ad2:	90 e0       	ldi	r25, 0x00	; 0
     ad4:	80 0f       	add	r24, r16
     ad6:	91 1f       	adc	r25, r17
     ad8:	9a 83       	std	Y+2, r25	; 0x02
     ada:	89 83       	std	Y+1, r24	; 0x01
{
	INT8U i;
	INT16U temp;

	temp = u_hex2dec(*sptr++);
	for(i = 1; i < len; i++)
     adc:	8b 81       	ldd	r24, Y+3	; 0x03
     ade:	8f 5f       	subi	r24, 0xFF	; 255
     ae0:	8b 83       	std	Y+3, r24	; 0x03
     ae2:	9b 81       	ldd	r25, Y+3	; 0x03
     ae4:	8c 81       	ldd	r24, Y+4	; 0x04
     ae6:	98 17       	cp	r25, r24
     ae8:	00 f3       	brcs	.-64     	; 0xaaa <u_asc2uint+0x3a>
		temp = temp * 0x10 + u_hex2dec(*sptr++);
	return (temp);
     aea:	89 81       	ldd	r24, Y+1	; 0x01
     aec:	9a 81       	ldd	r25, Y+2	; 0x02
}
     aee:	26 96       	adiw	r28, 0x06	; 6
     af0:	0f b6       	in	r0, 0x3f	; 63
     af2:	f8 94       	cli
     af4:	de bf       	out	0x3e, r29	; 62
     af6:	0f be       	out	0x3f, r0	; 63
     af8:	cd bf       	out	0x3d, r28	; 61
     afa:	cf 91       	pop	r28
     afc:	df 91       	pop	r29
     afe:	1f 91       	pop	r17
     b00:	0f 91       	pop	r16
     b02:	08 95       	ret

00000b04 <u_hex2dec>:
//                     
// Notes			 :
//----------------------------------------------------------------------------

INT8U u_hex2dec(INT8U c) 
{
     b04:	df 93       	push	r29
     b06:	cf 93       	push	r28
     b08:	00 d0       	rcall	.+0      	; 0xb0a <u_hex2dec+0x6>
     b0a:	cd b7       	in	r28, 0x3d	; 61
     b0c:	de b7       	in	r29, 0x3e	; 62
     b0e:	89 83       	std	Y+1, r24	; 0x01
	if ((c>='0') && (c<='9')) 
     b10:	89 81       	ldd	r24, Y+1	; 0x01
     b12:	80 33       	cpi	r24, 0x30	; 48
     b14:	40 f0       	brcs	.+16     	; 0xb26 <u_hex2dec+0x22>
     b16:	89 81       	ldd	r24, Y+1	; 0x01
     b18:	8a 33       	cpi	r24, 0x3A	; 58
     b1a:	28 f4       	brcc	.+10     	; 0xb26 <u_hex2dec+0x22>
    {
		return (c-0x30);
     b1c:	89 81       	ldd	r24, Y+1	; 0x01
     b1e:	98 2f       	mov	r25, r24
     b20:	90 53       	subi	r25, 0x30	; 48
     b22:	9a 83       	std	Y+2, r25	; 0x02
     b24:	17 c0       	rjmp	.+46     	; 0xb54 <u_hex2dec+0x50>
	}else if ((c>='A') && (c<='F')) 
     b26:	89 81       	ldd	r24, Y+1	; 0x01
     b28:	81 34       	cpi	r24, 0x41	; 65
     b2a:	40 f0       	brcs	.+16     	; 0xb3c <u_hex2dec+0x38>
     b2c:	89 81       	ldd	r24, Y+1	; 0x01
     b2e:	87 34       	cpi	r24, 0x47	; 71
     b30:	28 f4       	brcc	.+10     	; 0xb3c <u_hex2dec+0x38>
    {
		return (c-'A'+10);
     b32:	89 81       	ldd	r24, Y+1	; 0x01
     b34:	98 2f       	mov	r25, r24
     b36:	97 53       	subi	r25, 0x37	; 55
     b38:	9a 83       	std	Y+2, r25	; 0x02
     b3a:	0c c0       	rjmp	.+24     	; 0xb54 <u_hex2dec+0x50>
	}else if ((c>='a') && (c<='f')) 
     b3c:	89 81       	ldd	r24, Y+1	; 0x01
     b3e:	81 36       	cpi	r24, 0x61	; 97
     b40:	40 f0       	brcs	.+16     	; 0xb52 <u_hex2dec+0x4e>
     b42:	89 81       	ldd	r24, Y+1	; 0x01
     b44:	87 36       	cpi	r24, 0x67	; 103
     b46:	28 f4       	brcc	.+10     	; 0xb52 <u_hex2dec+0x4e>
    {
		return (c-'a'+10);
     b48:	89 81       	ldd	r24, Y+1	; 0x01
     b4a:	98 2f       	mov	r25, r24
     b4c:	97 55       	subi	r25, 0x57	; 87
     b4e:	9a 83       	std	Y+2, r25	; 0x02
     b50:	01 c0       	rjmp	.+2      	; 0xb54 <u_hex2dec+0x50>
	}

	return 0;
     b52:	1a 82       	std	Y+2, r1	; 0x02
     b54:	8a 81       	ldd	r24, Y+2	; 0x02
}
     b56:	0f 90       	pop	r0
     b58:	0f 90       	pop	r0
     b5a:	cf 91       	pop	r28
     b5c:	df 91       	pop	r29
     b5e:	08 95       	ret

00000b60 <u_putHexWord>:
//                     
// Notes			:
//----------------------------------------------------------------------------

void u_putHexWord(INT16U w)
{	
     b60:	df 93       	push	r29
     b62:	cf 93       	push	r28
     b64:	00 d0       	rcall	.+0      	; 0xb66 <u_putHexWord+0x6>
     b66:	cd b7       	in	r28, 0x3d	; 61
     b68:	de b7       	in	r29, 0x3e	; 62
     b6a:	9a 83       	std	Y+2, r25	; 0x02
     b6c:	89 83       	std	Y+1, r24	; 0x01
    u_putHexByte((INT8U) (w>>8),0);
     b6e:	89 81       	ldd	r24, Y+1	; 0x01
     b70:	9a 81       	ldd	r25, Y+2	; 0x02
     b72:	89 2f       	mov	r24, r25
     b74:	99 27       	eor	r25, r25
     b76:	60 e0       	ldi	r22, 0x00	; 0
     b78:	08 d0       	rcall	.+16     	; 0xb8a <u_putHexByte>
	u_putHexByte((INT8U) (w & 0xff),0);
     b7a:	89 81       	ldd	r24, Y+1	; 0x01
     b7c:	60 e0       	ldi	r22, 0x00	; 0
     b7e:	05 d0       	rcall	.+10     	; 0xb8a <u_putHexByte>
//    u_putch(' ');
}
     b80:	0f 90       	pop	r0
     b82:	0f 90       	pop	r0
     b84:	cf 91       	pop	r28
     b86:	df 91       	pop	r29
     b88:	08 95       	ret

00000b8a <u_putHexByte>:
//                     
// Notes			:
//----------------------------------------------------------------------------

void u_putHexByte(INT8U c, INT8U t) 
{
     b8a:	df 93       	push	r29
     b8c:	cf 93       	push	r28
     b8e:	00 d0       	rcall	.+0      	; 0xb90 <u_putHexByte+0x6>
     b90:	cd b7       	in	r28, 0x3d	; 61
     b92:	de b7       	in	r29, 0x3e	; 62
     b94:	89 83       	std	Y+1, r24	; 0x01
     b96:	6a 83       	std	Y+2, r22	; 0x02
	static const char STR_HEX[]="0123456789ABCDEF";
	u_putch(STR_HEX[(c&0xF0)>>4]);
     b98:	89 81       	ldd	r24, Y+1	; 0x01
     b9a:	82 95       	swap	r24
     b9c:	8f 70       	andi	r24, 0x0F	; 15
     b9e:	88 2f       	mov	r24, r24
     ba0:	90 e0       	ldi	r25, 0x00	; 0
     ba2:	90 70       	andi	r25, 0x00	; 0
     ba4:	fc 01       	movw	r30, r24
     ba6:	e3 5c       	subi	r30, 0xC3	; 195
     ba8:	fe 4f       	sbci	r31, 0xFE	; 254
     baa:	80 81       	ld	r24, Z
     bac:	14 d0       	rcall	.+40     	; 0xbd6 <u_putch>
	u_putch(STR_HEX[c&0x0F]);
     bae:	89 81       	ldd	r24, Y+1	; 0x01
     bb0:	88 2f       	mov	r24, r24
     bb2:	90 e0       	ldi	r25, 0x00	; 0
     bb4:	8f 70       	andi	r24, 0x0F	; 15
     bb6:	90 70       	andi	r25, 0x00	; 0
     bb8:	fc 01       	movw	r30, r24
     bba:	e3 5c       	subi	r30, 0xC3	; 195
     bbc:	fe 4f       	sbci	r31, 0xFE	; 254
     bbe:	80 81       	ld	r24, Z
     bc0:	0a d0       	rcall	.+20     	; 0xbd6 <u_putch>

    if (t != 0)
     bc2:	8a 81       	ldd	r24, Y+2	; 0x02
     bc4:	88 23       	and	r24, r24
     bc6:	11 f0       	breq	.+4      	; 0xbcc <u_putHexByte+0x42>
        u_putch(t);
     bc8:	8a 81       	ldd	r24, Y+2	; 0x02
     bca:	05 d0       	rcall	.+10     	; 0xbd6 <u_putch>

}
     bcc:	0f 90       	pop	r0
     bce:	0f 90       	pop	r0
     bd0:	cf 91       	pop	r28
     bd2:	df 91       	pop	r29
     bd4:	08 95       	ret

00000bd6 <u_putch>:
//                     
// Notes			:
//----------------------------------------------------------------------------

void u_putch(INT8U abyte) 
{
     bd6:	df 93       	push	r29
     bd8:	cf 93       	push	r28
     bda:	0f 92       	push	r0
     bdc:	cd b7       	in	r28, 0x3d	; 61
     bde:	de b7       	in	r29, 0x3e	; 62
     be0:	89 83       	std	Y+1, r24	; 0x01

	UCSRB |= 0x08; // enable transmitter
     be2:	aa e2       	ldi	r26, 0x2A	; 42
     be4:	b0 e0       	ldi	r27, 0x00	; 0
     be6:	ea e2       	ldi	r30, 0x2A	; 42
     be8:	f0 e0       	ldi	r31, 0x00	; 0
     bea:	80 81       	ld	r24, Z
     bec:	88 60       	ori	r24, 0x08	; 8
     bee:	8c 93       	st	X, r24

    while (!(UCSRA & 0x20))
     bf0:	eb e2       	ldi	r30, 0x2B	; 43
     bf2:	f0 e0       	ldi	r31, 0x00	; 0
     bf4:	80 81       	ld	r24, Z
     bf6:	88 2f       	mov	r24, r24
     bf8:	90 e0       	ldi	r25, 0x00	; 0
     bfa:	80 72       	andi	r24, 0x20	; 32
     bfc:	90 70       	andi	r25, 0x00	; 0
     bfe:	00 97       	sbiw	r24, 0x00	; 0
     c00:	b9 f3       	breq	.-18     	; 0xbf0 <u_putch+0x1a>
	{
		// do nothing
	}
	
    UDR = abyte;
     c02:	ec e2       	ldi	r30, 0x2C	; 44
     c04:	f0 e0       	ldi	r31, 0x00	; 0
     c06:	89 81       	ldd	r24, Y+1	; 0x01
     c08:	80 83       	st	Z, r24

}
     c0a:	0f 90       	pop	r0
     c0c:	cf 91       	pop	r28
     c0e:	df 91       	pop	r29
     c10:	08 95       	ret

00000c12 <u_puts>:
//                     
// Notes			:
//----------------------------------------------------------------------------

void u_puts( INT8U *sptr) 
{
     c12:	df 93       	push	r29
     c14:	cf 93       	push	r28
     c16:	00 d0       	rcall	.+0      	; 0xc18 <u_puts+0x6>
     c18:	cd b7       	in	r28, 0x3d	; 61
     c1a:	de b7       	in	r29, 0x3e	; 62
     c1c:	9a 83       	std	Y+2, r25	; 0x02
     c1e:	89 83       	std	Y+1, r24	; 0x01
     c20:	0a c0       	rjmp	.+20     	; 0xc36 <u_puts+0x24>
	while(*sptr != 0) 
        u_putch(*sptr++);
     c22:	e9 81       	ldd	r30, Y+1	; 0x01
     c24:	fa 81       	ldd	r31, Y+2	; 0x02
     c26:	20 81       	ld	r18, Z
     c28:	89 81       	ldd	r24, Y+1	; 0x01
     c2a:	9a 81       	ldd	r25, Y+2	; 0x02
     c2c:	01 96       	adiw	r24, 0x01	; 1
     c2e:	9a 83       	std	Y+2, r25	; 0x02
     c30:	89 83       	std	Y+1, r24	; 0x01
     c32:	82 2f       	mov	r24, r18
     c34:	d0 df       	rcall	.-96     	; 0xbd6 <u_putch>
// Notes			:
//----------------------------------------------------------------------------

void u_puts( INT8U *sptr) 
{
	while(*sptr != 0) 
     c36:	e9 81       	ldd	r30, Y+1	; 0x01
     c38:	fa 81       	ldd	r31, Y+2	; 0x02
     c3a:	80 81       	ld	r24, Z
     c3c:	88 23       	and	r24, r24
     c3e:	89 f7       	brne	.-30     	; 0xc22 <u_puts+0x10>
        u_putch(*sptr++);
}
     c40:	0f 90       	pop	r0
     c42:	0f 90       	pop	r0
     c44:	cf 91       	pop	r28
     c46:	df 91       	pop	r29
     c48:	08 95       	ret

00000c4a <u_toupper>:

INT8U u_toupper(INT8U c)

{
     c4a:	df 93       	push	r29
     c4c:	cf 93       	push	r28
     c4e:	00 d0       	rcall	.+0      	; 0xc50 <u_toupper+0x6>
     c50:	cd b7       	in	r28, 0x3d	; 61
     c52:	de b7       	in	r29, 0x3e	; 62
     c54:	89 83       	std	Y+1, r24	; 0x01

	if ((c>='a') && (c<='z'))		//convert lower case to upper case
     c56:	89 81       	ldd	r24, Y+1	; 0x01
     c58:	81 36       	cpi	r24, 0x61	; 97
     c5a:	40 f0       	brcs	.+16     	; 0xc6c <u_toupper+0x22>
     c5c:	89 81       	ldd	r24, Y+1	; 0x01
     c5e:	8b 37       	cpi	r24, 0x7B	; 123
     c60:	28 f4       	brcc	.+10     	; 0xc6c <u_toupper+0x22>
		return(c-0x20);
     c62:	89 81       	ldd	r24, Y+1	; 0x01
     c64:	98 2f       	mov	r25, r24
     c66:	90 52       	subi	r25, 0x20	; 32
     c68:	9a 83       	std	Y+2, r25	; 0x02
     c6a:	02 c0       	rjmp	.+4      	; 0xc70 <u_toupper+0x26>
	else
		return(c);
     c6c:	89 81       	ldd	r24, Y+1	; 0x01
     c6e:	8a 83       	std	Y+2, r24	; 0x02
     c70:	8a 81       	ldd	r24, Y+2	; 0x02

}
     c72:	0f 90       	pop	r0
     c74:	0f 90       	pop	r0
     c76:	cf 91       	pop	r28
     c78:	df 91       	pop	r29
     c7a:	08 95       	ret

00000c7c <process_remote_command>:
volatile unsigned char 	mCaptureState;
volatile unsigned char 	mCaptureRepeat;


void process_remote_command(char *input)
{
     c7c:	df 93       	push	r29
     c7e:	cf 93       	push	r28
     c80:	00 d0       	rcall	.+0      	; 0xc82 <process_remote_command+0x6>
     c82:	00 d0       	rcall	.+0      	; 0xc84 <process_remote_command+0x8>
     c84:	00 d0       	rcall	.+0      	; 0xc86 <process_remote_command+0xa>
     c86:	cd b7       	in	r28, 0x3d	; 61
     c88:	de b7       	in	r29, 0x3e	; 62
     c8a:	9c 83       	std	Y+4, r25	; 0x04
     c8c:	8b 83       	std	Y+3, r24	; 0x03
//	"~R{A}{B} {REPEAT} {CODE}
//  A = Action 	:  S = Send ; C = Capture ...
//	B = TYPE 	:  0 = IR; 1 = 433MHz; 2 = 335MHz; 3 = X10 ...
//

	char tType=0;
     c8e:	1a 82       	std	Y+2, r1	; 0x02
	char tAction = 0;
     c90:	19 82       	std	Y+1, r1	; 0x01

	tAction = *(input+1);
     c92:	8b 81       	ldd	r24, Y+3	; 0x03
     c94:	9c 81       	ldd	r25, Y+4	; 0x04
     c96:	fc 01       	movw	r30, r24
     c98:	31 96       	adiw	r30, 0x01	; 1
     c9a:	80 81       	ld	r24, Z
     c9c:	89 83       	std	Y+1, r24	; 0x01
	tType 	= *(input+2);
     c9e:	8b 81       	ldd	r24, Y+3	; 0x03
     ca0:	9c 81       	ldd	r25, Y+4	; 0x04
     ca2:	fc 01       	movw	r30, r24
     ca4:	32 96       	adiw	r30, 0x02	; 2
     ca6:	80 81       	ld	r24, Z
     ca8:	8a 83       	std	Y+2, r24	; 0x02

	switch (tType)
     caa:	8a 81       	ldd	r24, Y+2	; 0x02
     cac:	88 2f       	mov	r24, r24
     cae:	90 e0       	ldi	r25, 0x00	; 0
     cb0:	80 33       	cpi	r24, 0x30	; 48
     cb2:	91 05       	cpc	r25, r1
     cb4:	c1 f4       	brne	.+48     	; 0xce6 <process_remote_command+0x6a>
	{
		case '0':	// iR
			switch (tAction)
     cb6:	89 81       	ldd	r24, Y+1	; 0x01
     cb8:	28 2f       	mov	r18, r24
     cba:	30 e0       	ldi	r19, 0x00	; 0
     cbc:	3e 83       	std	Y+6, r19	; 0x06
     cbe:	2d 83       	std	Y+5, r18	; 0x05
     cc0:	8d 81       	ldd	r24, Y+5	; 0x05
     cc2:	9e 81       	ldd	r25, Y+6	; 0x06
     cc4:	83 34       	cpi	r24, 0x43	; 67
     cc6:	91 05       	cpc	r25, r1
     cc8:	51 f0       	breq	.+20     	; 0xcde <process_remote_command+0x62>
     cca:	2d 81       	ldd	r18, Y+5	; 0x05
     ccc:	3e 81       	ldd	r19, Y+6	; 0x06
     cce:	23 35       	cpi	r18, 0x53	; 83
     cd0:	31 05       	cpc	r19, r1
     cd2:	49 f4       	brne	.+18     	; 0xce6 <process_remote_command+0x6a>
			{
				case 'S':
					ir_init_send_pulse(input+4);
     cd4:	8b 81       	ldd	r24, Y+3	; 0x03
     cd6:	9c 81       	ldd	r25, Y+4	; 0x04
     cd8:	04 96       	adiw	r24, 0x04	; 4
     cda:	c3 d2       	rcall	.+1414   	; 0x1262 <ir_init_send_pulse>
     cdc:	04 c0       	rjmp	.+8      	; 0xce6 <process_remote_command+0x6a>
					break;
				case 'C':
					ir_init_capture_pulse(input+4);
     cde:	8b 81       	ldd	r24, Y+3	; 0x03
     ce0:	9c 81       	ldd	r25, Y+4	; 0x04
     ce2:	04 96       	adiw	r24, 0x04	; 4
     ce4:	03 d3       	rcall	.+1542   	; 0x12ec <ir_init_capture_pulse>
		default:
			break;
	
	}

}
     ce6:	26 96       	adiw	r28, 0x06	; 6
     ce8:	0f b6       	in	r0, 0x3f	; 63
     cea:	f8 94       	cli
     cec:	de bf       	out	0x3e, r29	; 62
     cee:	0f be       	out	0x3f, r0	; 63
     cf0:	cd bf       	out	0x3d, r28	; 61
     cf2:	cf 91       	pop	r28
     cf4:	df 91       	pop	r29
     cf6:	08 95       	ret

00000cf8 <decode_cpronto_code>:

void decode_cpronto_code(char *input)
{
     cf8:	0f 93       	push	r16
     cfa:	1f 93       	push	r17
     cfc:	df 93       	push	r29
     cfe:	cf 93       	push	r28
     d00:	cd b7       	in	r28, 0x3d	; 61
     d02:	de b7       	in	r29, 0x3e	; 62
     d04:	29 97       	sbiw	r28, 0x09	; 9
     d06:	0f b6       	in	r0, 0x3f	; 63
     d08:	f8 94       	cli
     d0a:	de bf       	out	0x3e, r29	; 62
     d0c:	0f be       	out	0x3f, r0	; 63
     d0e:	cd bf       	out	0x3d, r28	; 61
     d10:	99 87       	std	Y+9, r25	; 0x09
     d12:	88 87       	std	Y+8, r24	; 0x08
	unsigned char 	index;
	unsigned int  	tmp;
	unsigned int	type;
	unsigned char 	pattern_cnt;

	type 		 	= u_asc2uint(4,(char *) (input+3));
     d14:	88 85       	ldd	r24, Y+8	; 0x08
     d16:	99 85       	ldd	r25, Y+9	; 0x09
     d18:	9c 01       	movw	r18, r24
     d1a:	2d 5f       	subi	r18, 0xFD	; 253
     d1c:	3f 4f       	sbci	r19, 0xFF	; 255
     d1e:	84 e0       	ldi	r24, 0x04	; 4
     d20:	b9 01       	movw	r22, r18
     d22:	a6 de       	rcall	.-692    	; 0xa70 <u_asc2uint>
     d24:	9b 83       	std	Y+3, r25	; 0x03
     d26:	8a 83       	std	Y+2, r24	; 0x02
	if (type != 0x0001)
     d28:	8a 81       	ldd	r24, Y+2	; 0x02
     d2a:	9b 81       	ldd	r25, Y+3	; 0x03
     d2c:	81 30       	cpi	r24, 0x01	; 1
     d2e:	91 05       	cpc	r25, r1
     d30:	09 f0       	breq	.+2      	; 0xd34 <decode_cpronto_code+0x3c>
     d32:	d9 c0       	rjmp	.+434    	; 0xee6 <decode_cpronto_code+0x1ee>
	{
		return;
	}

	index = 0;
     d34:	1e 82       	std	Y+6, r1	; 0x06
	mPulseRepeat 	= u_asc2uint(2,(char *) (input));
     d36:	28 85       	ldd	r18, Y+8	; 0x08
     d38:	39 85       	ldd	r19, Y+9	; 0x09
     d3a:	82 e0       	ldi	r24, 0x02	; 2
     d3c:	b9 01       	movw	r22, r18
     d3e:	98 de       	rcall	.-720    	; 0xa70 <u_asc2uint>
     d40:	80 93 17 02 	sts	0x0217, r24
	mPulseFreq 		= u_asc2uint(4,(char *) (input+8));
     d44:	88 85       	ldd	r24, Y+8	; 0x08
     d46:	99 85       	ldd	r25, Y+9	; 0x09
     d48:	9c 01       	movw	r18, r24
     d4a:	28 5f       	subi	r18, 0xF8	; 248
     d4c:	3f 4f       	sbci	r19, 0xFF	; 255
     d4e:	84 e0       	ldi	r24, 0x04	; 4
     d50:	b9 01       	movw	r22, r18
     d52:	8e de       	rcall	.-740    	; 0xa70 <u_asc2uint>
     d54:	90 93 b0 03 	sts	0x03B0, r25
     d58:	80 93 af 03 	sts	0x03AF, r24

	tmp = mPulseFreq << 4;
     d5c:	80 91 af 03 	lds	r24, 0x03AF
     d60:	90 91 b0 03 	lds	r25, 0x03B0
     d64:	82 95       	swap	r24
     d66:	92 95       	swap	r25
     d68:	90 7f       	andi	r25, 0xF0	; 240
     d6a:	98 27       	eor	r25, r24
     d6c:	80 7f       	andi	r24, 0xF0	; 240
     d6e:	98 27       	eor	r25, r24
     d70:	9d 83       	std	Y+5, r25	; 0x05
     d72:	8c 83       	std	Y+4, r24	; 0x04
	tmp = tmp - (mPulseFreq <<1);
     d74:	80 91 af 03 	lds	r24, 0x03AF
     d78:	90 91 b0 03 	lds	r25, 0x03B0
     d7c:	9c 01       	movw	r18, r24
     d7e:	22 0f       	add	r18, r18
     d80:	33 1f       	adc	r19, r19
     d82:	8c 81       	ldd	r24, Y+4	; 0x04
     d84:	9d 81       	ldd	r25, Y+5	; 0x05
     d86:	82 1b       	sub	r24, r18
     d88:	93 0b       	sbc	r25, r19
     d8a:	9d 83       	std	Y+5, r25	; 0x05
     d8c:	8c 83       	std	Y+4, r24	; 0x04
	tmp = tmp >> 5;
     d8e:	8c 81       	ldd	r24, Y+4	; 0x04
     d90:	9d 81       	ldd	r25, Y+5	; 0x05
     d92:	96 95       	lsr	r25
     d94:	87 95       	ror	r24
     d96:	92 95       	swap	r25
     d98:	82 95       	swap	r24
     d9a:	8f 70       	andi	r24, 0x0F	; 15
     d9c:	89 27       	eor	r24, r25
     d9e:	9f 70       	andi	r25, 0x0F	; 15
     da0:	89 27       	eor	r24, r25
     da2:	9d 83       	std	Y+5, r25	; 0x05
     da4:	8c 83       	std	Y+4, r24	; 0x04
	tmp += mPulseFreq;
     da6:	20 91 af 03 	lds	r18, 0x03AF
     daa:	30 91 b0 03 	lds	r19, 0x03B0
     dae:	8c 81       	ldd	r24, Y+4	; 0x04
     db0:	9d 81       	ldd	r25, Y+5	; 0x05
     db2:	82 0f       	add	r24, r18
     db4:	93 1f       	adc	r25, r19
     db6:	9d 83       	std	Y+5, r25	; 0x05
     db8:	8c 83       	std	Y+4, r24	; 0x04

	mPulseFreq = tmp+1;
     dba:	8c 81       	ldd	r24, Y+4	; 0x04
     dbc:	9d 81       	ldd	r25, Y+5	; 0x05
     dbe:	01 96       	adiw	r24, 0x01	; 1
     dc0:	90 93 b0 03 	sts	0x03B0, r25
     dc4:	80 93 af 03 	sts	0x03AF, r24

	pattern_cnt = u_asc2uint(2,(char *) (input+13));
     dc8:	88 85       	ldd	r24, Y+8	; 0x08
     dca:	99 85       	ldd	r25, Y+9	; 0x09
     dcc:	9c 01       	movw	r18, r24
     dce:	23 5f       	subi	r18, 0xF3	; 243
     dd0:	3f 4f       	sbci	r19, 0xFF	; 255
     dd2:	82 e0       	ldi	r24, 0x02	; 2
     dd4:	b9 01       	movw	r22, r18
     dd6:	4c de       	rcall	.-872    	; 0xa70 <u_asc2uint>
     dd8:	89 83       	std	Y+1, r24	; 0x01
	mPulseLen 	= u_asc2uint(2,(char *) (input+16));
     dda:	88 85       	ldd	r24, Y+8	; 0x08
     ddc:	99 85       	ldd	r25, Y+9	; 0x09
     dde:	9c 01       	movw	r18, r24
     de0:	20 5f       	subi	r18, 0xF0	; 240
     de2:	3f 4f       	sbci	r19, 0xFF	; 255
     de4:	82 e0       	ldi	r24, 0x02	; 2
     de6:	b9 01       	movw	r22, r18
     de8:	43 de       	rcall	.-890    	; 0xa70 <u_asc2uint>
     dea:	80 93 ad 03 	sts	0x03AD, r24


	index = 19;
     dee:	83 e1       	ldi	r24, 0x13	; 19
     df0:	8e 83       	std	Y+6, r24	; 0x06
	for (i=0; i<=7; i++)
     df2:	1f 82       	std	Y+7, r1	; 0x07
     df4:	58 c0       	rjmp	.+176    	; 0xea6 <decode_cpronto_code+0x1ae>
	{
		if (i<pattern_cnt)
     df6:	9f 81       	ldd	r25, Y+7	; 0x07
     df8:	89 81       	ldd	r24, Y+1	; 0x01
     dfa:	98 17       	cp	r25, r24
     dfc:	c0 f5       	brcc	.+112    	; 0xe6e <decode_cpronto_code+0x176>
		{	
			mPulseTable[i][0] = u_asc2uint(4,(char *) (input+index));
     dfe:	8f 81       	ldd	r24, Y+7	; 0x07
     e00:	08 2f       	mov	r16, r24
     e02:	10 e0       	ldi	r17, 0x00	; 0
     e04:	8e 81       	ldd	r24, Y+6	; 0x06
     e06:	28 2f       	mov	r18, r24
     e08:	30 e0       	ldi	r19, 0x00	; 0
     e0a:	88 85       	ldd	r24, Y+8	; 0x08
     e0c:	99 85       	ldd	r25, Y+9	; 0x09
     e0e:	28 0f       	add	r18, r24
     e10:	39 1f       	adc	r19, r25
     e12:	84 e0       	ldi	r24, 0x04	; 4
     e14:	b9 01       	movw	r22, r18
     e16:	2c de       	rcall	.-936    	; 0xa70 <u_asc2uint>
     e18:	9c 01       	movw	r18, r24
     e1a:	c8 01       	movw	r24, r16
     e1c:	88 0f       	add	r24, r24
     e1e:	99 1f       	adc	r25, r25
     e20:	88 0f       	add	r24, r24
     e22:	99 1f       	adc	r25, r25
     e24:	fc 01       	movw	r30, r24
     e26:	e9 50       	subi	r30, 0x09	; 9
     e28:	fe 4f       	sbci	r31, 0xFE	; 254
     e2a:	31 83       	std	Z+1, r19	; 0x01
     e2c:	20 83       	st	Z, r18
			mPulseTable[i][1] = u_asc2uint(4,(char *) (input+index+4));
     e2e:	8f 81       	ldd	r24, Y+7	; 0x07
     e30:	08 2f       	mov	r16, r24
     e32:	10 e0       	ldi	r17, 0x00	; 0
     e34:	8e 81       	ldd	r24, Y+6	; 0x06
     e36:	88 2f       	mov	r24, r24
     e38:	90 e0       	ldi	r25, 0x00	; 0
     e3a:	9c 01       	movw	r18, r24
     e3c:	2c 5f       	subi	r18, 0xFC	; 252
     e3e:	3f 4f       	sbci	r19, 0xFF	; 255
     e40:	88 85       	ldd	r24, Y+8	; 0x08
     e42:	99 85       	ldd	r25, Y+9	; 0x09
     e44:	28 0f       	add	r18, r24
     e46:	39 1f       	adc	r19, r25
     e48:	84 e0       	ldi	r24, 0x04	; 4
     e4a:	b9 01       	movw	r22, r18
     e4c:	11 de       	rcall	.-990    	; 0xa70 <u_asc2uint>
     e4e:	9c 01       	movw	r18, r24
     e50:	c8 01       	movw	r24, r16
     e52:	88 0f       	add	r24, r24
     e54:	99 1f       	adc	r25, r25
     e56:	01 96       	adiw	r24, 0x01	; 1
     e58:	88 0f       	add	r24, r24
     e5a:	99 1f       	adc	r25, r25
     e5c:	fc 01       	movw	r30, r24
     e5e:	e9 50       	subi	r30, 0x09	; 9
     e60:	fe 4f       	sbci	r31, 0xFE	; 254
     e62:	31 83       	std	Z+1, r19	; 0x01
     e64:	20 83       	st	Z, r18
			index = index + 9;	
     e66:	8e 81       	ldd	r24, Y+6	; 0x06
     e68:	87 5f       	subi	r24, 0xF7	; 247
     e6a:	8e 83       	std	Y+6, r24	; 0x06
     e6c:	19 c0       	rjmp	.+50     	; 0xea0 <decode_cpronto_code+0x1a8>
		}
		else
		{
			mPulseTable[i][0] = 0;
     e6e:	8f 81       	ldd	r24, Y+7	; 0x07
     e70:	88 2f       	mov	r24, r24
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	88 0f       	add	r24, r24
     e76:	99 1f       	adc	r25, r25
     e78:	88 0f       	add	r24, r24
     e7a:	99 1f       	adc	r25, r25
     e7c:	fc 01       	movw	r30, r24
     e7e:	e9 50       	subi	r30, 0x09	; 9
     e80:	fe 4f       	sbci	r31, 0xFE	; 254
     e82:	11 82       	std	Z+1, r1	; 0x01
     e84:	10 82       	st	Z, r1
			mPulseTable[i][1] = 0;
     e86:	8f 81       	ldd	r24, Y+7	; 0x07
     e88:	88 2f       	mov	r24, r24
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	88 0f       	add	r24, r24
     e8e:	99 1f       	adc	r25, r25
     e90:	01 96       	adiw	r24, 0x01	; 1
     e92:	88 0f       	add	r24, r24
     e94:	99 1f       	adc	r25, r25
     e96:	fc 01       	movw	r30, r24
     e98:	e9 50       	subi	r30, 0x09	; 9
     e9a:	fe 4f       	sbci	r31, 0xFE	; 254
     e9c:	11 82       	std	Z+1, r1	; 0x01
     e9e:	10 82       	st	Z, r1
	pattern_cnt = u_asc2uint(2,(char *) (input+13));
	mPulseLen 	= u_asc2uint(2,(char *) (input+16));


	index = 19;
	for (i=0; i<=7; i++)
     ea0:	8f 81       	ldd	r24, Y+7	; 0x07
     ea2:	8f 5f       	subi	r24, 0xFF	; 255
     ea4:	8f 83       	std	Y+7, r24	; 0x07
     ea6:	8f 81       	ldd	r24, Y+7	; 0x07
     ea8:	88 30       	cpi	r24, 0x08	; 8
     eaa:	08 f4       	brcc	.+2      	; 0xeae <decode_cpronto_code+0x1b6>
     eac:	a4 cf       	rjmp	.-184    	; 0xdf6 <decode_cpronto_code+0xfe>
			mPulseTable[i][1] = 0;
		}
	}


	for (i=0; i<sizeof(mPulseCode); i++)
     eae:	1f 82       	std	Y+7, r1	; 0x07
     eb0:	17 c0       	rjmp	.+46     	; 0xee0 <decode_cpronto_code+0x1e8>
	{
		mPulseCode[i]=u_asc2uint(2,(char *) (input+index));		
     eb2:	8f 81       	ldd	r24, Y+7	; 0x07
     eb4:	08 2f       	mov	r16, r24
     eb6:	10 e0       	ldi	r17, 0x00	; 0
     eb8:	8e 81       	ldd	r24, Y+6	; 0x06
     eba:	28 2f       	mov	r18, r24
     ebc:	30 e0       	ldi	r19, 0x00	; 0
     ebe:	88 85       	ldd	r24, Y+8	; 0x08
     ec0:	99 85       	ldd	r25, Y+9	; 0x09
     ec2:	28 0f       	add	r18, r24
     ec4:	39 1f       	adc	r19, r25
     ec6:	82 e0       	ldi	r24, 0x02	; 2
     ec8:	b9 01       	movw	r22, r18
     eca:	d2 dd       	rcall	.-1116   	; 0xa70 <u_asc2uint>
     ecc:	f8 01       	movw	r30, r16
     ece:	ee 54       	subi	r30, 0x4E	; 78
     ed0:	fc 4f       	sbci	r31, 0xFC	; 252
     ed2:	80 83       	st	Z, r24
		index = index + 2;
     ed4:	8e 81       	ldd	r24, Y+6	; 0x06
     ed6:	8e 5f       	subi	r24, 0xFE	; 254
     ed8:	8e 83       	std	Y+6, r24	; 0x06
			mPulseTable[i][1] = 0;
		}
	}


	for (i=0; i<sizeof(mPulseCode); i++)
     eda:	8f 81       	ldd	r24, Y+7	; 0x07
     edc:	8f 5f       	subi	r24, 0xFF	; 255
     ede:	8f 83       	std	Y+7, r24	; 0x07
     ee0:	8f 81       	ldd	r24, Y+7	; 0x07
     ee2:	80 32       	cpi	r24, 0x20	; 32
     ee4:	30 f3       	brcs	.-52     	; 0xeb2 <decode_cpronto_code+0x1ba>
		mPulseCode[i]=u_asc2uint(2,(char *) (input+index));		
		index = index + 2;

	}

}
     ee6:	29 96       	adiw	r28, 0x09	; 9
     ee8:	0f b6       	in	r0, 0x3f	; 63
     eea:	f8 94       	cli
     eec:	de bf       	out	0x3e, r29	; 62
     eee:	0f be       	out	0x3f, r0	; 63
     ef0:	cd bf       	out	0x3d, r28	; 61
     ef2:	cf 91       	pop	r28
     ef4:	df 91       	pop	r29
     ef6:	1f 91       	pop	r17
     ef8:	0f 91       	pop	r16
     efa:	08 95       	ret

00000efc <decode_pronto_code>:

void decode_pronto_code(char *input)
{
     efc:	0f 93       	push	r16
     efe:	1f 93       	push	r17
     f00:	df 93       	push	r29
     f02:	cf 93       	push	r28
     f04:	00 d0       	rcall	.+0      	; 0xf06 <decode_pronto_code+0xa>
     f06:	00 d0       	rcall	.+0      	; 0xf08 <decode_pronto_code+0xc>
     f08:	00 d0       	rcall	.+0      	; 0xf0a <decode_pronto_code+0xe>
     f0a:	cd b7       	in	r28, 0x3d	; 61
     f0c:	de b7       	in	r29, 0x3e	; 62
     f0e:	9e 83       	std	Y+6, r25	; 0x06
     f10:	8d 83       	std	Y+5, r24	; 0x05

	unsigned char i;
	unsigned char index;
	unsigned int  tmp;

	mPulseRepeat 	= u_asc2uint(2,(char *) (input));
     f12:	2d 81       	ldd	r18, Y+5	; 0x05
     f14:	3e 81       	ldd	r19, Y+6	; 0x06
     f16:	82 e0       	ldi	r24, 0x02	; 2
     f18:	b9 01       	movw	r22, r18
     f1a:	aa dd       	rcall	.-1196   	; 0xa70 <u_asc2uint>
     f1c:	80 93 17 02 	sts	0x0217, r24
	mPulseFreq 		= u_asc2uint(4,(char *) (input+3));
     f20:	8d 81       	ldd	r24, Y+5	; 0x05
     f22:	9e 81       	ldd	r25, Y+6	; 0x06
     f24:	9c 01       	movw	r18, r24
     f26:	2d 5f       	subi	r18, 0xFD	; 253
     f28:	3f 4f       	sbci	r19, 0xFF	; 255
     f2a:	84 e0       	ldi	r24, 0x04	; 4
     f2c:	b9 01       	movw	r22, r18
     f2e:	a0 dd       	rcall	.-1216   	; 0xa70 <u_asc2uint>
     f30:	90 93 b0 03 	sts	0x03B0, r25
     f34:	80 93 af 03 	sts	0x03AF, r24

	tmp = mPulseFreq << 4;
     f38:	80 91 af 03 	lds	r24, 0x03AF
     f3c:	90 91 b0 03 	lds	r25, 0x03B0
     f40:	82 95       	swap	r24
     f42:	92 95       	swap	r25
     f44:	90 7f       	andi	r25, 0xF0	; 240
     f46:	98 27       	eor	r25, r24
     f48:	80 7f       	andi	r24, 0xF0	; 240
     f4a:	98 27       	eor	r25, r24
     f4c:	9a 83       	std	Y+2, r25	; 0x02
     f4e:	89 83       	std	Y+1, r24	; 0x01
	tmp = tmp - (mPulseFreq <<1);
     f50:	80 91 af 03 	lds	r24, 0x03AF
     f54:	90 91 b0 03 	lds	r25, 0x03B0
     f58:	9c 01       	movw	r18, r24
     f5a:	22 0f       	add	r18, r18
     f5c:	33 1f       	adc	r19, r19
     f5e:	89 81       	ldd	r24, Y+1	; 0x01
     f60:	9a 81       	ldd	r25, Y+2	; 0x02
     f62:	82 1b       	sub	r24, r18
     f64:	93 0b       	sbc	r25, r19
     f66:	9a 83       	std	Y+2, r25	; 0x02
     f68:	89 83       	std	Y+1, r24	; 0x01
	tmp = tmp >> 5;
     f6a:	89 81       	ldd	r24, Y+1	; 0x01
     f6c:	9a 81       	ldd	r25, Y+2	; 0x02
     f6e:	96 95       	lsr	r25
     f70:	87 95       	ror	r24
     f72:	92 95       	swap	r25
     f74:	82 95       	swap	r24
     f76:	8f 70       	andi	r24, 0x0F	; 15
     f78:	89 27       	eor	r24, r25
     f7a:	9f 70       	andi	r25, 0x0F	; 15
     f7c:	89 27       	eor	r24, r25
     f7e:	9a 83       	std	Y+2, r25	; 0x02
     f80:	89 83       	std	Y+1, r24	; 0x01
	tmp += mPulseFreq;
     f82:	20 91 af 03 	lds	r18, 0x03AF
     f86:	30 91 b0 03 	lds	r19, 0x03B0
     f8a:	89 81       	ldd	r24, Y+1	; 0x01
     f8c:	9a 81       	ldd	r25, Y+2	; 0x02
     f8e:	82 0f       	add	r24, r18
     f90:	93 1f       	adc	r25, r19
     f92:	9a 83       	std	Y+2, r25	; 0x02
     f94:	89 83       	std	Y+1, r24	; 0x01

	mPulseFreq = tmp+1;
     f96:	89 81       	ldd	r24, Y+1	; 0x01
     f98:	9a 81       	ldd	r25, Y+2	; 0x02
     f9a:	01 96       	adiw	r24, 0x01	; 1
     f9c:	90 93 b0 03 	sts	0x03B0, r25
     fa0:	80 93 af 03 	sts	0x03AF, r24


	index = 8;
     fa4:	88 e0       	ldi	r24, 0x08	; 8
     fa6:	8b 83       	std	Y+3, r24	; 0x03
	for (i=0; i<=7; i++)
     fa8:	1c 82       	std	Y+4, r1	; 0x04
     faa:	3a c0       	rjmp	.+116    	; 0x1020 <decode_pronto_code+0x124>
	{
		mPulseTable[i][0] = u_asc2uint(4,(char *) (input+index));
     fac:	8c 81       	ldd	r24, Y+4	; 0x04
     fae:	08 2f       	mov	r16, r24
     fb0:	10 e0       	ldi	r17, 0x00	; 0
     fb2:	8b 81       	ldd	r24, Y+3	; 0x03
     fb4:	28 2f       	mov	r18, r24
     fb6:	30 e0       	ldi	r19, 0x00	; 0
     fb8:	8d 81       	ldd	r24, Y+5	; 0x05
     fba:	9e 81       	ldd	r25, Y+6	; 0x06
     fbc:	28 0f       	add	r18, r24
     fbe:	39 1f       	adc	r19, r25
     fc0:	84 e0       	ldi	r24, 0x04	; 4
     fc2:	b9 01       	movw	r22, r18
     fc4:	55 dd       	rcall	.-1366   	; 0xa70 <u_asc2uint>
     fc6:	9c 01       	movw	r18, r24
     fc8:	c8 01       	movw	r24, r16
     fca:	88 0f       	add	r24, r24
     fcc:	99 1f       	adc	r25, r25
     fce:	88 0f       	add	r24, r24
     fd0:	99 1f       	adc	r25, r25
     fd2:	fc 01       	movw	r30, r24
     fd4:	e9 50       	subi	r30, 0x09	; 9
     fd6:	fe 4f       	sbci	r31, 0xFE	; 254
     fd8:	31 83       	std	Z+1, r19	; 0x01
     fda:	20 83       	st	Z, r18
		mPulseTable[i][1] = u_asc2uint(4,(char *) (input+index+4));
     fdc:	8c 81       	ldd	r24, Y+4	; 0x04
     fde:	08 2f       	mov	r16, r24
     fe0:	10 e0       	ldi	r17, 0x00	; 0
     fe2:	8b 81       	ldd	r24, Y+3	; 0x03
     fe4:	88 2f       	mov	r24, r24
     fe6:	90 e0       	ldi	r25, 0x00	; 0
     fe8:	9c 01       	movw	r18, r24
     fea:	2c 5f       	subi	r18, 0xFC	; 252
     fec:	3f 4f       	sbci	r19, 0xFF	; 255
     fee:	8d 81       	ldd	r24, Y+5	; 0x05
     ff0:	9e 81       	ldd	r25, Y+6	; 0x06
     ff2:	28 0f       	add	r18, r24
     ff4:	39 1f       	adc	r19, r25
     ff6:	84 e0       	ldi	r24, 0x04	; 4
     ff8:	b9 01       	movw	r22, r18
     ffa:	3a dd       	rcall	.-1420   	; 0xa70 <u_asc2uint>
     ffc:	9c 01       	movw	r18, r24
     ffe:	c8 01       	movw	r24, r16
    1000:	88 0f       	add	r24, r24
    1002:	99 1f       	adc	r25, r25
    1004:	01 96       	adiw	r24, 0x01	; 1
    1006:	88 0f       	add	r24, r24
    1008:	99 1f       	adc	r25, r25
    100a:	fc 01       	movw	r30, r24
    100c:	e9 50       	subi	r30, 0x09	; 9
    100e:	fe 4f       	sbci	r31, 0xFE	; 254
    1010:	31 83       	std	Z+1, r19	; 0x01
    1012:	20 83       	st	Z, r18
		index = index + 9;	
    1014:	8b 81       	ldd	r24, Y+3	; 0x03
    1016:	87 5f       	subi	r24, 0xF7	; 247
    1018:	8b 83       	std	Y+3, r24	; 0x03

	mPulseFreq = tmp+1;


	index = 8;
	for (i=0; i<=7; i++)
    101a:	8c 81       	ldd	r24, Y+4	; 0x04
    101c:	8f 5f       	subi	r24, 0xFF	; 255
    101e:	8c 83       	std	Y+4, r24	; 0x04
    1020:	8c 81       	ldd	r24, Y+4	; 0x04
    1022:	88 30       	cpi	r24, 0x08	; 8
    1024:	18 f2       	brcs	.-122    	; 0xfac <decode_pronto_code+0xb0>
		mPulseTable[i][0] = u_asc2uint(4,(char *) (input+index));
		mPulseTable[i][1] = u_asc2uint(4,(char *) (input+index+4));
		index = index + 9;	
	}

	mPulseLen = u_asc2uint(2,(char *) (input+index));
    1026:	8b 81       	ldd	r24, Y+3	; 0x03
    1028:	28 2f       	mov	r18, r24
    102a:	30 e0       	ldi	r19, 0x00	; 0
    102c:	8d 81       	ldd	r24, Y+5	; 0x05
    102e:	9e 81       	ldd	r25, Y+6	; 0x06
    1030:	28 0f       	add	r18, r24
    1032:	39 1f       	adc	r19, r25
    1034:	82 e0       	ldi	r24, 0x02	; 2
    1036:	b9 01       	movw	r22, r18
    1038:	1b dd       	rcall	.-1482   	; 0xa70 <u_asc2uint>
    103a:	80 93 ad 03 	sts	0x03AD, r24

	index = index + 3;
    103e:	8b 81       	ldd	r24, Y+3	; 0x03
    1040:	8d 5f       	subi	r24, 0xFD	; 253
    1042:	8b 83       	std	Y+3, r24	; 0x03
	for (i=0; i<sizeof(mPulseCode); i++)
    1044:	1c 82       	std	Y+4, r1	; 0x04
    1046:	17 c0       	rjmp	.+46     	; 0x1076 <decode_pronto_code+0x17a>
	{
		mPulseCode[i]=u_asc2uint(2,(char *) (input+index));		
    1048:	8c 81       	ldd	r24, Y+4	; 0x04
    104a:	08 2f       	mov	r16, r24
    104c:	10 e0       	ldi	r17, 0x00	; 0
    104e:	8b 81       	ldd	r24, Y+3	; 0x03
    1050:	28 2f       	mov	r18, r24
    1052:	30 e0       	ldi	r19, 0x00	; 0
    1054:	8d 81       	ldd	r24, Y+5	; 0x05
    1056:	9e 81       	ldd	r25, Y+6	; 0x06
    1058:	28 0f       	add	r18, r24
    105a:	39 1f       	adc	r19, r25
    105c:	82 e0       	ldi	r24, 0x02	; 2
    105e:	b9 01       	movw	r22, r18
    1060:	07 dd       	rcall	.-1522   	; 0xa70 <u_asc2uint>
    1062:	f8 01       	movw	r30, r16
    1064:	ee 54       	subi	r30, 0x4E	; 78
    1066:	fc 4f       	sbci	r31, 0xFC	; 252
    1068:	80 83       	st	Z, r24
		index = index + 2;
    106a:	8b 81       	ldd	r24, Y+3	; 0x03
    106c:	8e 5f       	subi	r24, 0xFE	; 254
    106e:	8b 83       	std	Y+3, r24	; 0x03
	}

	mPulseLen = u_asc2uint(2,(char *) (input+index));

	index = index + 3;
	for (i=0; i<sizeof(mPulseCode); i++)
    1070:	8c 81       	ldd	r24, Y+4	; 0x04
    1072:	8f 5f       	subi	r24, 0xFF	; 255
    1074:	8c 83       	std	Y+4, r24	; 0x04
    1076:	8c 81       	ldd	r24, Y+4	; 0x04
    1078:	80 32       	cpi	r24, 0x20	; 32
    107a:	30 f3       	brcs	.-52     	; 0x1048 <decode_pronto_code+0x14c>
	{
		mPulseCode[i]=u_asc2uint(2,(char *) (input+index));		
		index = index + 2;
	}

}
    107c:	26 96       	adiw	r28, 0x06	; 6
    107e:	0f b6       	in	r0, 0x3f	; 63
    1080:	f8 94       	cli
    1082:	de bf       	out	0x3e, r29	; 62
    1084:	0f be       	out	0x3f, r0	; 63
    1086:	cd bf       	out	0x3d, r28	; 61
    1088:	cf 91       	pop	r28
    108a:	df 91       	pop	r29
    108c:	1f 91       	pop	r17
    108e:	0f 91       	pop	r16
    1090:	08 95       	ret

00001092 <ir_send_pulse>:

void ir_send_pulse(unsigned int ipulse0, unsigned int ipulse1)
{
    1092:	df 93       	push	r29
    1094:	cf 93       	push	r28
    1096:	00 d0       	rcall	.+0      	; 0x1098 <ir_send_pulse+0x6>
    1098:	00 d0       	rcall	.+0      	; 0x109a <ir_send_pulse+0x8>
    109a:	cd b7       	in	r28, 0x3d	; 61
    109c:	de b7       	in	r29, 0x3e	; 62
    109e:	9a 83       	std	Y+2, r25	; 0x02
    10a0:	89 83       	std	Y+1, r24	; 0x01
    10a2:	7c 83       	std	Y+4, r23	; 0x04
    10a4:	6b 83       	std	Y+3, r22	; 0x03

	TIMSK  &= ~0b00111100;  // Disable all TIMER1 interupt
    10a6:	a9 e5       	ldi	r26, 0x59	; 89
    10a8:	b0 e0       	ldi	r27, 0x00	; 0
    10aa:	e9 e5       	ldi	r30, 0x59	; 89
    10ac:	f0 e0       	ldi	r31, 0x00	; 0
    10ae:	80 81       	ld	r24, Z
    10b0:	83 7c       	andi	r24, 0xC3	; 195
    10b2:	8c 93       	st	X, r24
	TIMSK  |=  0b00010000;	// Enable OC1A interrupt
    10b4:	a9 e5       	ldi	r26, 0x59	; 89
    10b6:	b0 e0       	ldi	r27, 0x00	; 0
    10b8:	e9 e5       	ldi	r30, 0x59	; 89
    10ba:	f0 e0       	ldi	r31, 0x00	; 0
    10bc:	80 81       	ld	r24, Z
    10be:	80 61       	ori	r24, 0x10	; 16
    10c0:	8c 93       	st	X, r24

	TCCR1B 		&= 0b11111000;			// Stop Clock
    10c2:	ae e4       	ldi	r26, 0x4E	; 78
    10c4:	b0 e0       	ldi	r27, 0x00	; 0
    10c6:	ee e4       	ldi	r30, 0x4E	; 78
    10c8:	f0 e0       	ldi	r31, 0x00	; 0
    10ca:	80 81       	ld	r24, Z
    10cc:	88 7f       	andi	r24, 0xF8	; 248
    10ce:	8c 93       	st	X, r24
	PORTC  		|= (1 << LED3);			// Set LED3
    10d0:	a5 e3       	ldi	r26, 0x35	; 53
    10d2:	b0 e0       	ldi	r27, 0x00	; 0
    10d4:	e5 e3       	ldi	r30, 0x35	; 53
    10d6:	f0 e0       	ldi	r31, 0x00	; 0
    10d8:	80 81       	ld	r24, Z
    10da:	84 60       	ori	r24, 0x04	; 4
    10dc:	8c 93       	st	X, r24
	PORTB  		&= ~(0x02);				// Set OC1A pin to "0"
    10de:	a8 e3       	ldi	r26, 0x38	; 56
    10e0:	b0 e0       	ldi	r27, 0x00	; 0
    10e2:	e8 e3       	ldi	r30, 0x38	; 56
    10e4:	f0 e0       	ldi	r31, 0x00	; 0
    10e6:	80 81       	ld	r24, Z
    10e8:	8d 7f       	andi	r24, 0xFD	; 253
    10ea:	8c 93       	st	X, r24
	mTxFlag		= 1;					// Set Tx Flag
    10ec:	81 e0       	ldi	r24, 0x01	; 1
    10ee:	80 93 ae 03 	sts	0x03AE, r24
	TCCR1A  	= 0b01001000;			// Toggle OC1A on compare
    10f2:	ef e4       	ldi	r30, 0x4F	; 79
    10f4:	f0 e0       	ldi	r31, 0x00	; 0
    10f6:	88 e4       	ldi	r24, 0x48	; 72
    10f8:	80 83       	st	Z, r24
	TCNT1  		= 0;					// Clear TIMER 1
    10fa:	ec e4       	ldi	r30, 0x4C	; 76
    10fc:	f0 e0       	ldi	r31, 0x00	; 0
    10fe:	11 82       	std	Z+1, r1	; 0x01
    1100:	10 82       	st	Z, r1
	mPulseCnt 	= (ipulse0+ipulse1)<<1;	// High Pulse
    1102:	29 81       	ldd	r18, Y+1	; 0x01
    1104:	3a 81       	ldd	r19, Y+2	; 0x02
    1106:	8b 81       	ldd	r24, Y+3	; 0x03
    1108:	9c 81       	ldd	r25, Y+4	; 0x04
    110a:	82 0f       	add	r24, r18
    110c:	93 1f       	adc	r25, r19
    110e:	88 0f       	add	r24, r24
    1110:	99 1f       	adc	r25, r25
    1112:	90 93 1a 02 	sts	0x021A, r25
    1116:	80 93 19 02 	sts	0x0219, r24
	mPulse[0] 	= (ipulse0+ipulse1)<<1;	// Low  Pulse
    111a:	29 81       	ldd	r18, Y+1	; 0x01
    111c:	3a 81       	ldd	r19, Y+2	; 0x02
    111e:	8b 81       	ldd	r24, Y+3	; 0x03
    1120:	9c 81       	ldd	r25, Y+4	; 0x04
    1122:	82 0f       	add	r24, r18
    1124:	93 1f       	adc	r25, r19
    1126:	88 0f       	add	r24, r24
    1128:	99 1f       	adc	r25, r25
    112a:	90 93 d4 03 	sts	0x03D4, r25
    112e:	80 93 d3 03 	sts	0x03D3, r24
	mPulse[1] 	= (ipulse1) << 1;	
    1132:	8b 81       	ldd	r24, Y+3	; 0x03
    1134:	9c 81       	ldd	r25, Y+4	; 0x04
    1136:	88 0f       	add	r24, r24
    1138:	99 1f       	adc	r25, r25
    113a:	90 93 d6 03 	sts	0x03D6, r25
    113e:	80 93 d5 03 	sts	0x03D5, r24
	TCCR1B 		|= 0b00000001;			// Enable CLK : CLK=12MHz
    1142:	ae e4       	ldi	r26, 0x4E	; 78
    1144:	b0 e0       	ldi	r27, 0x00	; 0
    1146:	ee e4       	ldi	r30, 0x4E	; 78
    1148:	f0 e0       	ldi	r31, 0x00	; 0
    114a:	80 81       	ld	r24, Z
    114c:	81 60       	ori	r24, 0x01	; 1
    114e:	8c 93       	st	X, r24
}
    1150:	0f 90       	pop	r0
    1152:	0f 90       	pop	r0
    1154:	0f 90       	pop	r0
    1156:	0f 90       	pop	r0
    1158:	cf 91       	pop	r28
    115a:	df 91       	pop	r29
    115c:	08 95       	ret

0000115e <ir_send_pulseEx>:


void ir_send_pulseEx(void)
{
    115e:	df 93       	push	r29
    1160:	cf 93       	push	r28
    1162:	00 d0       	rcall	.+0      	; 0x1164 <ir_send_pulseEx+0x6>
    1164:	cd b7       	in	r28, 0x3d	; 61
    1166:	de b7       	in	r29, 0x3e	; 62
	unsigned char i;
	unsigned char index;


	if (mPulseRepeat==0)
    1168:	80 91 17 02 	lds	r24, 0x0217
    116c:	88 23       	and	r24, r24
    116e:	19 f4       	brne	.+6      	; 0x1176 <ir_send_pulseEx+0x18>
	{
		mFunctionMode = 0;	// Change it to Idle mode
    1170:	10 92 73 01 	sts	0x0173, r1
    1174:	71 c0       	rjmp	.+226    	; 0x1258 <ir_send_pulseEx+0xfa>
		return;
	}
	else if (mPulseRepeat != 0xff)
    1176:	80 91 17 02 	lds	r24, 0x0217
    117a:	8f 3f       	cpi	r24, 0xFF	; 255
    117c:	29 f0       	breq	.+10     	; 0x1188 <ir_send_pulseEx+0x2a>
	{
		mPulseRepeat --;
    117e:	80 91 17 02 	lds	r24, 0x0217
    1182:	81 50       	subi	r24, 0x01	; 1
    1184:	80 93 17 02 	sts	0x0217, r24
	}

	// Set Carrier Frequencey
	OCR1A   = mPulseFreq; 
    1188:	ea e4       	ldi	r30, 0x4A	; 74
    118a:	f0 e0       	ldi	r31, 0x00	; 0
    118c:	80 91 af 03 	lds	r24, 0x03AF
    1190:	90 91 b0 03 	lds	r25, 0x03B0
    1194:	91 83       	std	Z+1, r25	; 0x01
    1196:	80 83       	st	Z, r24

	TIMSK &= ~0x01;		// Turn OFF TIMER0 Interrupt
    1198:	a9 e5       	ldi	r26, 0x59	; 89
    119a:	b0 e0       	ldi	r27, 0x00	; 0
    119c:	e9 e5       	ldi	r30, 0x59	; 89
    119e:	f0 e0       	ldi	r31, 0x00	; 0
    11a0:	80 81       	ld	r24, Z
    11a2:	8e 7f       	andi	r24, 0xFE	; 254
    11a4:	8c 93       	st	X, r24
	UCSRB &= ~0x80;		// Turn OFF UART-RX interrupt
    11a6:	aa e2       	ldi	r26, 0x2A	; 42
    11a8:	b0 e0       	ldi	r27, 0x00	; 0
    11aa:	ea e2       	ldi	r30, 0x2A	; 42
    11ac:	f0 e0       	ldi	r31, 0x00	; 0
    11ae:	80 81       	ld	r24, Z
    11b0:	8f 77       	andi	r24, 0x7F	; 127
    11b2:	8c 93       	st	X, r24

	for (i=0; i<mPulseLen; i++)
    11b4:	1a 82       	std	Y+2, r1	; 0x02
    11b6:	37 c0       	rjmp	.+110    	; 0x1226 <ir_send_pulseEx+0xc8>
	{
		index = mPulseCode[(i>>1)];
    11b8:	8a 81       	ldd	r24, Y+2	; 0x02
    11ba:	86 95       	lsr	r24
    11bc:	88 2f       	mov	r24, r24
    11be:	90 e0       	ldi	r25, 0x00	; 0
    11c0:	fc 01       	movw	r30, r24
    11c2:	ee 54       	subi	r30, 0x4E	; 78
    11c4:	fc 4f       	sbci	r31, 0xFC	; 252
    11c6:	80 81       	ld	r24, Z
    11c8:	89 83       	std	Y+1, r24	; 0x01
		if ((i & 0x01)==0)
    11ca:	8a 81       	ldd	r24, Y+2	; 0x02
    11cc:	88 2f       	mov	r24, r24
    11ce:	90 e0       	ldi	r25, 0x00	; 0
    11d0:	81 70       	andi	r24, 0x01	; 1
    11d2:	90 70       	andi	r25, 0x00	; 0
    11d4:	00 97       	sbiw	r24, 0x00	; 0
    11d6:	21 f4       	brne	.+8      	; 0x11e0 <ir_send_pulseEx+0x82>
		{
			index = index >> 4;
    11d8:	89 81       	ldd	r24, Y+1	; 0x01
    11da:	82 95       	swap	r24
    11dc:	8f 70       	andi	r24, 0x0F	; 15
    11de:	89 83       	std	Y+1, r24	; 0x01
		}
		index &= 0x07;
    11e0:	89 81       	ldd	r24, Y+1	; 0x01
    11e2:	87 70       	andi	r24, 0x07	; 7
    11e4:	89 83       	std	Y+1, r24	; 0x01
		ir_send_pulse(mPulseTable[index][0],mPulseTable[index][1]);
    11e6:	89 81       	ldd	r24, Y+1	; 0x01
    11e8:	88 2f       	mov	r24, r24
    11ea:	90 e0       	ldi	r25, 0x00	; 0
    11ec:	88 0f       	add	r24, r24
    11ee:	99 1f       	adc	r25, r25
    11f0:	88 0f       	add	r24, r24
    11f2:	99 1f       	adc	r25, r25
    11f4:	fc 01       	movw	r30, r24
    11f6:	e9 50       	subi	r30, 0x09	; 9
    11f8:	fe 4f       	sbci	r31, 0xFE	; 254
    11fa:	40 81       	ld	r20, Z
    11fc:	51 81       	ldd	r21, Z+1	; 0x01
    11fe:	89 81       	ldd	r24, Y+1	; 0x01
    1200:	88 2f       	mov	r24, r24
    1202:	90 e0       	ldi	r25, 0x00	; 0
    1204:	88 0f       	add	r24, r24
    1206:	99 1f       	adc	r25, r25
    1208:	01 96       	adiw	r24, 0x01	; 1
    120a:	88 0f       	add	r24, r24
    120c:	99 1f       	adc	r25, r25
    120e:	fc 01       	movw	r30, r24
    1210:	e9 50       	subi	r30, 0x09	; 9
    1212:	fe 4f       	sbci	r31, 0xFE	; 254
    1214:	20 81       	ld	r18, Z
    1216:	31 81       	ldd	r19, Z+1	; 0x01
    1218:	ca 01       	movw	r24, r20
    121a:	b9 01       	movw	r22, r18
    121c:	3a df       	rcall	.-396    	; 0x1092 <ir_send_pulse>
		ir_wait_tx();
    121e:	33 d0       	rcall	.+102    	; 0x1286 <ir_wait_tx>
	OCR1A   = mPulseFreq; 

	TIMSK &= ~0x01;		// Turn OFF TIMER0 Interrupt
	UCSRB &= ~0x80;		// Turn OFF UART-RX interrupt

	for (i=0; i<mPulseLen; i++)
    1220:	8a 81       	ldd	r24, Y+2	; 0x02
    1222:	8f 5f       	subi	r24, 0xFF	; 255
    1224:	8a 83       	std	Y+2, r24	; 0x02
    1226:	90 91 ad 03 	lds	r25, 0x03AD
    122a:	8a 81       	ldd	r24, Y+2	; 0x02
    122c:	89 17       	cp	r24, r25
    122e:	20 f2       	brcs	.-120    	; 0x11b8 <ir_send_pulseEx+0x5a>
		index &= 0x07;
		ir_send_pulse(mPulseTable[index][0],mPulseTable[index][1]);
		ir_wait_tx();
	}

	UCSRB |= 0x80;		// Turn ON UART-RX interrupt
    1230:	aa e2       	ldi	r26, 0x2A	; 42
    1232:	b0 e0       	ldi	r27, 0x00	; 0
    1234:	ea e2       	ldi	r30, 0x2A	; 42
    1236:	f0 e0       	ldi	r31, 0x00	; 0
    1238:	80 81       	ld	r24, Z
    123a:	80 68       	ori	r24, 0x80	; 128
    123c:	8c 93       	st	X, r24
	TIMSK |= 0x01;		// Turn ON TIMER0 Interrupt
    123e:	a9 e5       	ldi	r26, 0x59	; 89
    1240:	b0 e0       	ldi	r27, 0x00	; 0
    1242:	e9 e5       	ldi	r30, 0x59	; 89
    1244:	f0 e0       	ldi	r31, 0x00	; 0
    1246:	80 81       	ld	r24, Z
    1248:	81 60       	ori	r24, 0x01	; 1
    124a:	8c 93       	st	X, r24

	if (mPulseRepeat==0)
    124c:	80 91 17 02 	lds	r24, 0x0217
    1250:	88 23       	and	r24, r24
    1252:	11 f4       	brne	.+4      	; 0x1258 <ir_send_pulseEx+0xfa>
	{
		mFunctionMode = 0;	// Change it to Idle mode
    1254:	10 92 73 01 	sts	0x0173, r1
	}

}
    1258:	0f 90       	pop	r0
    125a:	0f 90       	pop	r0
    125c:	cf 91       	pop	r28
    125e:	df 91       	pop	r29
    1260:	08 95       	ret

00001262 <ir_init_send_pulse>:


void ir_init_send_pulse(char *input)
{
    1262:	df 93       	push	r29
    1264:	cf 93       	push	r28
    1266:	00 d0       	rcall	.+0      	; 0x1268 <ir_init_send_pulse+0x6>
    1268:	cd b7       	in	r28, 0x3d	; 61
    126a:	de b7       	in	r29, 0x3e	; 62
    126c:	9a 83       	std	Y+2, r25	; 0x02
    126e:	89 83       	std	Y+1, r24	; 0x01
	mFunctionMode = 1;					// Send Pulse Function
    1270:	81 e0       	ldi	r24, 0x01	; 1
    1272:	80 93 73 01 	sts	0x0173, r24

	// decode pronto_code from CmdQ
	decode_cpronto_code(input);
    1276:	89 81       	ldd	r24, Y+1	; 0x01
    1278:	9a 81       	ldd	r25, Y+2	; 0x02
    127a:	3e dd       	rcall	.-1412   	; 0xcf8 <decode_cpronto_code>
//	decode_pronto_code(input);

}
    127c:	0f 90       	pop	r0
    127e:	0f 90       	pop	r0
    1280:	cf 91       	pop	r28
    1282:	df 91       	pop	r29
    1284:	08 95       	ret

00001286 <ir_wait_tx>:

void ir_wait_tx(void)
{
    1286:	df 93       	push	r29
    1288:	cf 93       	push	r28
    128a:	00 d0       	rcall	.+0      	; 0x128c <ir_wait_tx+0x6>
    128c:	cd b7       	in	r28, 0x3d	; 61
    128e:	de b7       	in	r29, 0x3e	; 62
	unsigned int x=0;
    1290:	1a 82       	std	Y+2, r1	; 0x02
    1292:	19 82       	std	Y+1, r1	; 0x01
    1294:	19 c0       	rjmp	.+50     	; 0x12c8 <ir_wait_tx+0x42>

	while (x<15000)					// Time Out
	{

		if ((TIFR & 0x01)==0x01)	// TIMER0 Overflow
    1296:	e8 e5       	ldi	r30, 0x58	; 88
    1298:	f0 e0       	ldi	r31, 0x00	; 0
    129a:	80 81       	ld	r24, Z
    129c:	88 2f       	mov	r24, r24
    129e:	90 e0       	ldi	r25, 0x00	; 0
    12a0:	81 70       	andi	r24, 0x01	; 1
    12a2:	90 70       	andi	r25, 0x00	; 0
    12a4:	88 23       	and	r24, r24
    12a6:	09 f0       	breq	.+2      	; 0x12aa <ir_wait_tx+0x24>
		{
			POLL_TIMER0_OVR();
    12a8:	3f d8       	rcall	.-3970   	; 0x328 <POLL_TIMER0_OVR>
		}

		if ((UCSRA & 0x80)==0x80)	// UART RX data ready for recieve
    12aa:	eb e2       	ldi	r30, 0x2B	; 43
    12ac:	f0 e0       	ldi	r31, 0x00	; 0
    12ae:	80 81       	ld	r24, Z
    12b0:	88 23       	and	r24, r24
    12b2:	0c f4       	brge	.+2      	; 0x12b6 <ir_wait_tx+0x30>
		{
	 		POLL_UART_RECV();
    12b4:	81 d7       	rcall	.+3842   	; 0x21b8 <__data_load_end+0xc72>
		}

		x++;
    12b6:	89 81       	ldd	r24, Y+1	; 0x01
    12b8:	9a 81       	ldd	r25, Y+2	; 0x02
    12ba:	01 96       	adiw	r24, 0x01	; 1
    12bc:	9a 83       	std	Y+2, r25	; 0x02
    12be:	89 83       	std	Y+1, r24	; 0x01
//		asm volatile ("nop");
		if (mTxFlag==0)
    12c0:	80 91 ae 03 	lds	r24, 0x03AE
    12c4:	88 23       	and	r24, r24
    12c6:	31 f0       	breq	.+12     	; 0x12d4 <ir_wait_tx+0x4e>

void ir_wait_tx(void)
{
	unsigned int x=0;

	while (x<15000)					// Time Out
    12c8:	89 81       	ldd	r24, Y+1	; 0x01
    12ca:	9a 81       	ldd	r25, Y+2	; 0x02
    12cc:	2a e3       	ldi	r18, 0x3A	; 58
    12ce:	88 39       	cpi	r24, 0x98	; 152
    12d0:	92 07       	cpc	r25, r18
    12d2:	08 f3       	brcs	.-62     	; 0x1296 <ir_wait_tx+0x10>
		if (mTxFlag==0)
		{
			break;
		}
	}
	TCCR1B &= 0b11111000;	// Stop Clock
    12d4:	ae e4       	ldi	r26, 0x4E	; 78
    12d6:	b0 e0       	ldi	r27, 0x00	; 0
    12d8:	ee e4       	ldi	r30, 0x4E	; 78
    12da:	f0 e0       	ldi	r31, 0x00	; 0
    12dc:	80 81       	ld	r24, Z
    12de:	88 7f       	andi	r24, 0xF8	; 248
    12e0:	8c 93       	st	X, r24

}
    12e2:	0f 90       	pop	r0
    12e4:	0f 90       	pop	r0
    12e6:	cf 91       	pop	r28
    12e8:	df 91       	pop	r29
    12ea:	08 95       	ret

000012ec <ir_init_capture_pulse>:

void ir_init_capture_pulse(char *input)
{
    12ec:	df 93       	push	r29
    12ee:	cf 93       	push	r28
    12f0:	00 d0       	rcall	.+0      	; 0x12f2 <ir_init_capture_pulse+0x6>
    12f2:	cd b7       	in	r28, 0x3d	; 61
    12f4:	de b7       	in	r29, 0x3e	; 62
    12f6:	9a 83       	std	Y+2, r25	; 0x02
    12f8:	89 83       	std	Y+1, r24	; 0x01

	// Set TIMER1 WGM to Mode 0
	TCCR1B = 0b00000000;	// Disable Input Capture
    12fa:	ee e4       	ldi	r30, 0x4E	; 78
    12fc:	f0 e0       	ldi	r31, 0x00	; 0
    12fe:	10 82       	st	Z, r1
	TCNT1  = 0;
    1300:	ec e4       	ldi	r30, 0x4C	; 76
    1302:	f0 e0       	ldi	r31, 0x00	; 0
    1304:	11 82       	std	Z+1, r1	; 0x01
    1306:	10 82       	st	Z, r1
	mCaptureIndex = 0;
    1308:	10 92 1c 02 	sts	0x021C, r1
    130c:	10 92 1b 02 	sts	0x021B, r1
	mCaptureState = 1;
    1310:	81 e0       	ldi	r24, 0x01	; 1
    1312:	80 93 18 02 	sts	0x0218, r24
	mFunctionMode = 2;		// Change it to Capture Mode
    1316:	82 e0       	ldi	r24, 0x02	; 2
    1318:	80 93 73 01 	sts	0x0173, r24
	mCaptureRepeat =  u_asc2uint(2,(char *) (input));
    131c:	29 81       	ldd	r18, Y+1	; 0x01
    131e:	3a 81       	ldd	r19, Y+2	; 0x02
    1320:	82 e0       	ldi	r24, 0x02	; 2
    1322:	b9 01       	movw	r22, r18
    1324:	a5 db       	rcall	.-2230   	; 0xa70 <u_asc2uint>
    1326:	80 93 b1 03 	sts	0x03B1, r24

	TCCR1B  = 0b11000011;	// Enable Input Capture
    132a:	ee e4       	ldi	r30, 0x4E	; 78
    132c:	f0 e0       	ldi	r31, 0x00	; 0
    132e:	83 ec       	ldi	r24, 0xC3	; 195
    1330:	80 83       	st	Z, r24
	TIMSK  &= ~0b00111100;  // Disable all TIMER1 interupt
    1332:	a9 e5       	ldi	r26, 0x59	; 89
    1334:	b0 e0       	ldi	r27, 0x00	; 0
    1336:	e9 e5       	ldi	r30, 0x59	; 89
    1338:	f0 e0       	ldi	r31, 0x00	; 0
    133a:	80 81       	ld	r24, Z
    133c:	83 7c       	andi	r24, 0xC3	; 195
    133e:	8c 93       	st	X, r24
	TIMSK  |=  0b00100000;	// Enable Input Capture1 Interrupt
    1340:	a9 e5       	ldi	r26, 0x59	; 89
    1342:	b0 e0       	ldi	r27, 0x00	; 0
    1344:	e9 e5       	ldi	r30, 0x59	; 89
    1346:	f0 e0       	ldi	r31, 0x00	; 0
    1348:	80 81       	ld	r24, Z
    134a:	80 62       	ori	r24, 0x20	; 32
    134c:	8c 93       	st	X, r24

}
    134e:	0f 90       	pop	r0
    1350:	0f 90       	pop	r0
    1352:	cf 91       	pop	r28
    1354:	df 91       	pop	r29
    1356:	08 95       	ret

00001358 <ir_capture_pulse>:

void ir_capture_pulse(void)
{
    1358:	df 93       	push	r29
    135a:	cf 93       	push	r28
    135c:	00 d0       	rcall	.+0      	; 0x135e <ir_capture_pulse+0x6>
    135e:	00 d0       	rcall	.+0      	; 0x1360 <ir_capture_pulse+0x8>
    1360:	cd b7       	in	r28, 0x3d	; 61
    1362:	de b7       	in	r29, 0x3e	; 62
//	When Capture Pulse is enabled
//	This function should be call @ every 200mS

	unsigned char i;
	unsigned char index;
	mCaptureState ++;
    1364:	80 91 18 02 	lds	r24, 0x0218
    1368:	8f 5f       	subi	r24, 0xFF	; 255
    136a:	80 93 18 02 	sts	0x0218, r24
	unsigned int tPulse;

	// 2second time out OR buffer full
	if ((mCaptureState>mCaptureRepeat) || (mCaptureIndex==sizeof(mCapturePulse)/2))
    136e:	90 91 18 02 	lds	r25, 0x0218
    1372:	80 91 b1 03 	lds	r24, 0x03B1
    1376:	89 17       	cp	r24, r25
    1378:	40 f0       	brcs	.+16     	; 0x138a <ir_capture_pulse+0x32>
    137a:	80 91 1b 02 	lds	r24, 0x021B
    137e:	90 91 1c 02 	lds	r25, 0x021C
    1382:	88 3c       	cpi	r24, 0xC8	; 200
    1384:	91 05       	cpc	r25, r1
    1386:	09 f0       	breq	.+2      	; 0x138a <ir_capture_pulse+0x32>
    1388:	4e c0       	rjmp	.+156    	; 0x1426 <ir_capture_pulse+0xce>
	{
		TCCR1B = 0b00000000;	// Disable Input Capture
    138a:	ee e4       	ldi	r30, 0x4E	; 78
    138c:	f0 e0       	ldi	r31, 0x00	; 0
    138e:	10 82       	st	Z, r1
		index = mCaptureIndex & 0xff;
    1390:	80 91 1b 02 	lds	r24, 0x021B
    1394:	90 91 1c 02 	lds	r25, 0x021C
    1398:	8b 83       	std	Y+3, r24	; 0x03
		mFunctionMode = 0;	// Change it to Idle mode
    139a:	10 92 73 01 	sts	0x0173, r1
		u_puts(LinuxCmd);
    139e:	8e e4       	ldi	r24, 0x4E	; 78
    13a0:	91 e0       	ldi	r25, 0x01	; 1
    13a2:	37 dc       	rcall	.-1938   	; 0xc12 <u_puts>
		u_puts("'C0' '");		// Capture data
    13a4:	8c e5       	ldi	r24, 0x5C	; 92
    13a6:	91 e0       	ldi	r25, 0x01	; 1
    13a8:	34 dc       	rcall	.-1944   	; 0xc12 <u_puts>
		u_putHexWord(CaptureFreq);
    13aa:	8b e1       	ldi	r24, 0x1B	; 27
    13ac:	97 eb       	ldi	r25, 0xB7	; 183
    13ae:	d8 db       	rcall	.-2128   	; 0xb60 <u_putHexWord>
		u_puts("' '");		// Capture data
    13b0:	83 e6       	ldi	r24, 0x63	; 99
    13b2:	91 e0       	ldi	r25, 0x01	; 1
    13b4:	2e dc       	rcall	.-1956   	; 0xc12 <u_puts>
		u_putHexByte(index,0x00);
    13b6:	8b 81       	ldd	r24, Y+3	; 0x03
    13b8:	60 e0       	ldi	r22, 0x00	; 0
    13ba:	e7 db       	rcall	.-2098   	; 0xb8a <u_putHexByte>
		u_puts("' '");		// Capture data
    13bc:	83 e6       	ldi	r24, 0x63	; 99
    13be:	91 e0       	ldi	r25, 0x01	; 1
    13c0:	28 dc       	rcall	.-1968   	; 0xc12 <u_puts>
		for (i=0; i<index; i++)
    13c2:	1c 82       	std	Y+4, r1	; 0x04
    13c4:	25 c0       	rjmp	.+74     	; 0x1410 <ir_capture_pulse+0xb8>
		{
			tPulse = mCapturePulse[i];
    13c6:	8c 81       	ldd	r24, Y+4	; 0x04
    13c8:	88 2f       	mov	r24, r24
    13ca:	90 e0       	ldi	r25, 0x00	; 0
    13cc:	88 0f       	add	r24, r24
    13ce:	99 1f       	adc	r25, r25
    13d0:	fc 01       	movw	r30, r24
    13d2:	e3 5e       	subi	r30, 0xE3	; 227
    13d4:	fd 4f       	sbci	r31, 0xFD	; 253
    13d6:	80 81       	ld	r24, Z
    13d8:	91 81       	ldd	r25, Z+1	; 0x01
    13da:	9a 83       	std	Y+2, r25	; 0x02
    13dc:	89 83       	std	Y+1, r24	; 0x01
			tPulse = tPulse >> 1;
    13de:	89 81       	ldd	r24, Y+1	; 0x01
    13e0:	9a 81       	ldd	r25, Y+2	; 0x02
    13e2:	96 95       	lsr	r25
    13e4:	87 95       	ror	r24
    13e6:	9a 83       	std	Y+2, r25	; 0x02
    13e8:	89 83       	std	Y+1, r24	; 0x01
			if (tPulse >= 0x0100)
    13ea:	89 81       	ldd	r24, Y+1	; 0x01
    13ec:	9a 81       	ldd	r25, Y+2	; 0x02
    13ee:	8f 3f       	cpi	r24, 0xFF	; 255
    13f0:	91 05       	cpc	r25, r1
    13f2:	29 f0       	breq	.+10     	; 0x13fe <ir_capture_pulse+0xa6>
    13f4:	20 f0       	brcs	.+8      	; 0x13fe <ir_capture_pulse+0xa6>
			{
				u_putHexWord(tPulse);
    13f6:	89 81       	ldd	r24, Y+1	; 0x01
    13f8:	9a 81       	ldd	r25, Y+2	; 0x02
    13fa:	b2 db       	rcall	.-2204   	; 0xb60 <u_putHexWord>
    13fc:	03 c0       	rjmp	.+6      	; 0x1404 <ir_capture_pulse+0xac>
			}
			else
			{
				u_putHexByte(tPulse & 0xff,0x00);
    13fe:	89 81       	ldd	r24, Y+1	; 0x01
    1400:	60 e0       	ldi	r22, 0x00	; 0
    1402:	c3 db       	rcall	.-2170   	; 0xb8a <u_putHexByte>
			}
			u_puts(" ");		
    1404:	87 e6       	ldi	r24, 0x67	; 103
    1406:	91 e0       	ldi	r25, 0x01	; 1
    1408:	04 dc       	rcall	.-2040   	; 0xc12 <u_puts>
		u_puts("'C0' '");		// Capture data
		u_putHexWord(CaptureFreq);
		u_puts("' '");		// Capture data
		u_putHexByte(index,0x00);
		u_puts("' '");		// Capture data
		for (i=0; i<index; i++)
    140a:	8c 81       	ldd	r24, Y+4	; 0x04
    140c:	8f 5f       	subi	r24, 0xFF	; 255
    140e:	8c 83       	std	Y+4, r24	; 0x04
    1410:	9c 81       	ldd	r25, Y+4	; 0x04
    1412:	8b 81       	ldd	r24, Y+3	; 0x03
    1414:	98 17       	cp	r25, r24
    1416:	b8 f2       	brcs	.-82     	; 0x13c6 <ir_capture_pulse+0x6e>
			{
				u_putHexByte(tPulse & 0xff,0x00);
			}
			u_puts(" ");		
		}
		u_puts("'\r\n");
    1418:	89 e6       	ldi	r24, 0x69	; 105
    141a:	91 e0       	ldi	r25, 0x01	; 1
    141c:	fa db       	rcall	.-2060   	; 0xc12 <u_puts>
		mCaptureIndex = 0;
    141e:	10 92 1c 02 	sts	0x021C, r1
    1422:	10 92 1b 02 	sts	0x021B, r1
	}
	
}
    1426:	0f 90       	pop	r0
    1428:	0f 90       	pop	r0
    142a:	0f 90       	pop	r0
    142c:	0f 90       	pop	r0
    142e:	cf 91       	pop	r28
    1430:	df 91       	pop	r29
    1432:	08 95       	ret

00001434 <_exit>:
    1434:	f8 94       	cli

00001436 <__stop_program>:
    1436:	ff cf       	rjmp	.-2      	; 0x1436 <__stop_program>
