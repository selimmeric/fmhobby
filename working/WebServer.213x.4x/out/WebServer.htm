<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\out\WebServer.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\out\WebServer.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, RVCT4.0 [Build 524]: Last Updated: Thu Dec 09 10:04:45 2010
<BR><P>
<H3>Maximum Stack Usage =        432 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; myServerTask &rArr; decodeUDP &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[b88568]">Reset_Handler</a>
 <LI><a href="#[b885a4]">__user_initial_stackheap</a>
 <LI><a href="#[b887c0]">Undef_Handler</a>
 <LI><a href="#[b88784]">SWI_Handler</a>
 <LI><a href="#[b88748]">PAbt_Handler</a>
 <LI><a href="#[b8870c]">DAbt_Handler</a>
 <LI><a href="#[b886d0]">IRQ_Handler</a>
 <LI><a href="#[b88694]">FIQ_Handler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[b887c0]">Undef_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b887c0]">Undef_Handler</a><BR>
 <LI><a href="#[b88784]">SWI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b88784]">SWI_Handler</a><BR>
 <LI><a href="#[b88748]">PAbt_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b88748]">PAbt_Handler</a><BR>
 <LI><a href="#[b8870c]">DAbt_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b8870c]">DAbt_Handler</a><BR>
 <LI><a href="#[b886d0]">IRQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b886d0]">IRQ_Handler</a><BR>
 <LI><a href="#[b88694]">FIQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b88694]">FIQ_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[b88568]">Reset_Handler</a>
 <LI><a href="#[b887c0]">Undef_Handler</a>
 <LI><a href="#[b88784]">SWI_Handler</a>
 <LI><a href="#[b88748]">PAbt_Handler</a>
 <LI><a href="#[b8870c]">DAbt_Handler</a>
 <LI><a href="#[b886d0]">IRQ_Handler</a>
 <LI><a href="#[b88694]">FIQ_Handler</a>
 <LI><a href="#[b82d0c]">__main</a>
 <LI><a href="#[b87758]">main</a>
 <LI><a href="#[b82604]">_sputc</a>
 <LI><a href="#[b8276c]">_printf_input_char</a>
 <LI><a href="#[b7e02c]">__I$use$semihosting</a>
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[b88568]"></a>Reset_Handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[b82d0c]"></a>__main</STRONG> (ARM, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[b7bb60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[b82be0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[b7bb60]"></a>__scatterload</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[b82d0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[b7bb24]"></a>__scatterload_rt2</STRONG> (ARM, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b82be0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[b7bae8]"></a>__scatterload_null</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[b7b944]"></a>__scatterload_copy</STRONG> (ARM, 40 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b7b944]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[b7b944]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[b7b854]"></a>__scatterload_zeroinit</STRONG> (ARM, 44 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[b84044]"></a>_printf_percent</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[b84c74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf (via Veneer)
</UL>

<P><STRONG><a name="[b84134]"></a>_printf_s</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str
</UL>
<BR>[Calls]<UL><LI><a href="#[b8249c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string (via Veneer)
</UL>

<P><STRONG><a name="[b823ac]"></a>_printf_percent_end</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[b80f48]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Calls]<UL><LI><a href="#[b7e9c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[b81ec0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li (via Veneer)
</UL>

<P><STRONG><a name="[b7f094]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002A))

<P><STRONG><a name="[b7f10c]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000028))

<P><STRONG><a name="[b7f4cc]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[b7f364]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[b7efa4]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[b7f01c]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[b7f3dc]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[b7f2ec]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[b7f8c8]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000006))

<P><STRONG><a name="[b7f724]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000D))

<P><STRONG><a name="[b7f6ac]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))

<P><STRONG><a name="[b7f634]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[b7f5bc]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[b7f544]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[b7f7d8]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[b7ef68]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002F))

<P><STRONG><a name="[b7f454]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[b7f274]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[b7f850]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000008))

<P><STRONG><a name="[b7d3fc]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[b7e6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls (via Veneer)
</UL>

<P><STRONG><a name="[b7c0c4]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[b7bee4]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[b7bea8]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[b7c010]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[b7c178]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[b7bf98]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[b82be0]"></a>__rt_entry</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[b7bb24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[b82d0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[b81f74]"></a>__rt_entry_presh_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[b81bf0]"></a>__rt_entry_sh</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[b81740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[b81ec0]"></a>__rt_entry_li</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[b80f48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (via Veneer)
</UL>

<P><STRONG><a name="[b81efc]"></a>__rt_entry_postsh_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[b81e0c]"></a>__rt_entry_main</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Calls]<UL><LI><a href="#[b815d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit (via BX)
</UL>

<P><STRONG><a name="[b81e48]"></a>__rt_entry_postli_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[b807c8]"></a>__rt_exit</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[b815d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit (via Veneer)
</UL>

<P><STRONG><a name="[b7e6bc]"></a>__rt_exit_ls</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[b7d3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown (via Veneer)
</UL>

<P><STRONG><a name="[b7e6f8]"></a>__rt_exit_prels_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[b7e680]"></a>__rt_exit_exit</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[b7e8d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[b885a4]"></a>__user_initial_stackheap</STRONG> (ARM, 0 bytes, Stack size unknown bytes, startup.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b81740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[b87848]"></a>verify_password</STRONG> (ARM, 52 bytes, Stack size 8 bytes, webserver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = verify_password &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[b83e28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[b87758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b8780c]"></a>analyse_get_url</STRONG> (ARM, 168 bytes, Stack size 0 bytes, webserver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b85afc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processTCP
<LI><a href="#[b87758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b877d0]"></a>moved_perm</STRONG> (ARM, 120 bytes, Stack size 16 bytes, webserver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = moved_perm
</UL>
<BR>[Calls]<UL><LI><a href="#[b8753c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_tcp_data_p
<LI><a href="#[b87578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_tcp_data
</UL>
<BR>[Called By]<UL><LI><a href="#[b85afc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processTCP
<LI><a href="#[b87758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b87794]"></a>print_webpage</STRONG> (ARM, 500 bytes, Stack size 16 bytes, webserver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = print_webpage
</UL>
<BR>[Calls]<UL><LI><a href="#[b8753c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_tcp_data_p
</UL>
<BR>[Called By]<UL><LI><a href="#[b87758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b87758]"></a>main</STRONG> (ARM, 1480 bytes, Stack size 72 bytes, webserver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = main &rArr; myServerTask &rArr; decodeUDP &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b83d38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen (via Veneer)
<LI><a href="#[b83e28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp (via Veneer)
<LI><a href="#[b83f18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy (via Veneer)
<LI><a href="#[b872e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myServerTask
<LI><a href="#[b87320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_udp_reply_from_request
<LI><a href="#[b8735c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_tcp_synack_from_syn
<LI><a href="#[b87398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_tcp_ack_with_data
<LI><a href="#[b873d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_tcp_ack_from_any
<LI><a href="#[b87410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_echo_reply_from_request
<LI><a href="#[b8744c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_arp_answer_from_request
<LI><a href="#[b87488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_len_info
<LI><a href="#[b874c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ip_arp_udp_tcp
<LI><a href="#[b87500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tcp_data_pointer
<LI><a href="#[b8753c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_tcp_data_p
<LI><a href="#[b875b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_type_is_ip_and_my_ip
<LI><a href="#[b875f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_type_is_arp_and_my_ip
<LI><a href="#[b8762c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60clkout
<LI><a href="#[b87668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60PhyWrite
<LI><a href="#[b876a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60PacketReceive
<LI><a href="#[b876e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60Init
<LI><a href="#[b8771c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[b87794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_webpage
<LI><a href="#[b877d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moved_perm
<LI><a href="#[b8780c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analyse_get_url
<LI><a href="#[b87848]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_password
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtentry2.o(.ARM.Collect$$rtentry$$0000000D)
</UL>
<P><STRONG><a name="[b86bdc]"></a>_delay_us</STRONG> (ARM, 40 bytes, Stack size 0 bytes, enc28j60.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b869fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60PhyReadH
<LI><a href="#[b87668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60PhyWrite
</UL>

<P><STRONG><a name="[b8771c]"></a>delay_ms</STRONG> (ARM, 40 bytes, Stack size 0 bytes, enc28j60.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b876e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60Init
<LI><a href="#[b87758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b86ba0]"></a>enc28j60ReadOp</STRONG> (ARM, 152 bytes, Stack size 0 bytes, enc28j60.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b86a74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60Read
<LI><a href="#[b876a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60PacketReceive
</UL>

<P><STRONG><a name="[b86b64]"></a>enc28j60WriteOp</STRONG> (ARM, 92 bytes, Stack size 0 bytes, enc28j60.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b86948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60PacketSend
<LI><a href="#[b86a38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60Write
<LI><a href="#[b86ab0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60SetBank
<LI><a href="#[b876a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60PacketReceive
<LI><a href="#[b876e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60Init
</UL>

<P><STRONG><a name="[b86b28]"></a>enc28j60ReadBuffer</STRONG> (ARM, 140 bytes, Stack size 0 bytes, enc28j60.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b876a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60PacketReceive
</UL>

<P><STRONG><a name="[b86aec]"></a>enc28j60WriteBuffer</STRONG> (ARM, 120 bytes, Stack size 0 bytes, enc28j60.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b86948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60PacketSend
</UL>

<P><STRONG><a name="[b86ab0]"></a>enc28j60SetBank</STRONG> (ARM, 84 bytes, Stack size 8 bytes, enc28j60.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = enc28j60SetBank
</UL>
<BR>[Calls]<UL><LI><a href="#[b86b64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60WriteOp
</UL>
<BR>[Called By]<UL><LI><a href="#[b86a38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60Write
<LI><a href="#[b86a74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60Read
<LI><a href="#[b876e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60Init
</UL>

<P><STRONG><a name="[b86a74]"></a>enc28j60Read</STRONG> (ARM, 36 bytes, Stack size 8 bytes, enc28j60.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = enc28j60Read &rArr; enc28j60SetBank
</UL>
<BR>[Calls]<UL><LI><a href="#[b86ab0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60SetBank
<LI><a href="#[b86ba0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60ReadOp
</UL>
<BR>[Called By]<UL><LI><a href="#[b86948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60PacketSend
<LI><a href="#[b869c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60getrev
<LI><a href="#[b869fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60PhyReadH
<LI><a href="#[b87668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60PhyWrite
<LI><a href="#[b876a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60PacketReceive
</UL>

<P><STRONG><a name="[b86a38]"></a>enc28j60Write</STRONG> (ARM, 44 bytes, Stack size 12 bytes, enc28j60.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = enc28j60Write &rArr; enc28j60SetBank
</UL>
<BR>[Calls]<UL><LI><a href="#[b86ab0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60SetBank
<LI><a href="#[b86b64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60WriteOp
</UL>
<BR>[Called By]<UL><LI><a href="#[b86948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60PacketSend
<LI><a href="#[b869fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60PhyReadH
<LI><a href="#[b8762c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60clkout
<LI><a href="#[b87668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60PhyWrite
<LI><a href="#[b876a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60PacketReceive
<LI><a href="#[b876e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60Init
</UL>

<P><STRONG><a name="[b869fc]"></a>enc28j60PhyReadH</STRONG> (ARM, 88 bytes, Stack size 8 bytes, enc28j60.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b86a38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60Write
<LI><a href="#[b86a74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60Read
<LI><a href="#[b86bdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[b86984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60linkup
</UL>

<P><STRONG><a name="[b87668]"></a>enc28j60PhyWrite</STRONG> (ARM, 84 bytes, Stack size 12 bytes, enc28j60.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = enc28j60PhyWrite &rArr; enc28j60Write &rArr; enc28j60SetBank
</UL>
<BR>[Calls]<UL><LI><a href="#[b86a38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60Write
<LI><a href="#[b86a74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60Read
<LI><a href="#[b86bdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[b876e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60Init
<LI><a href="#[b87758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b8762c]"></a>enc28j60clkout</STRONG> (ARM, 28 bytes, Stack size 8 bytes, enc28j60.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = enc28j60clkout &rArr; enc28j60Write &rArr; enc28j60SetBank
</UL>
<BR>[Calls]<UL><LI><a href="#[b86a38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60Write
</UL>
<BR>[Called By]<UL><LI><a href="#[b87758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b876e0]"></a>enc28j60Init</STRONG> (ARM, 576 bytes, Stack size 8 bytes, enc28j60.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = enc28j60Init &rArr; enc28j60PhyWrite &rArr; enc28j60Write &rArr; enc28j60SetBank
</UL>
<BR>[Calls]<UL><LI><a href="#[b86a38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60Write
<LI><a href="#[b86ab0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60SetBank
<LI><a href="#[b86b64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60WriteOp
<LI><a href="#[b87668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60PhyWrite
<LI><a href="#[b8771c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[b87758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b869c0]"></a>enc28j60getrev</STRONG> (ARM, 20 bytes, Stack size 4 bytes, enc28j60.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b86a74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60Read
</UL>

<P><STRONG><a name="[b86984]"></a>enc28j60linkup</STRONG> (ARM, 44 bytes, Stack size 4 bytes, enc28j60.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b869fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60PhyReadH
</UL>

<P><STRONG><a name="[b86948]"></a>enc28j60PacketSend</STRONG> (ARM, 160 bytes, Stack size 12 bytes, enc28j60.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = enc28j60PacketSend &rArr; enc28j60Write &rArr; enc28j60SetBank
</UL>
<BR>[Calls]<UL><LI><a href="#[b86a38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60Write
<LI><a href="#[b86a74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60Read
<LI><a href="#[b86aec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60WriteBuffer
<LI><a href="#[b86b64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60WriteOp
</UL>
<BR>[Called By]<UL><LI><a href="#[b87320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_udp_reply_from_request
<LI><a href="#[b8735c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_tcp_synack_from_syn
<LI><a href="#[b87398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_tcp_ack_with_data
<LI><a href="#[b873d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_tcp_ack_from_any
<LI><a href="#[b87410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_echo_reply_from_request
<LI><a href="#[b8744c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_arp_answer_from_request
</UL>

<P><STRONG><a name="[b876a4]"></a>enc28j60PacketReceive</STRONG> (ARM, 324 bytes, Stack size 20 bytes, enc28j60.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = enc28j60PacketReceive &rArr; enc28j60Write &rArr; enc28j60SetBank
</UL>
<BR>[Calls]<UL><LI><a href="#[b86a38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60Write
<LI><a href="#[b86a74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60Read
<LI><a href="#[b86b28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60ReadBuffer
<LI><a href="#[b86b64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60WriteOp
<LI><a href="#[b86ba0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60ReadOp
</UL>
<BR>[Called By]<UL><LI><a href="#[b872e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myServerTask
<LI><a href="#[b87758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b863e4]"></a>checksum</STRONG> (ARM, 160 bytes, Stack size 4 bytes, ip_arp_udp_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = checksum
</UL>
<BR>[Called By]<UL><LI><a href="#[b8636c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_ip_hdr_checksum
<LI><a href="#[b87320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_udp_reply_from_request
<LI><a href="#[b8735c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_tcp_synack_from_syn
<LI><a href="#[b87398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_tcp_ack_with_data
<LI><a href="#[b873d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_tcp_ack_from_any
</UL>

<P><STRONG><a name="[b874c4]"></a>init_ip_arp_udp_tcp</STRONG> (ARM, 92 bytes, Stack size 4 bytes, ip_arp_udp_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = init_ip_arp_udp_tcp
</UL>
<BR>[Called By]<UL><LI><a href="#[b87758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b875f0]"></a>eth_type_is_arp_and_my_ip</STRONG> (ARM, 116 bytes, Stack size 0 bytes, ip_arp_udp_tcp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b872e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myServerTask
<LI><a href="#[b87758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b875b4]"></a>eth_type_is_ip_and_my_ip</STRONG> (ARM, 136 bytes, Stack size 0 bytes, ip_arp_udp_tcp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b872e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myServerTask
<LI><a href="#[b87758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b863a8]"></a>make_eth</STRONG> (ARM, 56 bytes, Stack size 0 bytes, ip_arp_udp_tcp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b87320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_udp_reply_from_request
<LI><a href="#[b8735c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_tcp_synack_from_syn
<LI><a href="#[b873d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_tcp_ack_from_any
<LI><a href="#[b87410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_echo_reply_from_request
<LI><a href="#[b8744c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_arp_answer_from_request
</UL>

<P><STRONG><a name="[b8636c]"></a>fill_ip_hdr_checksum</STRONG> (ARM, 84 bytes, Stack size 12 bytes, ip_arp_udp_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fill_ip_hdr_checksum &rArr; checksum
</UL>
<BR>[Calls]<UL><LI><a href="#[b863e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checksum
</UL>
<BR>[Called By]<UL><LI><a href="#[b86330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_ip
<LI><a href="#[b87398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_tcp_ack_with_data
</UL>

<P><STRONG><a name="[b86330]"></a>make_ip</STRONG> (ARM, 80 bytes, Stack size 12 bytes, ip_arp_udp_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = make_ip &rArr; fill_ip_hdr_checksum &rArr; checksum
</UL>
<BR>[Calls]<UL><LI><a href="#[b8636c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_ip_hdr_checksum
</UL>
<BR>[Called By]<UL><LI><a href="#[b87320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_udp_reply_from_request
<LI><a href="#[b8735c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_tcp_synack_from_syn
<LI><a href="#[b873d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_tcp_ack_from_any
<LI><a href="#[b87410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_echo_reply_from_request
</UL>

<P><STRONG><a name="[b862f4]"></a>make_tcphead</STRONG> (ARM, 304 bytes, Stack size 12 bytes, ip_arp_udp_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = make_tcphead
</UL>
<BR>[Called By]<UL><LI><a href="#[b8735c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_tcp_synack_from_syn
<LI><a href="#[b873d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_tcp_ack_from_any
</UL>

<P><STRONG><a name="[b8744c]"></a>make_arp_answer_from_request</STRONG> (ARM, 164 bytes, Stack size 16 bytes, ip_arp_udp_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = make_arp_answer_from_request &rArr; enc28j60PacketSend &rArr; enc28j60Write &rArr; enc28j60SetBank
</UL>
<BR>[Calls]<UL><LI><a href="#[b863a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_eth
<LI><a href="#[b86948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60PacketSend
</UL>
<BR>[Called By]<UL><LI><a href="#[b872e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myServerTask
<LI><a href="#[b87758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b87410]"></a>make_echo_reply_from_request</STRONG> (ARM, 92 bytes, Stack size 16 bytes, ip_arp_udp_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = make_echo_reply_from_request &rArr; enc28j60PacketSend &rArr; enc28j60Write &rArr; enc28j60SetBank
</UL>
<BR>[Calls]<UL><LI><a href="#[b86330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_ip
<LI><a href="#[b863a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_eth
<LI><a href="#[b86948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60PacketSend
</UL>
<BR>[Called By]<UL><LI><a href="#[b85b74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeICMP
<LI><a href="#[b87758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b87320]"></a>make_udp_reply_from_request</STRONG> (ARM, 192 bytes, Stack size 32 bytes, ip_arp_udp_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = make_udp_reply_from_request &rArr; enc28j60PacketSend &rArr; enc28j60Write &rArr; enc28j60SetBank
</UL>
<BR>[Calls]<UL><LI><a href="#[b86330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_ip
<LI><a href="#[b863a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_eth
<LI><a href="#[b863e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checksum
<LI><a href="#[b86948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60PacketSend
</UL>
<BR>[Called By]<UL><LI><a href="#[b85a84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeUDP
<LI><a href="#[b87758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b8735c]"></a>make_tcp_synack_from_syn</STRONG> (ARM, 120 bytes, Stack size 16 bytes, ip_arp_udp_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = make_tcp_synack_from_syn &rArr; enc28j60PacketSend &rArr; enc28j60Write &rArr; enc28j60SetBank
</UL>
<BR>[Calls]<UL><LI><a href="#[b862f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_tcphead
<LI><a href="#[b86330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_ip
<LI><a href="#[b863a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_eth
<LI><a href="#[b863e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checksum
<LI><a href="#[b86948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60PacketSend
</UL>
<BR>[Called By]<UL><LI><a href="#[b85afc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processTCP
<LI><a href="#[b87758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b87500]"></a>get_tcp_data_pointer</STRONG> (ARM, 48 bytes, Stack size 0 bytes, ip_arp_udp_tcp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b85afc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processTCP
<LI><a href="#[b87758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b87488]"></a>init_len_info</STRONG> (ARM, 132 bytes, Stack size 0 bytes, ip_arp_udp_tcp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b85afc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processTCP
<LI><a href="#[b87758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b8753c]"></a>fill_tcp_data_p</STRONG> (ARM, 44 bytes, Stack size 0 bytes, ip_arp_udp_tcp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b85afc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processTCP
<LI><a href="#[b85b38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_webcgi
<LI><a href="#[b87758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b87794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_webpage
<LI><a href="#[b877d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moved_perm
</UL>

<P><STRONG><a name="[b87578]"></a>fill_tcp_data</STRONG> (ARM, 52 bytes, Stack size 0 bytes, ip_arp_udp_tcp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b877d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moved_perm
</UL>

<P><STRONG><a name="[b873d4]"></a>make_tcp_ack_from_any</STRONG> (ARM, 172 bytes, Stack size 16 bytes, ip_arp_udp_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = make_tcp_ack_from_any &rArr; enc28j60PacketSend &rArr; enc28j60Write &rArr; enc28j60SetBank
</UL>
<BR>[Calls]<UL><LI><a href="#[b862f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_tcphead
<LI><a href="#[b86330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_ip
<LI><a href="#[b863a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_eth
<LI><a href="#[b863e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checksum
<LI><a href="#[b86948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60PacketSend
</UL>
<BR>[Called By]<UL><LI><a href="#[b85afc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processTCP
<LI><a href="#[b87758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b87398]"></a>make_tcp_ack_with_data</STRONG> (ARM, 120 bytes, Stack size 16 bytes, ip_arp_udp_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = make_tcp_ack_with_data &rArr; enc28j60PacketSend &rArr; enc28j60Write &rArr; enc28j60SetBank
</UL>
<BR>[Calls]<UL><LI><a href="#[b8636c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_ip_hdr_checksum
<LI><a href="#[b863e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checksum
<LI><a href="#[b86948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60PacketSend
</UL>
<BR>[Called By]<UL><LI><a href="#[b85afc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processTCP
<LI><a href="#[b87758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b85c28]"></a>inituart</STRONG> (ARM, 116 bytes, Stack size 0 bytes, myserver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b872e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myServerTask
</UL>

<P><STRONG><a name="[b85bec]"></a>printUART</STRONG> (ARM, 64 bytes, Stack size 0 bytes, myserver.o(.text), UNUSED)

<P><STRONG><a name="[b85bb0]"></a>UART0_Tx</STRONG> (ARM, 36 bytes, Stack size 0 bytes, myserver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b85340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u_putch
</UL>

<P><STRONG><a name="[b85b74]"></a>decodeICMP</STRONG> (ARM, 256 bytes, Stack size 24 bytes, myserver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = decodeICMP &rArr; make_echo_reply_from_request &rArr; enc28j60PacketSend &rArr; enc28j60Write &rArr; enc28j60SetBank
</UL>
<BR>[Calls]<UL><LI><a href="#[b8582c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u_puts
<LI><a href="#[b85868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u_putHexByte
<LI><a href="#[b87410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_echo_reply_from_request
</UL>
<BR>[Called By]<UL><LI><a href="#[b872e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myServerTask
</UL>

<P><STRONG><a name="[b85b38]"></a>print_webcgi</STRONG> (ARM, 116 bytes, Stack size 16 bytes, myserver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = print_webcgi
</UL>
<BR>[Calls]<UL><LI><a href="#[b8753c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_tcp_data_p
</UL>
<BR>[Called By]<UL><LI><a href="#[b85afc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processTCP
</UL>

<P><STRONG><a name="[b85afc]"></a>processTCP</STRONG> (ARM, 788 bytes, Stack size 40 bytes, myserver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = processTCP &rArr; make_tcp_synack_from_syn &rArr; enc28j60PacketSend &rArr; enc28j60Write &rArr; enc28j60SetBank
</UL>
<BR>[Calls]<UL><LI><a href="#[b83e28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp (via Veneer)
<LI><a href="#[b85b38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_webcgi
<LI><a href="#[b8735c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_tcp_synack_from_syn
<LI><a href="#[b87398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_tcp_ack_with_data
<LI><a href="#[b873d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_tcp_ack_from_any
<LI><a href="#[b87488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_len_info
<LI><a href="#[b87500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tcp_data_pointer
<LI><a href="#[b8753c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_tcp_data_p
<LI><a href="#[b877d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moved_perm
<LI><a href="#[b8780c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analyse_get_url
</UL>
<BR>[Called By]<UL><LI><a href="#[b872e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myServerTask
</UL>

<P><STRONG><a name="[b85ac0]"></a>decodeTCP</STRONG> (ARM, 376 bytes, Stack size 24 bytes, myserver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = decodeTCP &rArr; u_putHexByte &rArr; u_putch
</UL>
<BR>[Calls]<UL><LI><a href="#[b8582c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u_puts
<LI><a href="#[b85868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u_putHexByte
</UL>
<BR>[Called By]<UL><LI><a href="#[b872e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myServerTask
</UL>

<P><STRONG><a name="[b85a84]"></a>decodeUDP</STRONG> (ARM, 436 bytes, Stack size 224 bytes, myserver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = decodeUDP &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b83aa4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[b83c48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[b83d38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen (via Veneer)
<LI><a href="#[b84e54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via Veneer)
<LI><a href="#[b8582c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u_puts
<LI><a href="#[b85868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u_putHexByte
<LI><a href="#[b87320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_udp_reply_from_request
</UL>
<BR>[Called By]<UL><LI><a href="#[b872e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myServerTask
</UL>

<P><STRONG><a name="[b85a48]"></a>decodePacket</STRONG> (ARM, 356 bytes, Stack size 24 bytes, myserver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b8582c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u_puts
<LI><a href="#[b85868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u_putHexByte
<LI><a href="#[b858a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u_putDecByte
</UL>

<P><STRONG><a name="[b872e4]"></a>myServerTask</STRONG> (ARM, 336 bytes, Stack size 8 bytes, myserver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = myServerTask &rArr; decodeUDP &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b8582c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u_puts
<LI><a href="#[b85a84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeUDP
<LI><a href="#[b85ac0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeTCP
<LI><a href="#[b85afc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processTCP
<LI><a href="#[b85b74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeICMP
<LI><a href="#[b85c28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inituart
<LI><a href="#[b8744c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_arp_answer_from_request
<LI><a href="#[b875b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_type_is_ip_and_my_ip
<LI><a href="#[b875f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_type_is_arp_and_my_ip
<LI><a href="#[b876a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60PacketReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[b87758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b85430]"></a>u_abs</STRONG> (ARM, 40 bytes, Stack size 0 bytes, utility.o(.text), UNUSED)

<P><STRONG><a name="[b853f4]"></a>u_sign</STRONG> (ARM, 28 bytes, Stack size 0 bytes, utility.o(.text), UNUSED)

<P><STRONG><a name="[b853b8]"></a>u_hex2dec</STRONG> (ARM, 68 bytes, Stack size 0 bytes, utility.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b8537c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u_asc2uint
</UL>

<P><STRONG><a name="[b8537c]"></a>u_asc2uint</STRONG> (ARM, 76 bytes, Stack size 12 bytes, utility.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b853b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u_hex2dec
</UL>

<P><STRONG><a name="[b85340]"></a>u_putch</STRONG> (ARM, 24 bytes, Stack size 8 bytes, utility.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = u_putch
</UL>
<BR>[Calls]<UL><LI><a href="#[b85bb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Tx
</UL>
<BR>[Called By]<UL><LI><a href="#[b852c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u_putDecWord
<LI><a href="#[b85304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u_putHexWord
<LI><a href="#[b8582c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u_puts
<LI><a href="#[b85868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u_putHexByte
<LI><a href="#[b858a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u_putDecByte
</UL>

<P><STRONG><a name="[b85868]"></a>u_putHexByte</STRONG> (ARM, 68 bytes, Stack size 16 bytes, utility.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = u_putHexByte &rArr; u_putch
</UL>
<BR>[Calls]<UL><LI><a href="#[b85340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u_putch
</UL>
<BR>[Called By]<UL><LI><a href="#[b85304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u_putHexWord
<LI><a href="#[b85a48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodePacket
<LI><a href="#[b85a84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeUDP
<LI><a href="#[b85ac0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeTCP
<LI><a href="#[b85b74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeICMP
</UL>

<P><STRONG><a name="[b85304]"></a>u_putHexWord</STRONG> (ARM, 48 bytes, Stack size 8 bytes, utility.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b85340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u_putch
<LI><a href="#[b85868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u_putHexByte
</UL>

<P><STRONG><a name="[b858a4]"></a>u_putDecByte</STRONG> (ARM, 164 bytes, Stack size 16 bytes, utility.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b83798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[b85340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u_putch
</UL>
<BR>[Called By]<UL><LI><a href="#[b85a48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodePacket
</UL>

<P><STRONG><a name="[b852c8]"></a>u_putDecWord</STRONG> (ARM, 332 bytes, Stack size 16 bytes, utility.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b83798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[b85340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u_putch
</UL>

<P><STRONG><a name="[b8582c]"></a>u_puts</STRONG> (ARM, 40 bytes, Stack size 8 bytes, utility.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = u_puts &rArr; u_putch
</UL>
<BR>[Calls]<UL><LI><a href="#[b85340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u_putch
</UL>
<BR>[Called By]<UL><LI><a href="#[b85a48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodePacket
<LI><a href="#[b85a84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeUDP
<LI><a href="#[b85ac0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeTCP
<LI><a href="#[b85b74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeICMP
<LI><a href="#[b872e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myServerTask
</UL>

<P><STRONG><a name="[b8528c]"></a>u_toupper</STRONG> (ARM, 40 bytes, Stack size 0 bytes, utility.o(.text), UNUSED)

<P><STRONG><a name="[b84e54]"></a>__2sprintf</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, noretval__2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b82604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[b82730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[b85a84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeUDP (via Veneer)
</UL>

<P><STRONG><a name="[b84c74]"></a>__printf</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, __printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b84044]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent (via Veneer)
<LI><a href="#[b84bfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r2
<LI><a href="#[b84c38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r1
</UL>
<BR>[Called By]<UL><LI><a href="#[b82730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[b84b0c]"></a>_printf_str</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_str
</UL>
<BR>[Calls]<UL><LI><a href="#[b84a58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding (Weak Reference)
<LI><a href="#[b84a94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding (Weak Reference)
<LI><a href="#[b84bfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r2
</UL>
<BR>[Called By]<UL><LI><a href="#[b82514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[b83f18]"></a>strcpy</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, strcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b87758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main (via Veneer)
</UL>

<P><STRONG><a name="[b83e28]"></a>strncmp</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[b85afc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processTCP (via Veneer)
<LI><a href="#[b87758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main (via Veneer)
<LI><a href="#[b87848]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_password (via Veneer)
</UL>

<P><STRONG><a name="[b83d38]"></a>strlen</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[b85a84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeUDP (via Veneer)
<LI><a href="#[b87758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main (via Veneer)
</UL>

<P><STRONG><a name="[b83c48]"></a>__aeabi_memcpy</STRONG> (ARM, 0 bytes, Stack size 0 bytes, rt_memcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b85a84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeUDP
</UL>

<P><STRONG><a name="[b83c0c]"></a>__rt_memcpy</STRONG> (ARM, 212 bytes, Stack size 0 bytes, rt_memcpy.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b822bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[b83bd0]"></a>_memcpy_lastbytes</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memcpy.o(.text), UNUSED)

<P><STRONG><a name="[b83aa4]"></a>__aeabi_memclr4</STRONG> (ARM, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[b85a84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeUDP
</UL>

<P><STRONG><a name="[b83a68]"></a>__aeabi_memclr8</STRONG> (ARM, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[b83a2c]"></a>__rt_memclr_w</STRONG> (ARM, 84 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[b839f0]"></a>_memset_w</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[b837d4]"></a>__aeabi_idiv</STRONG> (ARM, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[b83798]"></a>__aeabi_idivmod</STRONG> (ARM, 384 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b852c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u_putDecWord
<LI><a href="#[b858a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u_putDecByte
</UL>

<P><STRONG><a name="[b82e74]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[b82e38]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[b82dfc]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[b82730]"></a>_printf_char_common</STRONG> (Thumb, 38 bytes, Stack size 72 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b84c74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b84e54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[b82604]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b84e54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noretval__2sprintf.o(.text)
</UL>
<P><STRONG><a name="[b82514]"></a>_printf_cs_common</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _printf_cs_common &rArr; _printf_str
</UL>
<BR>[Calls]<UL><LI><a href="#[b82460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_mbtowc (Weak Reference)
<LI><a href="#[b84b0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[b8249c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[b824d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[b824d8]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b82514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[b8249c]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str
</UL>
<BR>[Calls]<UL><LI><a href="#[b82514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[b84134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s (via Veneer)
</UL>

<P><STRONG><a name="[b822bc]"></a>__aeabi_memcpy4</STRONG> (ARM, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b83c0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[b82280]"></a>__aeabi_memcpy8</STRONG> (ARM, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[b82244]"></a>__rt_memcpy_w</STRONG> (ARM, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[b82208]"></a>_memcpy_lastbytes_aligned</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[b81740]"></a>__user_setup_stackheap</STRONG> (ARM, 96 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[b808b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
<LI><a href="#[b885a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
</UL>
<BR>[Called By]<UL><LI><a href="#[b81bf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[b815d8]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b807c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit (via Veneer)
<LI><a href="#[b81560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[b81e0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[b808f4]"></a>__user_libspace</STRONG> (ARM, 12 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[b808b8]"></a>__user_perproc_libspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b81740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[b8087c]"></a>__user_perthread_libspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[b7e8d8]"></a>_sys_exit</STRONG> (ARM, 20 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b7e680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[b7e02c]"></a>__I$use$semihosting</STRONG> (ARM, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> sys_exit.o(.text)
</UL>
<P><STRONG><a name="[b7dff0]"></a>__use_no_semihosting_swi</STRONG> (ARM, 4 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[b84c38]"></a>__ARM_common_call_via_r1</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, __printf.o(i.__ARM_common_call_via_r1))
<BR><BR>[Called By]<UL><LI><a href="#[b84c74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[b84bfc]"></a>__ARM_common_call_via_r2</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, __printf.o(i.__ARM_common_call_via_r2))
<BR><BR>[Called By]<UL><LI><a href="#[b84b0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[b84c74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[b7ea04]"></a>__fplib_config_pureend_doubles</STRONG> (ARM, 0 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[b7e9c8]"></a>_fp_init</STRONG> (ARM, 4 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[b80f48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (via Veneer)
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[b887c0]"></a>Undef_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[b887c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Undef_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b887c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Undef_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[b88784]"></a>SWI_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[b88784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b88784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[b88748]"></a>PAbt_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[b88748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAbt_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b88748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAbt_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[b8870c]"></a>DAbt_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[b8870c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAbt_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b8870c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAbt_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[b886d0]"></a>IRQ_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[b886d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b886d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[b88694]"></a>FIQ_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[b88694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b88694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[b8276c]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[b81560]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[b815d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[b82460]"></a>_printf_mbtowc</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[b82514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[b84a94]"></a>_printf_post_padding</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[b84b0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[b84a58]"></a>_printf_pre_padding</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[b84b0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<HR></body></html>
