<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [C:\working\WebServer\test.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image C:\working\WebServer\test.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, RVCT4.0 [Build 524]: Last Updated: Mon Nov 21 13:21:15 2011
<BR><P>
<H3>Maximum Stack Usage =        432 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; myServerTask &rArr; decodeUDP &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[b88568]">Reset_Handler</a>
 <LI><a href="#[b885a4]">__user_initial_stackheap</a>
 <LI><a href="#[b887c0]">Undef_Handler</a>
 <LI><a href="#[b88784]">SWI_Handler</a>
 <LI><a href="#[b88748]">PAbt_Handler</a>
 <LI><a href="#[b8870c]">DAbt_Handler</a>
 <LI><a href="#[b886d0]">IRQ_Handler</a>
 <LI><a href="#[b88694]">FIQ_Handler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[b887c0]">Undef_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b887c0]">Undef_Handler</a><BR>
 <LI><a href="#[b88784]">SWI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b88784]">SWI_Handler</a><BR>
 <LI><a href="#[b88748]">PAbt_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b88748]">PAbt_Handler</a><BR>
 <LI><a href="#[b8870c]">DAbt_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b8870c]">DAbt_Handler</a><BR>
 <LI><a href="#[b886d0]">IRQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b886d0]">IRQ_Handler</a><BR>
 <LI><a href="#[b88694]">FIQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b88694]">FIQ_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[b88568]">Reset_Handler</a>
 <LI><a href="#[b887c0]">Undef_Handler</a>
 <LI><a href="#[b88784]">SWI_Handler</a>
 <LI><a href="#[b88748]">PAbt_Handler</a>
 <LI><a href="#[b8870c]">DAbt_Handler</a>
 <LI><a href="#[b886d0]">IRQ_Handler</a>
 <LI><a href="#[b88694]">FIQ_Handler</a>
 <LI><a href="#[b822bc]">__main</a>
 <LI><a href="#[b8483c]">main</a>
 <LI><a href="#[b81bb4]">_sputc</a>
 <LI><a href="#[b81d1c]">_printf_input_char</a>
 <LI><a href="#[b7d5dc]">__I$use$semihosting</a>
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[b88568]"></a>Reset_Handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[b822bc]"></a>__main</STRONG> (ARM, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[b7b110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[b82190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[b7b110]"></a>__scatterload</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[b822bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[b7b0d4]"></a>__scatterload_rt2</STRONG> (ARM, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b82190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[b7b098]"></a>__scatterload_null</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[b7aef4]"></a>__scatterload_copy</STRONG> (ARM, 40 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b7aef4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[b7aef4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[b7ae04]"></a>__scatterload_zeroinit</STRONG> (ARM, 44 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[b835f4]"></a>_printf_percent</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[b84224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf (via Veneer)
</UL>

<P><STRONG><a name="[b836e4]"></a>_printf_s</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str
</UL>
<BR>[Calls]<UL><LI><a href="#[b81a4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string (via Veneer)
</UL>

<P><STRONG><a name="[b8195c]"></a>_printf_percent_end</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[b804f8]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Calls]<UL><LI><a href="#[b7df78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[b81470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li (via Veneer)
</UL>

<P><STRONG><a name="[b7e644]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002A))

<P><STRONG><a name="[b7e6bc]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000028))

<P><STRONG><a name="[b7ea7c]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[b7e914]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[b7e554]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[b7e5cc]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[b7e98c]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[b7e89c]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[b7ee78]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000006))

<P><STRONG><a name="[b7ecd4]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000D))

<P><STRONG><a name="[b7ec5c]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))

<P><STRONG><a name="[b7ebe4]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[b7eb6c]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[b7eaf4]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[b7ed88]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[b7e518]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002F))

<P><STRONG><a name="[b7ea04]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[b7e824]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[b7ee00]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000008))

<P><STRONG><a name="[b7c9ac]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[b7dc6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls (via Veneer)
</UL>

<P><STRONG><a name="[b7b674]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[b7b494]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[b7b458]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[b7b5c0]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[b7b728]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[b7b548]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[b82190]"></a>__rt_entry</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[b7b0d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[b822bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[b81524]"></a>__rt_entry_presh_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[b811a0]"></a>__rt_entry_sh</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[b80cf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[b81470]"></a>__rt_entry_li</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[b804f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (via Veneer)
</UL>

<P><STRONG><a name="[b814ac]"></a>__rt_entry_postsh_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[b813bc]"></a>__rt_entry_main</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Calls]<UL><LI><a href="#[b80b88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit (via BX)
</UL>

<P><STRONG><a name="[b813f8]"></a>__rt_entry_postli_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[b7fd78]"></a>__rt_exit</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[b80b88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit (via Veneer)
</UL>

<P><STRONG><a name="[b7dc6c]"></a>__rt_exit_ls</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[b7c9ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown (via Veneer)
</UL>

<P><STRONG><a name="[b7dca8]"></a>__rt_exit_prels_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[b7dc30]"></a>__rt_exit_exit</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[b7de88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[b885a4]"></a>__user_initial_stackheap</STRONG> (ARM, 0 bytes, Stack size unknown bytes, startup.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b80cf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[b87230]"></a>_delay_us</STRONG> (ARM, 40 bytes, Stack size 0 bytes, enc28j60.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b86fd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60PhyWrite
<LI><a href="#[b87014]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60PhyReadH
</UL>

<P><STRONG><a name="[b871f4]"></a>delay_ms</STRONG> (ARM, 40 bytes, Stack size 0 bytes, enc28j60.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b8483c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b86f60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60Init
</UL>

<P><STRONG><a name="[b871b8]"></a>enc28j60ReadOp</STRONG> (ARM, 152 bytes, Stack size 0 bytes, enc28j60.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b86e70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60PacketReceive
<LI><a href="#[b8708c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60Read
</UL>

<P><STRONG><a name="[b8717c]"></a>enc28j60WriteOp</STRONG> (ARM, 92 bytes, Stack size 0 bytes, enc28j60.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b86e70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60PacketReceive
<LI><a href="#[b86eac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60PacketSend
<LI><a href="#[b86f60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60Init
<LI><a href="#[b87050]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60Write
<LI><a href="#[b870c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60SetBank
</UL>

<P><STRONG><a name="[b87140]"></a>enc28j60ReadBuffer</STRONG> (ARM, 140 bytes, Stack size 0 bytes, enc28j60.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b86e70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60PacketReceive
</UL>

<P><STRONG><a name="[b87104]"></a>enc28j60WriteBuffer</STRONG> (ARM, 120 bytes, Stack size 0 bytes, enc28j60.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b86eac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60PacketSend
</UL>

<P><STRONG><a name="[b870c8]"></a>enc28j60SetBank</STRONG> (ARM, 84 bytes, Stack size 8 bytes, enc28j60.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = enc28j60SetBank
</UL>
<BR>[Calls]<UL><LI><a href="#[b8717c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60WriteOp
</UL>
<BR>[Called By]<UL><LI><a href="#[b86f60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60Init
<LI><a href="#[b87050]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60Write
<LI><a href="#[b8708c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60Read
</UL>

<P><STRONG><a name="[b8708c]"></a>enc28j60Read</STRONG> (ARM, 36 bytes, Stack size 8 bytes, enc28j60.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = enc28j60Read &rArr; enc28j60SetBank
</UL>
<BR>[Calls]<UL><LI><a href="#[b870c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60SetBank
<LI><a href="#[b871b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60ReadOp
</UL>
<BR>[Called By]<UL><LI><a href="#[b86e70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60PacketReceive
<LI><a href="#[b86eac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60PacketSend
<LI><a href="#[b86f24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60getrev
<LI><a href="#[b86fd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60PhyWrite
<LI><a href="#[b87014]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60PhyReadH
</UL>

<P><STRONG><a name="[b87050]"></a>enc28j60Write</STRONG> (ARM, 44 bytes, Stack size 12 bytes, enc28j60.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = enc28j60Write &rArr; enc28j60SetBank
</UL>
<BR>[Calls]<UL><LI><a href="#[b870c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60SetBank
<LI><a href="#[b8717c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60WriteOp
</UL>
<BR>[Called By]<UL><LI><a href="#[b86e70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60PacketReceive
<LI><a href="#[b86eac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60PacketSend
<LI><a href="#[b86f60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60Init
<LI><a href="#[b86f9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60clkout
<LI><a href="#[b86fd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60PhyWrite
<LI><a href="#[b87014]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60PhyReadH
</UL>

<P><STRONG><a name="[b87014]"></a>enc28j60PhyReadH</STRONG> (ARM, 88 bytes, Stack size 8 bytes, enc28j60.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b87050]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60Write
<LI><a href="#[b8708c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60Read
<LI><a href="#[b87230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[b86ee8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60linkup
</UL>

<P><STRONG><a name="[b86fd8]"></a>enc28j60PhyWrite</STRONG> (ARM, 84 bytes, Stack size 12 bytes, enc28j60.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = enc28j60PhyWrite &rArr; enc28j60Write &rArr; enc28j60SetBank
</UL>
<BR>[Calls]<UL><LI><a href="#[b87050]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60Write
<LI><a href="#[b8708c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60Read
<LI><a href="#[b87230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[b8483c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b86f60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60Init
</UL>

<P><STRONG><a name="[b86f9c]"></a>enc28j60clkout</STRONG> (ARM, 28 bytes, Stack size 8 bytes, enc28j60.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = enc28j60clkout &rArr; enc28j60Write &rArr; enc28j60SetBank
</UL>
<BR>[Calls]<UL><LI><a href="#[b87050]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60Write
</UL>
<BR>[Called By]<UL><LI><a href="#[b8483c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b86f60]"></a>enc28j60Init</STRONG> (ARM, 576 bytes, Stack size 8 bytes, enc28j60.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = enc28j60Init &rArr; enc28j60PhyWrite &rArr; enc28j60Write &rArr; enc28j60SetBank
</UL>
<BR>[Calls]<UL><LI><a href="#[b86fd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60PhyWrite
<LI><a href="#[b87050]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60Write
<LI><a href="#[b870c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60SetBank
<LI><a href="#[b8717c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60WriteOp
<LI><a href="#[b871f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[b8483c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b86f24]"></a>enc28j60getrev</STRONG> (ARM, 20 bytes, Stack size 4 bytes, enc28j60.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b8708c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60Read
</UL>

<P><STRONG><a name="[b86ee8]"></a>enc28j60linkup</STRONG> (ARM, 44 bytes, Stack size 4 bytes, enc28j60.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b87014]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60PhyReadH
</UL>

<P><STRONG><a name="[b86eac]"></a>enc28j60PacketSend</STRONG> (ARM, 160 bytes, Stack size 12 bytes, enc28j60.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = enc28j60PacketSend &rArr; enc28j60Write &rArr; enc28j60SetBank
</UL>
<BR>[Calls]<UL><LI><a href="#[b87050]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60Write
<LI><a href="#[b8708c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60Read
<LI><a href="#[b87104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60WriteBuffer
<LI><a href="#[b8717c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60WriteOp
</UL>
<BR>[Called By]<UL><LI><a href="#[b86420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_tcp_ack_with_data
<LI><a href="#[b8645c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_tcp_ack_from_any
<LI><a href="#[b86588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_tcp_synack_from_syn
<LI><a href="#[b865c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_udp_reply_from_request
<LI><a href="#[b86600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_echo_reply_from_request
<LI><a href="#[b8663c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_arp_answer_from_request
</UL>

<P><STRONG><a name="[b86e70]"></a>enc28j60PacketReceive</STRONG> (ARM, 324 bytes, Stack size 20 bytes, enc28j60.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = enc28j60PacketReceive &rArr; enc28j60Write &rArr; enc28j60SetBank
</UL>
<BR>[Calls]<UL><LI><a href="#[b87050]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60Write
<LI><a href="#[b8708c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60Read
<LI><a href="#[b87140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60ReadBuffer
<LI><a href="#[b8717c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60WriteOp
<LI><a href="#[b871b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60ReadOp
</UL>
<BR>[Called By]<UL><LI><a href="#[b8483c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b8573c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myServerTask
</UL>

<P><STRONG><a name="[b8681c]"></a>checksum</STRONG> (ARM, 160 bytes, Stack size 4 bytes, ip_arp_udp_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = checksum
</UL>
<BR>[Called By]<UL><LI><a href="#[b86420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_tcp_ack_with_data
<LI><a href="#[b8645c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_tcp_ack_from_any
<LI><a href="#[b86588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_tcp_synack_from_syn
<LI><a href="#[b865c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_udp_reply_from_request
<LI><a href="#[b866f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_ip_hdr_checksum
</UL>

<P><STRONG><a name="[b867e0]"></a>init_ip_arp_udp_tcp</STRONG> (ARM, 92 bytes, Stack size 4 bytes, ip_arp_udp_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = init_ip_arp_udp_tcp
</UL>
<BR>[Called By]<UL><LI><a href="#[b8483c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b867a4]"></a>eth_type_is_arp_and_my_ip</STRONG> (ARM, 116 bytes, Stack size 0 bytes, ip_arp_udp_tcp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b8483c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b8573c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myServerTask
</UL>

<P><STRONG><a name="[b86768]"></a>eth_type_is_ip_and_my_ip</STRONG> (ARM, 136 bytes, Stack size 0 bytes, ip_arp_udp_tcp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b8483c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b8573c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myServerTask
</UL>

<P><STRONG><a name="[b8672c]"></a>make_eth</STRONG> (ARM, 56 bytes, Stack size 0 bytes, ip_arp_udp_tcp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b8645c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_tcp_ack_from_any
<LI><a href="#[b86588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_tcp_synack_from_syn
<LI><a href="#[b865c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_udp_reply_from_request
<LI><a href="#[b86600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_echo_reply_from_request
<LI><a href="#[b8663c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_arp_answer_from_request
</UL>

<P><STRONG><a name="[b866f0]"></a>fill_ip_hdr_checksum</STRONG> (ARM, 84 bytes, Stack size 12 bytes, ip_arp_udp_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fill_ip_hdr_checksum &rArr; checksum
</UL>
<BR>[Calls]<UL><LI><a href="#[b8681c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checksum
</UL>
<BR>[Called By]<UL><LI><a href="#[b86420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_tcp_ack_with_data
<LI><a href="#[b866b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_ip
</UL>

<P><STRONG><a name="[b866b4]"></a>make_ip</STRONG> (ARM, 80 bytes, Stack size 12 bytes, ip_arp_udp_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = make_ip &rArr; fill_ip_hdr_checksum &rArr; checksum
</UL>
<BR>[Calls]<UL><LI><a href="#[b866f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_ip_hdr_checksum
</UL>
<BR>[Called By]<UL><LI><a href="#[b8645c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_tcp_ack_from_any
<LI><a href="#[b86588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_tcp_synack_from_syn
<LI><a href="#[b865c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_udp_reply_from_request
<LI><a href="#[b86600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_echo_reply_from_request
</UL>

<P><STRONG><a name="[b86678]"></a>make_tcphead</STRONG> (ARM, 304 bytes, Stack size 12 bytes, ip_arp_udp_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = make_tcphead
</UL>
<BR>[Called By]<UL><LI><a href="#[b8645c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_tcp_ack_from_any
<LI><a href="#[b86588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_tcp_synack_from_syn
</UL>

<P><STRONG><a name="[b8663c]"></a>make_arp_answer_from_request</STRONG> (ARM, 164 bytes, Stack size 16 bytes, ip_arp_udp_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = make_arp_answer_from_request &rArr; enc28j60PacketSend &rArr; enc28j60Write &rArr; enc28j60SetBank
</UL>
<BR>[Calls]<UL><LI><a href="#[b8672c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_eth
<LI><a href="#[b86eac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60PacketSend
</UL>
<BR>[Called By]<UL><LI><a href="#[b8483c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b8573c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myServerTask
</UL>

<P><STRONG><a name="[b86600]"></a>make_echo_reply_from_request</STRONG> (ARM, 92 bytes, Stack size 16 bytes, ip_arp_udp_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = make_echo_reply_from_request &rArr; enc28j60PacketSend &rArr; enc28j60Write &rArr; enc28j60SetBank
</UL>
<BR>[Calls]<UL><LI><a href="#[b866b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_ip
<LI><a href="#[b8672c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_eth
<LI><a href="#[b86eac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60PacketSend
</UL>
<BR>[Called By]<UL><LI><a href="#[b8483c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b858a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeICMP
</UL>

<P><STRONG><a name="[b865c4]"></a>make_udp_reply_from_request</STRONG> (ARM, 192 bytes, Stack size 32 bytes, ip_arp_udp_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = make_udp_reply_from_request &rArr; enc28j60PacketSend &rArr; enc28j60Write &rArr; enc28j60SetBank
</UL>
<BR>[Calls]<UL><LI><a href="#[b866b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_ip
<LI><a href="#[b8672c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_eth
<LI><a href="#[b8681c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checksum
<LI><a href="#[b86eac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60PacketSend
</UL>
<BR>[Called By]<UL><LI><a href="#[b8483c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b857b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeUDP
</UL>

<P><STRONG><a name="[b86588]"></a>make_tcp_synack_from_syn</STRONG> (ARM, 120 bytes, Stack size 16 bytes, ip_arp_udp_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = make_tcp_synack_from_syn &rArr; enc28j60PacketSend &rArr; enc28j60Write &rArr; enc28j60SetBank
</UL>
<BR>[Calls]<UL><LI><a href="#[b86678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_tcphead
<LI><a href="#[b866b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_ip
<LI><a href="#[b8672c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_eth
<LI><a href="#[b8681c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checksum
<LI><a href="#[b86eac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60PacketSend
</UL>
<BR>[Called By]<UL><LI><a href="#[b8483c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b8582c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processTCP
</UL>

<P><STRONG><a name="[b8654c]"></a>get_tcp_data_pointer</STRONG> (ARM, 48 bytes, Stack size 0 bytes, ip_arp_udp_tcp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b8483c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b8582c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processTCP
</UL>

<P><STRONG><a name="[b86510]"></a>init_len_info</STRONG> (ARM, 132 bytes, Stack size 0 bytes, ip_arp_udp_tcp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b8483c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b8582c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processTCP
</UL>

<P><STRONG><a name="[b864d4]"></a>fill_tcp_data_p</STRONG> (ARM, 44 bytes, Stack size 0 bytes, ip_arp_udp_tcp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b8483c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b84878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_webpage
<LI><a href="#[b8555c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moved_perm
<LI><a href="#[b8582c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processTCP
<LI><a href="#[b85868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_webcgi
</UL>

<P><STRONG><a name="[b86498]"></a>fill_tcp_data</STRONG> (ARM, 52 bytes, Stack size 0 bytes, ip_arp_udp_tcp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b8555c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moved_perm
</UL>

<P><STRONG><a name="[b8645c]"></a>make_tcp_ack_from_any</STRONG> (ARM, 172 bytes, Stack size 16 bytes, ip_arp_udp_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = make_tcp_ack_from_any &rArr; enc28j60PacketSend &rArr; enc28j60Write &rArr; enc28j60SetBank
</UL>
<BR>[Calls]<UL><LI><a href="#[b86678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_tcphead
<LI><a href="#[b866b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_ip
<LI><a href="#[b8672c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_eth
<LI><a href="#[b8681c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checksum
<LI><a href="#[b86eac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60PacketSend
</UL>
<BR>[Called By]<UL><LI><a href="#[b8483c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b8582c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processTCP
</UL>

<P><STRONG><a name="[b86420]"></a>make_tcp_ack_with_data</STRONG> (ARM, 120 bytes, Stack size 16 bytes, ip_arp_udp_tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = make_tcp_ack_with_data &rArr; enc28j60PacketSend &rArr; enc28j60Write &rArr; enc28j60SetBank
</UL>
<BR>[Calls]<UL><LI><a href="#[b866f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_ip_hdr_checksum
<LI><a href="#[b8681c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checksum
<LI><a href="#[b86eac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60PacketSend
</UL>
<BR>[Called By]<UL><LI><a href="#[b8483c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b8582c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processTCP
</UL>

<P><STRONG><a name="[b85958]"></a>inituart</STRONG> (ARM, 116 bytes, Stack size 0 bytes, myserver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b8573c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myServerTask
</UL>

<P><STRONG><a name="[b8591c]"></a>printUART</STRONG> (ARM, 64 bytes, Stack size 0 bytes, myserver.o(.text), UNUSED)

<P><STRONG><a name="[b858e0]"></a>UART0_Tx</STRONG> (ARM, 36 bytes, Stack size 0 bytes, myserver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b84f44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u_putch
</UL>

<P><STRONG><a name="[b858a4]"></a>decodeICMP</STRONG> (ARM, 256 bytes, Stack size 24 bytes, myserver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = decodeICMP &rArr; make_echo_reply_from_request &rArr; enc28j60PacketSend &rArr; enc28j60Write &rArr; enc28j60SetBank
</UL>
<BR>[Calls]<UL><LI><a href="#[b85430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u_puts
<LI><a href="#[b8546c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u_putHexByte
<LI><a href="#[b86600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_echo_reply_from_request
</UL>
<BR>[Called By]<UL><LI><a href="#[b8573c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myServerTask
</UL>

<P><STRONG><a name="[b85868]"></a>print_webcgi</STRONG> (ARM, 116 bytes, Stack size 16 bytes, myserver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = print_webcgi
</UL>
<BR>[Calls]<UL><LI><a href="#[b864d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_tcp_data_p
</UL>
<BR>[Called By]<UL><LI><a href="#[b8582c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processTCP
</UL>

<P><STRONG><a name="[b8582c]"></a>processTCP</STRONG> (ARM, 788 bytes, Stack size 40 bytes, myserver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = processTCP &rArr; make_tcp_ack_with_data &rArr; enc28j60PacketSend &rArr; enc28j60Write &rArr; enc28j60SetBank
</UL>
<BR>[Calls]<UL><LI><a href="#[b833d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp (via Veneer)
<LI><a href="#[b8555c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moved_perm
<LI><a href="#[b85598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analyse_get_url
<LI><a href="#[b85868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_webcgi
<LI><a href="#[b86420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_tcp_ack_with_data
<LI><a href="#[b8645c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_tcp_ack_from_any
<LI><a href="#[b864d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_tcp_data_p
<LI><a href="#[b86510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_len_info
<LI><a href="#[b8654c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tcp_data_pointer
<LI><a href="#[b86588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_tcp_synack_from_syn
</UL>
<BR>[Called By]<UL><LI><a href="#[b8573c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myServerTask
</UL>

<P><STRONG><a name="[b857f0]"></a>decodeTCP</STRONG> (ARM, 376 bytes, Stack size 24 bytes, myserver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = decodeTCP &rArr; u_putHexByte &rArr; u_putch
</UL>
<BR>[Calls]<UL><LI><a href="#[b85430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u_puts
<LI><a href="#[b8546c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u_putHexByte
</UL>
<BR>[Called By]<UL><LI><a href="#[b8573c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myServerTask
</UL>

<P><STRONG><a name="[b857b4]"></a>decodeUDP</STRONG> (ARM, 436 bytes, Stack size 224 bytes, myserver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = decodeUDP &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b83054]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[b831f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[b832e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen (via Veneer)
<LI><a href="#[b84404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via Veneer)
<LI><a href="#[b85430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u_puts
<LI><a href="#[b8546c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u_putHexByte
<LI><a href="#[b865c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_udp_reply_from_request
</UL>
<BR>[Called By]<UL><LI><a href="#[b8573c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myServerTask
</UL>

<P><STRONG><a name="[b85778]"></a>decodePacket</STRONG> (ARM, 356 bytes, Stack size 24 bytes, myserver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b85430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u_puts
<LI><a href="#[b8546c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u_putHexByte
<LI><a href="#[b854a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u_putDecByte
</UL>

<P><STRONG><a name="[b8573c]"></a>myServerTask</STRONG> (ARM, 336 bytes, Stack size 8 bytes, myserver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = myServerTask &rArr; decodeUDP &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b85430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u_puts
<LI><a href="#[b857b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeUDP
<LI><a href="#[b857f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeTCP
<LI><a href="#[b8582c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processTCP
<LI><a href="#[b858a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeICMP
<LI><a href="#[b85958]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inituart
<LI><a href="#[b8663c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_arp_answer_from_request
<LI><a href="#[b86768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_type_is_ip_and_my_ip
<LI><a href="#[b867a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_type_is_arp_and_my_ip
<LI><a href="#[b86e70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60PacketReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[b8483c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b85034]"></a>u_abs</STRONG> (ARM, 40 bytes, Stack size 0 bytes, utility.o(.text), UNUSED)

<P><STRONG><a name="[b84ff8]"></a>u_sign</STRONG> (ARM, 28 bytes, Stack size 0 bytes, utility.o(.text), UNUSED)

<P><STRONG><a name="[b84fbc]"></a>u_hex2dec</STRONG> (ARM, 68 bytes, Stack size 0 bytes, utility.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b84f80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u_asc2uint
</UL>

<P><STRONG><a name="[b84f80]"></a>u_asc2uint</STRONG> (ARM, 76 bytes, Stack size 12 bytes, utility.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b84fbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u_hex2dec
</UL>

<P><STRONG><a name="[b84f44]"></a>u_putch</STRONG> (ARM, 24 bytes, Stack size 8 bytes, utility.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = u_putch
</UL>
<BR>[Calls]<UL><LI><a href="#[b858e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Tx
</UL>
<BR>[Called By]<UL><LI><a href="#[b84ecc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u_putDecWord
<LI><a href="#[b84f08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u_putHexWord
<LI><a href="#[b85430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u_puts
<LI><a href="#[b8546c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u_putHexByte
<LI><a href="#[b854a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u_putDecByte
</UL>

<P><STRONG><a name="[b8546c]"></a>u_putHexByte</STRONG> (ARM, 68 bytes, Stack size 16 bytes, utility.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = u_putHexByte &rArr; u_putch
</UL>
<BR>[Calls]<UL><LI><a href="#[b84f44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u_putch
</UL>
<BR>[Called By]<UL><LI><a href="#[b84f08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u_putHexWord
<LI><a href="#[b85778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodePacket
<LI><a href="#[b857b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeUDP
<LI><a href="#[b857f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeTCP
<LI><a href="#[b858a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeICMP
</UL>

<P><STRONG><a name="[b84f08]"></a>u_putHexWord</STRONG> (ARM, 48 bytes, Stack size 8 bytes, utility.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b84f44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u_putch
<LI><a href="#[b8546c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u_putHexByte
</UL>

<P><STRONG><a name="[b854a8]"></a>u_putDecByte</STRONG> (ARM, 164 bytes, Stack size 16 bytes, utility.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b82d48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[b84f44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u_putch
</UL>
<BR>[Called By]<UL><LI><a href="#[b85778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodePacket
</UL>

<P><STRONG><a name="[b84ecc]"></a>u_putDecWord</STRONG> (ARM, 332 bytes, Stack size 16 bytes, utility.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b82d48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[b84f44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u_putch
</UL>

<P><STRONG><a name="[b85430]"></a>u_puts</STRONG> (ARM, 40 bytes, Stack size 8 bytes, utility.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = u_puts &rArr; u_putch
</UL>
<BR>[Calls]<UL><LI><a href="#[b84f44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u_putch
</UL>
<BR>[Called By]<UL><LI><a href="#[b8573c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myServerTask
<LI><a href="#[b85778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodePacket
<LI><a href="#[b857b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeUDP
<LI><a href="#[b857f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeTCP
<LI><a href="#[b858a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeICMP
</UL>

<P><STRONG><a name="[b84e90]"></a>u_toupper</STRONG> (ARM, 40 bytes, Stack size 0 bytes, utility.o(.text), UNUSED)

<P><STRONG><a name="[b848b4]"></a>verify_password</STRONG> (ARM, 52 bytes, Stack size 8 bytes, webserver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = verify_password &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[b833d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[b8483c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b85598]"></a>analyse_get_url</STRONG> (ARM, 168 bytes, Stack size 0 bytes, webserver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b8483c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b8582c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processTCP
</UL>

<P><STRONG><a name="[b8555c]"></a>moved_perm</STRONG> (ARM, 120 bytes, Stack size 16 bytes, webserver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = moved_perm
</UL>
<BR>[Calls]<UL><LI><a href="#[b86498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_tcp_data
<LI><a href="#[b864d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_tcp_data_p
</UL>
<BR>[Called By]<UL><LI><a href="#[b8483c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b8582c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processTCP
</UL>

<P><STRONG><a name="[b84878]"></a>print_webpage</STRONG> (ARM, 500 bytes, Stack size 16 bytes, webserver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = print_webpage
</UL>
<BR>[Calls]<UL><LI><a href="#[b864d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_tcp_data_p
</UL>
<BR>[Called By]<UL><LI><a href="#[b8483c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b8483c]"></a>main</STRONG> (ARM, 1480 bytes, Stack size 72 bytes, webserver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = main &rArr; myServerTask &rArr; decodeUDP &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b832e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen (via Veneer)
<LI><a href="#[b833d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp (via Veneer)
<LI><a href="#[b834c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy (via Veneer)
<LI><a href="#[b84878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_webpage
<LI><a href="#[b848b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_password
<LI><a href="#[b8555c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moved_perm
<LI><a href="#[b85598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analyse_get_url
<LI><a href="#[b8573c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myServerTask
<LI><a href="#[b86420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_tcp_ack_with_data
<LI><a href="#[b8645c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_tcp_ack_from_any
<LI><a href="#[b864d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_tcp_data_p
<LI><a href="#[b86510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_len_info
<LI><a href="#[b8654c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tcp_data_pointer
<LI><a href="#[b86588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_tcp_synack_from_syn
<LI><a href="#[b865c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_udp_reply_from_request
<LI><a href="#[b86600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_echo_reply_from_request
<LI><a href="#[b8663c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_arp_answer_from_request
<LI><a href="#[b86768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_type_is_ip_and_my_ip
<LI><a href="#[b867a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_type_is_arp_and_my_ip
<LI><a href="#[b867e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ip_arp_udp_tcp
<LI><a href="#[b86e70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60PacketReceive
<LI><a href="#[b86f60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60Init
<LI><a href="#[b86f9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60clkout
<LI><a href="#[b86fd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60PhyWrite
<LI><a href="#[b871f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtentry2.o(.ARM.Collect$$rtentry$$0000000D)
</UL>
<P><STRONG><a name="[b84404]"></a>__2sprintf</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, noretval__2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b81bb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[b81ce0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[b857b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeUDP (via Veneer)
</UL>

<P><STRONG><a name="[b84224]"></a>__printf</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, __printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b835f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent (via Veneer)
<LI><a href="#[b841ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r2
<LI><a href="#[b841e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r1
</UL>
<BR>[Called By]<UL><LI><a href="#[b81ce0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[b840bc]"></a>_printf_str</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_str
</UL>
<BR>[Calls]<UL><LI><a href="#[b84008]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding (Weak Reference)
<LI><a href="#[b84044]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding (Weak Reference)
<LI><a href="#[b841ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r2
</UL>
<BR>[Called By]<UL><LI><a href="#[b81ac4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[b834c8]"></a>strcpy</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, strcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b8483c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main (via Veneer)
</UL>

<P><STRONG><a name="[b833d8]"></a>strncmp</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[b8483c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main (via Veneer)
<LI><a href="#[b848b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_password (via Veneer)
<LI><a href="#[b8582c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processTCP (via Veneer)
</UL>

<P><STRONG><a name="[b832e8]"></a>strlen</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[b8483c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main (via Veneer)
<LI><a href="#[b857b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeUDP (via Veneer)
</UL>

<P><STRONG><a name="[b831f8]"></a>__aeabi_memcpy</STRONG> (ARM, 0 bytes, Stack size 0 bytes, rt_memcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b857b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeUDP
</UL>

<P><STRONG><a name="[b831bc]"></a>__rt_memcpy</STRONG> (ARM, 212 bytes, Stack size 0 bytes, rt_memcpy.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b8186c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[b83180]"></a>_memcpy_lastbytes</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memcpy.o(.text), UNUSED)

<P><STRONG><a name="[b83054]"></a>__aeabi_memclr4</STRONG> (ARM, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[b857b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeUDP
</UL>

<P><STRONG><a name="[b83018]"></a>__aeabi_memclr8</STRONG> (ARM, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[b82fdc]"></a>__rt_memclr_w</STRONG> (ARM, 84 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[b82fa0]"></a>_memset_w</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[b82d84]"></a>__aeabi_idiv</STRONG> (ARM, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[b82d48]"></a>__aeabi_idivmod</STRONG> (ARM, 384 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b84ecc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u_putDecWord
<LI><a href="#[b854a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u_putDecByte
</UL>

<P><STRONG><a name="[b82424]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[b823e8]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[b823ac]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[b81ce0]"></a>_printf_char_common</STRONG> (Thumb, 38 bytes, Stack size 72 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b84224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b84404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[b81bb4]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b84404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noretval__2sprintf.o(.text)
</UL>
<P><STRONG><a name="[b81ac4]"></a>_printf_cs_common</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _printf_cs_common &rArr; _printf_str
</UL>
<BR>[Calls]<UL><LI><a href="#[b81a10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_mbtowc (Weak Reference)
<LI><a href="#[b840bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[b81a4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[b81a88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[b81a88]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b81ac4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[b81a4c]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str
</UL>
<BR>[Calls]<UL><LI><a href="#[b81ac4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[b836e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s (via Veneer)
</UL>

<P><STRONG><a name="[b8186c]"></a>__aeabi_memcpy4</STRONG> (ARM, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b831bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[b81830]"></a>__aeabi_memcpy8</STRONG> (ARM, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[b817f4]"></a>__rt_memcpy_w</STRONG> (ARM, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[b817b8]"></a>_memcpy_lastbytes_aligned</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[b80cf0]"></a>__user_setup_stackheap</STRONG> (ARM, 96 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[b7fe68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
<LI><a href="#[b885a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
</UL>
<BR>[Called By]<UL><LI><a href="#[b811a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[b80b88]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b7fd78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit (via Veneer)
<LI><a href="#[b80b10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[b813bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[b7fea4]"></a>__user_libspace</STRONG> (ARM, 12 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[b7fe68]"></a>__user_perproc_libspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b80cf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[b7fe2c]"></a>__user_perthread_libspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[b7de88]"></a>_sys_exit</STRONG> (ARM, 20 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b7dc30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[b7d5dc]"></a>__I$use$semihosting</STRONG> (ARM, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> sys_exit.o(.text)
</UL>
<P><STRONG><a name="[b7d5a0]"></a>__use_no_semihosting_swi</STRONG> (ARM, 4 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[b841e8]"></a>__ARM_common_call_via_r1</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, __printf.o(i.__ARM_common_call_via_r1))
<BR><BR>[Called By]<UL><LI><a href="#[b84224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[b841ac]"></a>__ARM_common_call_via_r2</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, __printf.o(i.__ARM_common_call_via_r2))
<BR><BR>[Called By]<UL><LI><a href="#[b840bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[b84224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[b7dfb4]"></a>__fplib_config_pureend_doubles</STRONG> (ARM, 0 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[b7df78]"></a>_fp_init</STRONG> (ARM, 4 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[b804f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (via Veneer)
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[b887c0]"></a>Undef_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[b887c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Undef_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b887c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Undef_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[b88784]"></a>SWI_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[b88784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b88784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[b88748]"></a>PAbt_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[b88748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAbt_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b88748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAbt_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[b8870c]"></a>DAbt_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[b8870c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAbt_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b8870c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAbt_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[b886d0]"></a>IRQ_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[b886d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b886d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[b88694]"></a>FIQ_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[b88694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b88694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[b81d1c]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[b80b10]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[b80b88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[b81a10]"></a>_printf_mbtowc</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[b81ac4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[b84044]"></a>_printf_post_padding</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[b840bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[b84008]"></a>_printf_pre_padding</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[b840bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<HR></body></html>
