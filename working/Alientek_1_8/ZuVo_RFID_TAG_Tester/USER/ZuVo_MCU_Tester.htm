<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [C:\working\Alientek_1_8\ZuVo_RFID_TAG_Tester\USER\ZuVo_MCU_Tester.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image C:\working\Alientek_1_8\ZuVo_RFID_TAG_Tester\USER\ZuVo_MCU_Tester.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, RVCT4.0 [Build 524]: Last Updated: Tue Jul 19 14:19:00 2011
<BR><P>
<H3>Maximum Stack Usage =          0 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>

<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[bcc748]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[bcc748]">NMI_Handler</a><BR>
 <LI><a href="#[bcc70c]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[bcc70c]">HardFault_Handler</a><BR>
 <LI><a href="#[bcc6d0]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[bcc6d0]">MemManage_Handler</a><BR>
 <LI><a href="#[bcc694]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[bcc694]">BusFault_Handler</a><BR>
 <LI><a href="#[bcc658]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[bcc658]">UsageFault_Handler</a><BR>
 <LI><a href="#[bcc61c]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[bcc61c]">SVC_Handler</a><BR>
 <LI><a href="#[bcc5e0]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[bcc5e0]">DebugMon_Handler</a><BR>
 <LI><a href="#[bcc5a4]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[bcc5a4]">PendSV_Handler</a><BR>
 <LI><a href="#[bcc568]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[bcc568]">SysTick_Handler</a><BR>
 <LI><a href="#[bcc52c]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[bcc52c]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[bcc784]">Reset_Handler</a>
 <LI><a href="#[bcc748]">NMI_Handler</a>
 <LI><a href="#[bcc70c]">HardFault_Handler</a>
 <LI><a href="#[bcc6d0]">MemManage_Handler</a>
 <LI><a href="#[bcc694]">BusFault_Handler</a>
 <LI><a href="#[bcc658]">UsageFault_Handler</a>
 <LI><a href="#[bcc61c]">SVC_Handler</a>
 <LI><a href="#[bcc5e0]">DebugMon_Handler</a>
 <LI><a href="#[bcc5a4]">PendSV_Handler</a>
 <LI><a href="#[bcc568]">SysTick_Handler</a>
 <LI><a href="#[bc8ad0]">WWDG_IRQHandler</a>
 <LI><a href="#[bcc004]">PVD_IRQHandler</a>
 <LI><a href="#[bcbe9c]">TAMPER_IRQHandler</a>
 <LI><a href="#[bcbf50]">RTC_IRQHandler</a>
 <LI><a href="#[bcc130]">FLASH_IRQHandler</a>
 <LI><a href="#[bcbfc8]">RCC_IRQHandler</a>
 <LI><a href="#[bc8d64]">EXTI0_IRQHandler</a>
 <LI><a href="#[bcc25c]">EXTI1_IRQHandler</a>
 <LI><a href="#[bcc220]">EXTI2_IRQHandler</a>
 <LI><a href="#[bcc1e4]">EXTI3_IRQHandler</a>
 <LI><a href="#[bcc1a8]">EXTI4_IRQHandler</a>
 <LI><a href="#[bcc478]">DMAChannel1_IRQHandler</a>
 <LI><a href="#[bcc43c]">DMAChannel2_IRQHandler</a>
 <LI><a href="#[bcc400]">DMAChannel3_IRQHandler</a>
 <LI><a href="#[bcc3c4]">DMAChannel4_IRQHandler</a>
 <LI><a href="#[bcc388]">DMAChannel5_IRQHandler</a>
 <LI><a href="#[bcc34c]">DMAChannel6_IRQHandler</a>
 <LI><a href="#[bcc310]">DMAChannel7_IRQHandler</a>
 <LI><a href="#[bcc52c]">ADC_IRQHandler</a>
 <LI><a href="#[bcbbcc]">USB_HP_CAN_TX_IRQHandler</a>
 <LI><a href="#[bcbb90]">USB_LP_CAN_RX0_IRQHandler</a>
 <LI><a href="#[bcc4f0]">CAN_RX1_IRQHandler</a>
 <LI><a href="#[bcc4b4]">CAN_SCE_IRQHandler</a>
 <LI><a href="#[bcc16c]">EXTI9_5_IRQHandler</a>
 <LI><a href="#[bcbe60]">TIM1_BRK_IRQHandler</a>
 <LI><a href="#[bcbdac]">TIM1_UP_IRQHandler</a>
 <LI><a href="#[bcbde8]">TIM1_TRG_COM_IRQHandler</a>
 <LI><a href="#[bcbe24]">TIM1_CC_IRQHandler</a>
 <LI><a href="#[bcbd70]">TIM2_IRQHandler</a>
 <LI><a href="#[bc8a1c]">TIM3_IRQHandler</a>
 <LI><a href="#[bcbcf8]">TIM4_IRQHandler</a>
 <LI><a href="#[bcc0b8]">I2C1_EV_IRQHandler</a>
 <LI><a href="#[bcc0f4]">I2C1_ER_IRQHandler</a>
 <LI><a href="#[bcc040]">I2C2_EV_IRQHandler</a>
 <LI><a href="#[bcc07c]">I2C2_ER_IRQHandler</a>
 <LI><a href="#[bcbf14]">SPI1_IRQHandler</a>
 <LI><a href="#[bcbed8]">SPI2_IRQHandler</a>
 <LI><a href="#[bc9160]">USART1_IRQHandler</a>
 <LI><a href="#[bc90e8]">USART2_IRQHandler</a>
 <LI><a href="#[bcbc44]">USART3_IRQHandler</a>
 <LI><a href="#[bc8d28]">EXTI15_10_IRQHandler</a>
 <LI><a href="#[bcbf8c]">RTCAlarm_IRQHandler</a>
 <LI><a href="#[bcbc08]">USBWakeUp_IRQHandler</a>
 <LI><a href="#[bc4f84]">__main</a>
 <LI><a href="#[bc91d8]">fputc</a>
 <LI><a href="#[bc397c]">_sputc</a>
 <LI><a href="#[bc3aa8]">_printf_input_char</a>
 <LI><a href="#[bc1a50]">_get_lc_ctype</a>
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[bc4f84]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[bc4084]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[c7e488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[c7e488]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[bc4f84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[c7e44c]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bc4084]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[c7e26c]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7e26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[c7e26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[bc5b3c]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Calls]<UL><LI><a href="#[bc7360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[bc5a88]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[bc5fb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[bc5c2c]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Calls]<UL><LI><a href="#[bc6f28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[bc5d1c]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Calls]<UL><LI><a href="#[bc3850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[bc15a0]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[bc27e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[bc022c]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libinit2.o(.ARM.Collect$$libinit$$0000000B))
<BR><BR>[Calls]<UL><LI><a href="#[bc1ca8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[bc0178]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))
<BR><BR>[Calls]<UL><LI><a href="#[bc1a50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[bbed14]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[bbf32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[bc4084]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[bc4f84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[c7e44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[bc2518]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[bc1f00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[bc27e8]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[bc15a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[bc2734]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Calls]<UL><LI><a href="#[bc18e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
<LI><a href="#[bcba64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bc0f88]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[bc18e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[bbf32c]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[bbed14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[bbf2f0]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[bc9214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[bc95d4]"></a>WFI_SET</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sys.o(.emb_text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[bc946c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Standby
</UL>

<P><STRONG><a name="[bcc784]"></a>Reset_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[bcc748]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[bcc748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[bcc748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[bcc70c]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[bcc70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[bcc70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[bcc6d0]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[bcc6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[bcc6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[bcc694]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[bcc694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[bcc694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[bcc658]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[bcc658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[bcc658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[bcc61c]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[bcc61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[bcc61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[bcc5e0]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[bcc5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[bcc5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[bcc5a4]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[bcc5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[bcc5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[bcc568]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[bcc568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[bcc568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[bcc52c]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[bcc52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[bcc52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[bcc4f0]"></a>CAN_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[bcc4b4]"></a>CAN_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[bcc478]"></a>DMAChannel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[bcc43c]"></a>DMAChannel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[bcc400]"></a>DMAChannel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[bcc3c4]"></a>DMAChannel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[bcc388]"></a>DMAChannel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[bcc34c]"></a>DMAChannel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[bcc310]"></a>DMAChannel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[bcc25c]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[bcc220]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[bcc1e4]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[bcc1a8]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[bcc16c]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[bcc130]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[bcc0f4]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[bcc0b8]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[bcc07c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[bcc040]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[bcc004]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[bcbfc8]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[bcbf8c]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[bcbf50]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[bcbf14]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[bcbed8]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[bcbe9c]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[bcbe60]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[bcbe24]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[bcbde8]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[bcbdac]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[bcbd70]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[bcbcf8]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[bcbc44]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[bcbc08]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[bcbbcc]"></a>USB_HP_CAN_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[bcbb90]"></a>USB_LP_CAN_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[bcc874]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bc1f00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[bcba64]"></a>main</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, test.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[bcb80c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init2
<LI><a href="#[bcb848]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[bcb884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_task
<LI><a href="#[bcb8c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_init
<LI><a href="#[bcb8fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
<LI><a href="#[bcb938]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timerx_Init
<LI><a href="#[bcb974]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stm32_Clock_Init
<LI><a href="#[bcb9b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[bcb9ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[bcba28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[bc2734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[bcab28]"></a>LCD_ShowLineEx</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, mytest.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[bc5470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[bc568c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[bc76e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[bc9fac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
</UL>
<BR>[Called By]<UL><LI><a href="#[bca36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_task_sync
<LI><a href="#[bca3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_task_update_io
<LI><a href="#[bca3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_task_1s
<LI><a href="#[bca420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfid_test
<LI><a href="#[bca4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_task_uart
<LI><a href="#[bca588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_RFID
<LI><a href="#[bca600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_FR
<LI><a href="#[bca63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_DO
<LI><a href="#[bca678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_DI
<LI><a href="#[bca6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_RFID_WRITE
<LI><a href="#[bca6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_RFID_READ
<LI><a href="#[bca768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_P
<LI><a href="#[bca7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_EW
<LI><a href="#[bca7e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ER
<LI><a href="#[bca894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_TEST
<LI><a href="#[bcb8c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_init
</UL>

<P><STRONG><a name="[bcaaec]"></a>LCD_DrawLineEx</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, mytest.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[bc9fe8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawLine
</UL>
<BR>[Called By]<UL><LI><a href="#[bcb8c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_init
</UL>

<P><STRONG><a name="[bcaab0]"></a>LCD_ShowLine</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, mytest.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[bc9fac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
</UL>
<BR>[Called By]<UL><LI><a href="#[bcb8c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_init
</UL>

<P><STRONG><a name="[bcaa74]"></a>my_putch</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, mytest.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bcaa38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_printQ
</UL>

<P><STRONG><a name="[bcaa38]"></a>my_printQ</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, mytest.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[bcaa74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_putch
</UL>
<BR>[Called By]<UL><LI><a href="#[bca9fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_TMR_ISR
</UL>

<P><STRONG><a name="[bca9fc]"></a>my_TMR_ISR</STRONG> (Thumb, 382 bytes, Stack size 0 bytes, mytest.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[bcaa38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_printQ
</UL>
<BR>[Called By]<UL><LI><a href="#[bc8a1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[bcb8c0]"></a>my_init</STRONG> (Thumb, 358 bytes, Stack size 0 bytes, mytest.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[bc76e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[bc9a84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbuffer_wr
<LI><a href="#[bca024]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[bca18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Init
<LI><a href="#[bca1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Check
<LI><a href="#[bcaab0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowLine
<LI><a href="#[bcaaec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawLineEx
<LI><a href="#[bcab28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowLineEx
</UL>
<BR>[Called By]<UL><LI><a href="#[bcba64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bca9c0]"></a>my_FIFO_WR</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, mytest.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bca4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_task_uart
<LI><a href="#[bca858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u_putch
<LI><a href="#[bca948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_FIFO_WR_HexByte
<LI><a href="#[bca984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_FIFO_WRQ
</UL>

<P><STRONG><a name="[bca984]"></a>my_FIFO_WRQ</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, mytest.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[bc568c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[bca9c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_FIFO_WR
</UL>
<BR>[Called By]<UL><LI><a href="#[bca3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_task_1s
<LI><a href="#[bca54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_In
<LI><a href="#[bca588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_RFID
<LI><a href="#[bca600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_FR
<LI><a href="#[bca63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_DO
<LI><a href="#[bca678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_DI
<LI><a href="#[bca6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_RFID_WRITE
<LI><a href="#[bca6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_RFID_READ
<LI><a href="#[bca768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_P
<LI><a href="#[bca7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_EW
<LI><a href="#[bca7e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ER
<LI><a href="#[bcb884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_task
</UL>

<P><STRONG><a name="[bca948]"></a>my_FIFO_WR_HexByte</STRONG> (Thumb, 334 bytes, Stack size 0 bytes, mytest.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[bca9c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_FIFO_WR
</UL>
<BR>[Called By]<UL><LI><a href="#[bca3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_task_1s
</UL>

<P><STRONG><a name="[bca90c]"></a>u_hex2dec</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, mytest.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bca8d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u_asc2uint
</UL>

<P><STRONG><a name="[bca8d0]"></a>u_asc2uint</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, mytest.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[bca90c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u_hex2dec
</UL>
<BR>[Called By]<UL><LI><a href="#[bca588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_RFID
<LI><a href="#[bca5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_STATUS
<LI><a href="#[bca63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_DO
<LI><a href="#[bca6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_RFID_WRITE
<LI><a href="#[bca768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_P
<LI><a href="#[bca7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_EW
<LI><a href="#[bca7e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ER
<LI><a href="#[bca894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_TEST
</UL>

<P><STRONG><a name="[bca894]"></a>CMD_TEST</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, mytest.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[bc76e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[bca114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_RFID_Write
<LI><a href="#[bca150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_RFID_Read
<LI><a href="#[bca8d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u_asc2uint
<LI><a href="#[bcab28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowLineEx
</UL>
<BR>[Called By]<UL><LI><a href="#[bca54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_In
</UL>

<P><STRONG><a name="[bca858]"></a>u_putch</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mytest.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[bca9c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_FIFO_WR
</UL>
<BR>[Called By]<UL><LI><a href="#[bca81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u_putHexByte
</UL>

<P><STRONG><a name="[bca81c]"></a>u_putHexByte</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, mytest.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[bca858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u_putch
</UL>
<BR>[Called By]<UL><LI><a href="#[bca6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_RFID_WRITE
<LI><a href="#[bca6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_RFID_READ
<LI><a href="#[bca768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_P
<LI><a href="#[bca7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_EW
<LI><a href="#[bca7e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ER
</UL>

<P><STRONG><a name="[bca7e0]"></a>CMD_ER</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, mytest.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[bc76e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[bca0d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
<LI><a href="#[bca81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u_putHexByte
<LI><a href="#[bca8d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u_asc2uint
<LI><a href="#[bca984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_FIFO_WRQ
<LI><a href="#[bcab28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowLineEx
</UL>
<BR>[Called By]<UL><LI><a href="#[bca54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_In
</UL>

<P><STRONG><a name="[bca7a4]"></a>CMD_EW</STRONG> (Thumb, 170 bytes, Stack size 0 bytes, mytest.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[bc568c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[bc76e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[bca09c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
<LI><a href="#[bca0d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
<LI><a href="#[bca81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u_putHexByte
<LI><a href="#[bca8d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u_asc2uint
<LI><a href="#[bca984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_FIFO_WRQ
<LI><a href="#[bcab28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowLineEx
</UL>
<BR>[Called By]<UL><LI><a href="#[bca54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_In
</UL>

<P><STRONG><a name="[bca768]"></a>CMD_P</STRONG> (Thumb, 168 bytes, Stack size 0 bytes, mytest.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[bc568c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[bc76e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[bc9a48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[bca114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_RFID_Write
<LI><a href="#[bca150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_RFID_Read
<LI><a href="#[bca81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u_putHexByte
<LI><a href="#[bca8d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u_asc2uint
<LI><a href="#[bca984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_FIFO_WRQ
<LI><a href="#[bcab28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowLineEx
</UL>
<BR>[Called By]<UL><LI><a href="#[bca54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_In
</UL>

<P><STRONG><a name="[bca72c]"></a>swapByte</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, mytest.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bca204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testRFID
<LI><a href="#[bca6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_RFID_WRITE
<LI><a href="#[bca6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_RFID_READ
</UL>

<P><STRONG><a name="[bca6f0]"></a>CMD_RFID_READ</STRONG> (Thumb, 168 bytes, Stack size 0 bytes, mytest.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[bc568c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[bc76e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[bca150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_RFID_Read
<LI><a href="#[bca72c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapByte
<LI><a href="#[bca81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u_putHexByte
<LI><a href="#[bca984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_FIFO_WRQ
<LI><a href="#[bcab28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowLineEx
</UL>
<BR>[Called By]<UL><LI><a href="#[bca54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_In
</UL>

<P><STRONG><a name="[bca6b4]"></a>CMD_RFID_WRITE</STRONG> (Thumb, 642 bytes, Stack size 0 bytes, mytest.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[bc568c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[bc76e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[bca114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_RFID_Write
<LI><a href="#[bca150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_RFID_Read
<LI><a href="#[bca72c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapByte
<LI><a href="#[bca81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u_putHexByte
<LI><a href="#[bca8d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u_asc2uint
<LI><a href="#[bca984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_FIFO_WRQ
<LI><a href="#[bcab28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowLineEx
</UL>
<BR>[Called By]<UL><LI><a href="#[bca54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_In
</UL>

<P><STRONG><a name="[bca678]"></a>CMD_DI</STRONG> (Thumb, 162 bytes, Stack size 0 bytes, mytest.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[bc586c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok_r
<LI><a href="#[bc5998]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[bc76e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[bca984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_FIFO_WRQ
<LI><a href="#[bcab28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowLineEx
</UL>
<BR>[Called By]<UL><LI><a href="#[bca54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_In
</UL>

<P><STRONG><a name="[bca63c]"></a>CMD_DO</STRONG> (Thumb, 460 bytes, Stack size 0 bytes, mytest.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[bc5218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[bc586c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok_r
<LI><a href="#[bc5998]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[bc76e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[bca8d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u_asc2uint
<LI><a href="#[bca984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_FIFO_WRQ
<LI><a href="#[bcab28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowLineEx
</UL>
<BR>[Called By]<UL><LI><a href="#[bca54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_In
</UL>

<P><STRONG><a name="[bca600]"></a>CMD_FR</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, mytest.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[bc586c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok_r
<LI><a href="#[bc5998]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[bc76e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[bca984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_FIFO_WRQ
<LI><a href="#[bcab28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowLineEx
</UL>
<BR>[Called By]<UL><LI><a href="#[bca54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_In
</UL>

<P><STRONG><a name="[bca5c4]"></a>CMD_STATUS</STRONG> (Thumb, 604 bytes, Stack size 0 bytes, mytest.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[bca8d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u_asc2uint
</UL>
<BR>[Called By]<UL><LI><a href="#[bca54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_In
</UL>

<P><STRONG><a name="[bca588]"></a>CMD_RFID</STRONG> (Thumb, 148 bytes, Stack size 0 bytes, mytest.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[bc568c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[bc76e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[bca8d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u_asc2uint
<LI><a href="#[bca984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_FIFO_WRQ
<LI><a href="#[bcab28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowLineEx
</UL>
<BR>[Called By]<UL><LI><a href="#[bca54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_In
</UL>

<P><STRONG><a name="[bca54c]"></a>CMD_In</STRONG> (Thumb, 286 bytes, Stack size 0 bytes, mytest.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[bc5740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[bc586c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok_r
<LI><a href="#[bc76e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[bca588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_RFID
<LI><a href="#[bca5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_STATUS
<LI><a href="#[bca600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_FR
<LI><a href="#[bca63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_DO
<LI><a href="#[bca678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_DI
<LI><a href="#[bca6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_RFID_WRITE
<LI><a href="#[bca6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_RFID_READ
<LI><a href="#[bca768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_P
<LI><a href="#[bca7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_EW
<LI><a href="#[bca7e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ER
<LI><a href="#[bca894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_TEST
<LI><a href="#[bca984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_FIFO_WRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[bca420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfid_test
<LI><a href="#[bca4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_task_uart
</UL>

<P><STRONG><a name="[bca510]"></a>u_toupper</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, mytest.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bca4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_task_uart
</UL>

<P><STRONG><a name="[bca4d4]"></a>my_task_uart</STRONG> (Thumb, 270 bytes, Stack size 0 bytes, mytest.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[bc5380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[bc55d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[bc76e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[bc9ac0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbuffer_rd
<LI><a href="#[bc9afc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbuffer_is_empty
<LI><a href="#[bca510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u_toupper
<LI><a href="#[bca54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_In
<LI><a href="#[bca9c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_FIFO_WR
<LI><a href="#[bcab28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowLineEx
</UL>
<BR>[Called By]<UL><LI><a href="#[bcb884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_task
</UL>

<P><STRONG><a name="[bca498]"></a>count_8_rd</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, mytest.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bca240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_flow_counter
<LI><a href="#[bca45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_flow_meterEx
</UL>

<P><STRONG><a name="[bca45c]"></a>my_flow_meterEx</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, mytest.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[bca498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_8_rd
</UL>
<BR>[Called By]<UL><LI><a href="#[bcb884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_task
</UL>

<P><STRONG><a name="[bca420]"></a>rfid_test</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, mytest.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[bc76e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[bca54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_In
<LI><a href="#[bcab28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowLineEx
</UL>
<BR>[Called By]<UL><LI><a href="#[bca36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_task_sync
</UL>

<P><STRONG><a name="[bca3e4]"></a>my_task_1s</STRONG> (Thumb, 540 bytes, Stack size 0 bytes, mytest.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[bca948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_FIFO_WR_HexByte
<LI><a href="#[bca984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_FIFO_WRQ
<LI><a href="#[bcab28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowLineEx
</UL>
<BR>[Called By]<UL><LI><a href="#[bca36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_task_sync
</UL>

<P><STRONG><a name="[bca3a8]"></a>my_task_update_io</STRONG> (Thumb, 152 bytes, Stack size 0 bytes, mytest.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[bc76e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[bcab28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowLineEx
</UL>
<BR>[Called By]<UL><LI><a href="#[bca36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_task_sync
</UL>

<P><STRONG><a name="[bca36c]"></a>my_task_sync</STRONG> (Thumb, 266 bytes, Stack size 0 bytes, mytest.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[bca060]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Scan
<LI><a href="#[bca3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_task_update_io
<LI><a href="#[bca3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_task_1s
<LI><a href="#[bca420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfid_test
<LI><a href="#[bcab28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowLineEx
</UL>
<BR>[Called By]<UL><LI><a href="#[bcb884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_task
</UL>

<P><STRONG><a name="[bcb884]"></a>my_task</STRONG> (Thumb, 244 bytes, Stack size 0 bytes, mytest.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[bc76e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[bca36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_task_sync
<LI><a href="#[bca45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_flow_meterEx
<LI><a href="#[bca4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_task_uart
<LI><a href="#[bca984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_FIFO_WRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[bcba64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bca330]"></a>count_16_rd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, mytest.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[bca27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_flow_meter
<LI><a href="#[bca2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_flow_meterA
</UL>

<P><STRONG><a name="[bca2b8]"></a>my_flow_meterA</STRONG> (Thumb, 140 bytes, Stack size 0 bytes, mytest.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bca330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_16_rd
</UL>

<P><STRONG><a name="[bca27c]"></a>my_flow_meter</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, mytest.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bca330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_16_rd
</UL>

<P><STRONG><a name="[bca240]"></a>my_flow_counter</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, mytest.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bca498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_8_rd
</UL>

<P><STRONG><a name="[bca204]"></a>testRFID</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, mytest.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bca72c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapByte
</UL>

<P><STRONG><a name="[bc98e0]"></a>cbuffer_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cbuffer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bcb80c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init2
<LI><a href="#[bcb848]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[bc9afc]"></a>cbuffer_is_empty</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, cbuffer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bca4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_task_uart
</UL>

<P><STRONG><a name="[bc98a4]"></a>cbuffer_next_pt</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, cbuffer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bc9868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbuffer_is_full
<LI><a href="#[bc9a84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbuffer_wr
<LI><a href="#[bc9ac0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbuffer_rd
</UL>

<P><STRONG><a name="[bc9868]"></a>cbuffer_is_full</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, cbuffer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bc98a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbuffer_next_pt
</UL>

<P><STRONG><a name="[bc9ac0]"></a>cbuffer_rd</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, cbuffer.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[bc98a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbuffer_next_pt
</UL>
<BR>[Called By]<UL><LI><a href="#[bca4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_task_uart
</UL>

<P><STRONG><a name="[bc9a84]"></a>cbuffer_wr</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, cbuffer.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[bc98a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbuffer_next_pt
</UL>
<BR>[Called By]<UL><LI><a href="#[bc90e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[bc9160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[bcb8c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_init
</UL>

<P><STRONG><a name="[bcb8fc]"></a>delay_init</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, delay.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bcba64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bc9a48]"></a>delay_ms</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, delay.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bc7d74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_CmdEx
<LI><a href="#[bc7f54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_StopEx
<LI><a href="#[bc7fcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_StartEx
<LI><a href="#[bc8d28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[bc8d64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
<LI><a href="#[bca060]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Scan
<LI><a href="#[bca09c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
<LI><a href="#[bca768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_P
<LI><a href="#[bcb9ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[bc9700]"></a>delay_us</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, delay.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bc7d74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_CmdEx
<LI><a href="#[bc7db0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Cmd
<LI><a href="#[bc7dec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_ByteEx
<LI><a href="#[bc7e28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_NAck
<LI><a href="#[bc7e64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Ack
<LI><a href="#[bc7f18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[bc7f54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_StopEx
<LI><a href="#[bc7f90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[bc7fcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_StartEx
<LI><a href="#[bc8008]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[bc8044]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_ByteEx
<LI><a href="#[bc8080]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
<LI><a href="#[bc80bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
<LI><a href="#[bc80f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_RFID_WRITE
<LI><a href="#[bc8134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_RFID_READ
<LI><a href="#[bc81ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_RFID_WriteEx
<LI><a href="#[bc8620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadPoint
<LI><a href="#[bc8710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadReg
</UL>

<P><STRONG><a name="[bc9598]"></a>MY_NVIC_SetVectorTable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sys.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bc94a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MYRCC_DeInit
</UL>

<P><STRONG><a name="[bc955c]"></a>MY_NVIC_PriorityGroupConfig</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, sys.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bc9520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MY_NVIC_Init
</UL>

<P><STRONG><a name="[bc9520]"></a>MY_NVIC_Init</STRONG> (Thumb, 148 bytes, Stack size 0 bytes, sys.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[bc955c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MY_NVIC_PriorityGroupConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[bc8b48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WWDG_Init
<LI><a href="#[bc8cec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTIX_Init
<LI><a href="#[bcb80c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init2
<LI><a href="#[bcb848]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[bcb938]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timerx_Init
</UL>

<P><STRONG><a name="[bc94e4]"></a>Ex_NVIC_Config</STRONG> (Thumb, 148 bytes, Stack size 0 bytes, sys.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[bc8cec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTIX_Init
</UL>

<P><STRONG><a name="[bc94a8]"></a>MYRCC_DeInit</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, sys.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[bc9598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MY_NVIC_SetVectorTable
</UL>
<BR>[Called By]<UL><LI><a href="#[bcb974]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stm32_Clock_Init
</UL>

<P><STRONG><a name="[bc946c]"></a>Sys_Standby</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, sys.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bc95d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WFI_SET
</UL>

<P><STRONG><a name="[bc93f4]"></a>JTAG_Set</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, sys.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bc8cec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTIX_Init
<LI><a href="#[bca060]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Scan
<LI><a href="#[bcb9ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[bcb974]"></a>Stm32_Clock_Init</STRONG> (Thumb, 130 bytes, Stack size 0 bytes, sys.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[bc94a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MYRCC_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[bcba64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bc9214]"></a>_sys_exit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bbf2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[bc91d8]"></a>fputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usart.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> noretval__2printf.o(.text)
</UL>
<P><STRONG><a name="[bc9160]"></a>USART1_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, usart.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[bc9a84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbuffer_wr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[bcb848]"></a>uart_init</STRONG> (Thumb, 210 bytes, Stack size 0 bytes, usart.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[bc42a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[bc4390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[bc4660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[bc4840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[bc4b88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[bc9520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MY_NVIC_Init
<LI><a href="#[bc98e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbuffer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[bcba64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bc90e8]"></a>USART2_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, usart.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[bc9a84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbuffer_wr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[bcb80c]"></a>uart_init2</STRONG> (Thumb, 216 bytes, Stack size 0 bytes, usart.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[bc42a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[bc4390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[bc4660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[bc4840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[bc4b88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[bc9520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MY_NVIC_Init
<LI><a href="#[bc98e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbuffer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[bcba64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bcb9b0]"></a>LED_Init</STRONG> (Thumb, 110 bytes, Stack size 0 bytes, led.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bcba64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bcba28]"></a>KEY_Init</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, key.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bcba64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bca060]"></a>KEY_Scan</STRONG> (Thumb, 146 bytes, Stack size 0 bytes, key.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[bc93f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JTAG_Set
<LI><a href="#[bc9a48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[bca36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_task_sync
</UL>

<P><STRONG><a name="[bc8d64]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, exti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[bc9a48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[bc8d28]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, exti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[bc9a48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[bc8cec]"></a>EXTIX_Init</STRONG> (Thumb, 164 bytes, Stack size 0 bytes, exti.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bc93f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JTAG_Set
<LI><a href="#[bc94e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ex_NVIC_Config
<LI><a href="#[bc9520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MY_NVIC_Init
</UL>

<P><STRONG><a name="[bc8b48]"></a>WWDG_Init</STRONG> (Thumb, 124 bytes, Stack size 0 bytes, wdg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bc9520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MY_NVIC_Init
</UL>

<P><STRONG><a name="[bc8b0c]"></a>WWDG_Set_Counter</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, wdg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bc8ad0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WWDG_IRQHandler
</UL>

<P><STRONG><a name="[bc8ad0]"></a>WWDG_IRQHandler</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, wdg.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[bc8b0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WWDG_Set_Counter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[bc8a1c]"></a>TIM3_IRQHandler</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, timer.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[bca9fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_TMR_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[bcb938]"></a>Timerx_Init</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, timer.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[bc9520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MY_NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[bcba64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bc8788]"></a>LCD_WR_REG</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ili93xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bc856c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPoint
<LI><a href="#[bc8620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadPoint
<LI><a href="#[bc86d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRAM_Prepare
<LI><a href="#[bc8710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadReg
<LI><a href="#[bc874c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteReg
</UL>

<P><STRONG><a name="[bc874c]"></a>LCD_WriteReg</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ili93xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[bc8788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
</UL>
<BR>[Called By]<UL><LI><a href="#[bc838c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
<LI><a href="#[bc85a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayOff
<LI><a href="#[bc85e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayOn
<LI><a href="#[bcb9ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[bc8710]"></a>LCD_ReadReg</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, ili93xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[bc8788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
<LI><a href="#[bc9700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[bcb9ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[bc86d4]"></a>LCD_WriteRAM_Prepare</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ili93xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[bc8788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
</UL>
<BR>[Called By]<UL><LI><a href="#[bc8530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[bca024]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
</UL>

<P><STRONG><a name="[bc865c]"></a>LCD_BGR2RGB</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ili93xx.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[bc8620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadPoint
</UL>

<P><STRONG><a name="[bc8620]"></a>LCD_ReadPoint</STRONG> (Thumb, 170 bytes, Stack size 0 bytes, ili93xx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bc838c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
<LI><a href="#[bc865c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_BGR2RGB
<LI><a href="#[bc8788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
<LI><a href="#[bc9700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>

<P><STRONG><a name="[bc85e4]"></a>LCD_DisplayOn</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ili93xx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bc874c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteReg
</UL>

<P><STRONG><a name="[bc85a8]"></a>LCD_DisplayOff</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ili93xx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bc874c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteReg
</UL>

<P><STRONG><a name="[bc856c]"></a>LCD_DrawPoint</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, ili93xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[bc838c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
<LI><a href="#[bc8788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
</UL>
<BR>[Called By]<UL><LI><a href="#[bc847c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
<LI><a href="#[bc84b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Circle
<LI><a href="#[bc9fe8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawLine
</UL>

<P><STRONG><a name="[bca024]"></a>LCD_Clear</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, ili93xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[bc838c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
<LI><a href="#[bc86d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRAM_Prepare
</UL>
<BR>[Called By]<UL><LI><a href="#[bc9fac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
<LI><a href="#[bcb8c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_init
<LI><a href="#[bcb9ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[bcb9ec]"></a>LCD_Init</STRONG> (Thumb, 3352 bytes, Stack size 0 bytes, ili93xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[bc7798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[bc8710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadReg
<LI><a href="#[bc874c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteReg
<LI><a href="#[bc93f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JTAG_Set
<LI><a href="#[bc9a48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[bca024]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[bcba64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bc8530]"></a>LCD_Fill</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, ili93xx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bc838c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
<LI><a href="#[bc86d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRAM_Prepare
</UL>

<P><STRONG><a name="[bc9fe8]"></a>LCD_DrawLine</STRONG> (Thumb, 200 bytes, Stack size 0 bytes, ili93xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[bc856c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[bc84f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawRectangle
<LI><a href="#[bcaaec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawLineEx
</UL>

<P><STRONG><a name="[bc84f4]"></a>LCD_DrawRectangle</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, ili93xx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bc9fe8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawLine
</UL>

<P><STRONG><a name="[bc84b8]"></a>Draw_Circle</STRONG> (Thumb, 200 bytes, Stack size 0 bytes, ili93xx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bc856c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPoint
</UL>

<P><STRONG><a name="[bc847c]"></a>LCD_ShowChar</STRONG> (Thumb, 268 bytes, Stack size 0 bytes, ili93xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[bc856c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[bc83c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Show2Num
<LI><a href="#[bc8404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowNum
<LI><a href="#[bc9fac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
</UL>

<P><STRONG><a name="[bc8440]"></a>mypow</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ili93xx.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[bc83c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Show2Num
<LI><a href="#[bc8404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowNum
</UL>

<P><STRONG><a name="[bc8404]"></a>LCD_ShowNum</STRONG> (Thumb, 188 bytes, Stack size 0 bytes, ili93xx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bc8440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mypow
<LI><a href="#[bc847c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
</UL>

<P><STRONG><a name="[bc83c8]"></a>LCD_Show2Num</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, ili93xx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bc8440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mypow
<LI><a href="#[bc847c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
</UL>

<P><STRONG><a name="[bc9fac]"></a>LCD_ShowString</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, ili93xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[bc847c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
<LI><a href="#[bca024]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[bcaab0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowLine
<LI><a href="#[bcab28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowLineEx
</UL>

<P><STRONG><a name="[bca18c]"></a>AT24CXX_Init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, 24cxx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[bc8170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[bcb8c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_init
</UL>

<P><STRONG><a name="[bca0d8]"></a>AT24CXX_ReadOneByte</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, 24cxx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[bc7f18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[bc7f90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[bc8008]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[bc8080]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
<LI><a href="#[bc80bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[bc8224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Read
<LI><a href="#[bc8260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadLenByte
<LI><a href="#[bca1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Check
<LI><a href="#[bca7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_EW
<LI><a href="#[bca7e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ER
</UL>

<P><STRONG><a name="[bca09c]"></a>AT24CXX_WriteOneByte</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, 24cxx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[bc7f18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[bc7f90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[bc8008]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[bc8080]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
<LI><a href="#[bc9a48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[bc81e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Write
<LI><a href="#[bc829c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteLenByte
<LI><a href="#[bca1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Check
<LI><a href="#[bca7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_EW
</UL>

<P><STRONG><a name="[bc829c]"></a>AT24CXX_WriteLenByte</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, 24cxx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bca09c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
</UL>

<P><STRONG><a name="[bc8260]"></a>AT24CXX_ReadLenByte</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, 24cxx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bca0d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
</UL>

<P><STRONG><a name="[bca1c8]"></a>AT24CXX_Check</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, 24cxx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[bca09c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
<LI><a href="#[bca0d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
</UL>
<BR>[Called By]<UL><LI><a href="#[bcb8c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_init
</UL>

<P><STRONG><a name="[bc8224]"></a>AT24CXX_Read</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, 24cxx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bca0d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
</UL>

<P><STRONG><a name="[bc81e8]"></a>AT24CXX_Write</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, 24cxx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bca09c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
</UL>

<P><STRONG><a name="[bca150]"></a>AT24CXX_RFID_Read</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, 24cxx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[bc8134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_RFID_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[bca6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_RFID_WRITE
<LI><a href="#[bca6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_RFID_READ
<LI><a href="#[bca768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_P
<LI><a href="#[bca894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_TEST
</UL>

<P><STRONG><a name="[bca114]"></a>AT24CXX_RFID_Write</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, 24cxx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[bc80f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_RFID_WRITE
</UL>
<BR>[Called By]<UL><LI><a href="#[bca6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_RFID_WRITE
<LI><a href="#[bca768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_P
<LI><a href="#[bca894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_TEST
</UL>

<P><STRONG><a name="[bc81ac]"></a>AT24CXX_RFID_WriteEx</STRONG> (Thumb, 124 bytes, Stack size 0 bytes, 24cxx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bc7f54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_StopEx
<LI><a href="#[bc7fcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_StartEx
<LI><a href="#[bc8044]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_ByteEx
<LI><a href="#[bc9700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>

<P><STRONG><a name="[bc8170]"></a>IIC_Init</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, myiic.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bca18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Init
</UL>

<P><STRONG><a name="[bc8008]"></a>IIC_Start</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, myiic.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[bc9700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[bca09c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
<LI><a href="#[bca0d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
</UL>

<P><STRONG><a name="[bc7f90]"></a>IIC_Stop</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, myiic.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[bc9700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[bc7f18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[bca09c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
<LI><a href="#[bca0d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
</UL>

<P><STRONG><a name="[bc7f18]"></a>IIC_Wait_Ack</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, myiic.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[bc7f90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[bc9700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[bca09c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
<LI><a href="#[bca0d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
</UL>

<P><STRONG><a name="[bc7e64]"></a>IIC_Ack</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, myiic.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[bc9700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[bc80bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
</UL>

<P><STRONG><a name="[bc7e28]"></a>IIC_NAck</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, myiic.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[bc9700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[bc80bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
</UL>

<P><STRONG><a name="[bc8080]"></a>IIC_Send_Byte</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, myiic.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[bc9700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[bca09c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
<LI><a href="#[bca0d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
</UL>

<P><STRONG><a name="[bc80bc]"></a>IIC_Read_Byte</STRONG> (Thumb, 112 bytes, Stack size 0 bytes, myiic.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[bc7e28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_NAck
<LI><a href="#[bc7e64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Ack
<LI><a href="#[bc9700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[bca0d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
</UL>

<P><STRONG><a name="[bc7dec]"></a>IIC_Read_ByteEx</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, myiic.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[bc9700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[bc8134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_RFID_READ
</UL>

<P><STRONG><a name="[bc8044]"></a>IIC_Send_ByteEx</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, myiic.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[bc9700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[bc80f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_RFID_WRITE
<LI><a href="#[bc81ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_RFID_WriteEx
</UL>

<P><STRONG><a name="[bc7db0]"></a>IIC_Send_Cmd</STRONG> (Thumb, 172 bytes, Stack size 0 bytes, myiic.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[bc9700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[bc80f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_RFID_WRITE
</UL>

<P><STRONG><a name="[bc7d74]"></a>IIC_Send_CmdEx</STRONG> (Thumb, 200 bytes, Stack size 0 bytes, myiic.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[bc9700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[bc9a48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[bc8134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_RFID_READ
</UL>

<P><STRONG><a name="[bc7fcc]"></a>IIC_StartEx</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, myiic.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[bc9700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[bc9a48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[bc80f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_RFID_WRITE
<LI><a href="#[bc8134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_RFID_READ
<LI><a href="#[bc81ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_RFID_WriteEx
</UL>

<P><STRONG><a name="[bc7f54]"></a>IIC_StopEx</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, myiic.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[bc9700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[bc9a48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[bc80f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_RFID_WRITE
<LI><a href="#[bc8134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_RFID_READ
<LI><a href="#[bc81ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_RFID_WriteEx
</UL>

<P><STRONG><a name="[bc80f8]"></a>IIC_RFID_WRITE</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, myiic.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[bc7db0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Cmd
<LI><a href="#[bc7f54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_StopEx
<LI><a href="#[bc7fcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_StartEx
<LI><a href="#[bc8044]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_ByteEx
<LI><a href="#[bc9700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[bca114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_RFID_Write
</UL>

<P><STRONG><a name="[bc8134]"></a>IIC_RFID_READ</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, myiic.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[bc7d74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_CmdEx
<LI><a href="#[bc7dec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_ByteEx
<LI><a href="#[bc7f54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_StopEx
<LI><a href="#[bc7fcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_StartEx
<LI><a href="#[bc9700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[bca150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_RFID_Read
</UL>

<P><STRONG><a name="[bc7798]"></a>__2printf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, noretval__2printf.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[bc3a6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[bcb9ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[bc76e4]"></a>__2sprintf</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, noretval__2sprintf.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[bc397c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[bc3a6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[bca3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_task_update_io
<LI><a href="#[bca420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfid_test
<LI><a href="#[bca4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_task_uart
<LI><a href="#[bca54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_In
<LI><a href="#[bca588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_RFID
<LI><a href="#[bca600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_FR
<LI><a href="#[bca63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_DO
<LI><a href="#[bca678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_DI
<LI><a href="#[bca6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_RFID_WRITE
<LI><a href="#[bca6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_RFID_READ
<LI><a href="#[bca768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_P
<LI><a href="#[bca7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_EW
<LI><a href="#[bca7e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_ER
<LI><a href="#[bca894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_TEST
<LI><a href="#[bcab28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowLineEx
<LI><a href="#[bcb884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_task
<LI><a href="#[bcb8c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_init
</UL>

<P><STRONG><a name="[bc757c]"></a>_printf_pre_padding</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, _printf_pad.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bc3b5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[bc748c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[bc7540]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _printf_pad.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bc3b5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[bc748c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[bc748c]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, _printf_str.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[bc7540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[bc757c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[bc38c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[bc7360]"></a>_printf_int_dec</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, _printf_dec.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[bc310c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_udiv10
<LI><a href="#[bc3b5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[bc5b3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[bc6f28]"></a>_printf_int_hex</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, _printf_hex_int.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[bc3b5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[bc5c2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[bc5fb0]"></a>__printf</STRONG> (Thumb, 324 bytes, Stack size 0 bytes, __printf_flags_wp.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[bc5a88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
</UL>
<BR>[Called By]<UL><LI><a href="#[bc3a6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[bc5998]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, atoi.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[bc36ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[bc3cc4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[bca600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_FR
<LI><a href="#[bca63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_DO
<LI><a href="#[bca678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_DI
</UL>

<P><STRONG><a name="[bc5830]"></a>_strtok_r</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, strtok_r.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bc33a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtok_internal
</UL>

<P><STRONG><a name="[bc586c]"></a>strtok_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, strtok_r.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bca54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_In
<LI><a href="#[bca600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_FR
<LI><a href="#[bca63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_DO
<LI><a href="#[bca678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_DI
</UL>

<P><STRONG><a name="[bc5740]"></a>strncmp</STRONG> (Thumb, 140 bytes, Stack size 0 bytes, strncmp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bca54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_In
</UL>

<P><STRONG><a name="[bc568c]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bca588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_RFID
<LI><a href="#[bca6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_RFID_WRITE
<LI><a href="#[bca6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_RFID_READ
<LI><a href="#[bca768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_P
<LI><a href="#[bca7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_EW
<LI><a href="#[bca984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_FIFO_WRQ
<LI><a href="#[bcab28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowLineEx
</UL>

<P><STRONG><a name="[bc55d8]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bca4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_task_uart
</UL>

<P><STRONG><a name="[bc559c]"></a>__rt_memcpy</STRONG> (Thumb, 140 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bc3274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[bc5470]"></a>__aeabi_memset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_memset.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[bc5308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[bcab28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowLineEx
</UL>

<P><STRONG><a name="[bc5380]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bca4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_task_uart
</UL>

<P><STRONG><a name="[bc5344]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bc5164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[bc5308]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bc5470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[bc5218]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr_w.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bca63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_DO
</UL>

<P><STRONG><a name="[bc5164]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[bc5344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[bc3cc4]"></a>__aeabi_errno_addr</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bc2248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[bc36ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[bc5998]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[bc3b5c]"></a>_printf_int_common</STRONG> (Thumb, 174 bytes, Stack size 0 bytes, _printf_intcommon.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[bc7540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[bc757c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[bc6f28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[bc7360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[bc3a6c]"></a>_printf_char_common</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[bc5fb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[bc76e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[bc7798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[bc397c]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bc76e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noretval__2sprintf.o(.text)
</UL>
<P><STRONG><a name="[bc38c8]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[bc748c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[bc3850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[bc388c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[bc388c]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bc38c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[bc3850]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[bc38c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[bc5d1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[bc36ac]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 0 bytes, strtol.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[bc2248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[bc2428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[bc3cc4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[bc5998]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[bc33a0]"></a>__strtok_internal</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, strtok_int.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bc20a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strspn
<LI><a href="#[bc2158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcspn
</UL>
<BR>[Called By]<UL><LI><a href="#[bc5830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtok_r
</UL>

<P><STRONG><a name="[bc3274]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[bc559c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[bc310c]"></a>__rt_udiv10</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rtudiv10.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bc7360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[bc2b6c]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bc1f00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[bc2428]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rt_ctype_table.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[bc1ca8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[bc36ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[bc2248]"></a>_strtoul</STRONG> (Thumb, 152 bytes, Stack size 0 bytes, _strtoul.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[bc1bf4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[bc3cc4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[bc36ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[bc2158]"></a>strcspn</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, strcspn.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[bc33a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtok_internal
</UL>

<P><STRONG><a name="[bc20a4]"></a>strspn</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, strspn.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[bc33a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtok_internal
</UL>

<P><STRONG><a name="[bc1f00]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[bc2b6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
<LI><a href="#[bcc874]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
</UL>
<BR>[Called By]<UL><LI><a href="#[bc2518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[bc1ca8]"></a>__rt_locale</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bc022c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
<LI><a href="#[bc2428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>

<P><STRONG><a name="[bc1bf4]"></a>_chval</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bc2248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[bc18e8]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[bc0f88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[bc2734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[bc0e20]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, strcmpv7m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bc1a50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[bc838c]"></a>LCD_SetCursor</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, ili93xx.o(i.LCD_SetCursor))
<BR><BR>[Calls]<UL><LI><a href="#[bc874c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[bc8530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[bc856c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPoint
<LI><a href="#[bc8620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadPoint
<LI><a href="#[bca024]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
</UL>

<P><STRONG><a name="[bc1a50]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Calls]<UL><LI><a href="#[bc0e20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[bc0178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[bc4c00]"></a>_fadd</STRONG> (Thumb, 248 bytes, Stack size 0 bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bc3058]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcheck_NaN2
<LI><a href="#[bc4c78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
</UL>

<P><STRONG><a name="[bc3058]"></a>__fpl_fcheck_NaN2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fcheck.o(x$fpl$fcheck), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bc1ff0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[bc4264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[bc4804]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[bc4ad4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
<LI><a href="#[bc4c00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>

<P><STRONG><a name="[bc2f68]"></a>__fpl_fcheck_NaN1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fcheck1.o(x$fpl$fcheck1), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bc1ff0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[bc4624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffixu
</UL>

<P><STRONG><a name="[bc4840]"></a>__aeabi_fdiv</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fdiv.o(x$fpl$fdiv))
<BR><BR>[Called By]<UL><LI><a href="#[bcb80c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init2
<LI><a href="#[bcb848]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[bc4804]"></a>_fdiv</STRONG> (Thumb, 476 bytes, Stack size 0 bytes, fdiv.o(x$fpl$fdiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bc3058]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcheck_NaN2
</UL>

<P><STRONG><a name="[bc4660]"></a>__aeabi_f2uiz</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ffixu.o(x$fpl$ffixu))
<BR><BR>[Called By]<UL><LI><a href="#[bcb80c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init2
<LI><a href="#[bcb848]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[bc4624]"></a>_ffixu</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, ffixu.o(x$fpl$ffixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bc2f68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcheck_NaN1
</UL>

<P><STRONG><a name="[bc43cc]"></a>__fflt_normalise</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$fflt), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[bc4354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffltu
</UL>

<P><STRONG><a name="[bc4390]"></a>__aeabi_ui2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu))
<BR><BR>[Called By]<UL><LI><a href="#[bcb80c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init2
<LI><a href="#[bcb848]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[bc4354]"></a>_ffltu</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bc43cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fflt_normalise
</UL>

<P><STRONG><a name="[bc42a0]"></a>__aeabi_fmul</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fmul.o(x$fpl$fmul))
<BR><BR>[Called By]<UL><LI><a href="#[bcb80c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init2
<LI><a href="#[bcb848]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[bc4264]"></a>_fmul</STRONG> (Thumb, 258 bytes, Stack size 0 bytes, fmul.o(x$fpl$fmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bc3058]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcheck_NaN2
</UL>

<P><STRONG><a name="[bc4b88]"></a>__aeabi_frsub</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, faddsub_clz.o(x$fpl$frsb))
<BR><BR>[Called By]<UL><LI><a href="#[bcb80c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init2
<LI><a href="#[bcb848]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[bc4b4c]"></a>_frsb</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, faddsub_clz.o(x$fpl$frsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bc4c78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
<LI><a href="#[bc4cb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
</UL>

<P><STRONG><a name="[bc4ad4]"></a>_fsub</STRONG> (Thumb, 282 bytes, Stack size 0 bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bc3058]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcheck_NaN2
<LI><a href="#[bc4cb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
</UL>

<P><STRONG><a name="[bc1ff0]"></a>__fpl_return_NaN</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, retnan.o(x$fpl$retnan), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bc103c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[bc2f68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcheck_NaN1
<LI><a href="#[bc3058]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcheck_NaN2
</UL>

<P><STRONG><a name="[bc103c]"></a>__fpl_cmpreturn</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, trapv.o(x$fpl$trapveneer), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[bc1ff0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[bc4cb4]"></a>_fadd1</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[bc4ad4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
<LI><a href="#[bc4b4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frsb
</UL>

<P><STRONG><a name="[bc4c78]"></a>_fsub1</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[bc4b4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frsb
<LI><a href="#[bc4c00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>

<P><STRONG><a name="[bc3aa8]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
