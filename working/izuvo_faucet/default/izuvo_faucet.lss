
izuvo_faucet.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001818  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000013e  00800060  00001818  000018ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000002a3  0080019e  0080019e  000019ea  2**0
                  ALLOC
  3 .debug_aranges 00000080  00000000  00000000  000019ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000050c  00000000  00000000  00001a6a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d70  00000000  00000000  00001f76  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000003cd  00000000  00000000  00002ce6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001151  00000000  00000000  000030b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000280  00000000  00000000  00004204  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004e1  00000000  00000000  00004484  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
       2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
       4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
       6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
       8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
       a:	75 c3       	rjmp	.+1770   	; 0x6f6 <__vector_5>
       c:	23 c3       	rjmp	.+1606   	; 0x654 <__vector_6>
       e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
      10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
      12:	c6 c2       	rjmp	.+1420   	; 0x5a0 <__vector_9>
      14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
      16:	a7 c1       	rjmp	.+846    	; 0x366 <__vector_11>
      18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
      1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
      1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
      1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
      20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
      22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
      24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
      26:	11 24       	eor	r1, r1
      28:	1f be       	out	0x3f, r1	; 63
      2a:	cf e5       	ldi	r28, 0x5F	; 95
      2c:	d4 e0       	ldi	r29, 0x04	; 4
      2e:	de bf       	out	0x3e, r29	; 62
      30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
      32:	11 e0       	ldi	r17, 0x01	; 1
      34:	a0 e6       	ldi	r26, 0x60	; 96
      36:	b0 e0       	ldi	r27, 0x00	; 0
      38:	e8 e1       	ldi	r30, 0x18	; 24
      3a:	f8 e1       	ldi	r31, 0x18	; 24
      3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
      3e:	05 90       	lpm	r0, Z+
      40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
      42:	ae 39       	cpi	r26, 0x9E	; 158
      44:	b1 07       	cpc	r27, r17
      46:	d9 f7       	brne	.-10     	; 0x3e <.do_copy_data_loop>

00000048 <__do_clear_bss>:
      48:	14 e0       	ldi	r17, 0x04	; 4
      4a:	ae e9       	ldi	r26, 0x9E	; 158
      4c:	b1 e0       	ldi	r27, 0x01	; 1
      4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
      50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
      52:	a1 34       	cpi	r26, 0x41	; 65
      54:	b1 07       	cpc	r27, r17
      56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
      58:	02 d0       	rcall	.+4      	; 0x5e <main>
      5a:	dc cb       	rjmp	.-2120   	; 0xfffff814 <__eeprom_end+0xff7ef814>

0000005c <__bad_interrupt>:
      5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <main>:
#include "utility.h"

extern unsigned char mTimer0_Flag;

int main (void)
{
      5e:	df 93       	push	r29
      60:	cf 93       	push	r28
      62:	cd b7       	in	r28, 0x3d	; 61
      64:	de b7       	in	r29, 0x3e	; 62
	init_hardware();	// init Hardware
      66:	f9 d3       	rcall	.+2034   	; 0x85a <init_hardware>
	init_system();		// init system parameter
      68:	45 d4       	rcall	.+2186   	; 0x8f4 <init_system>
	sei();				// Enable Interrupt
      6a:	78 94       	sei

	while (1)			// Start Task
	{
		process_tmr();	// process timer event			
      6c:	d0 d4       	rcall	.+2464   	; 0xa0e <process_tmr>
		process_cmd();	// process uart command
      6e:	dc d5       	rcall	.+3000   	; 0xc28 <process_cmd>
      70:	fd cf       	rjmp	.-6      	; 0x6c <main+0xe>

00000072 <u_delay>:
//                       
// Assumption       : 
//                    
// Notes			:
//----------------------------------------------------------------------------
void u_delay(unsigned int iDelay){ 
      72:	df 93       	push	r29
      74:	cf 93       	push	r28
      76:	00 d0       	rcall	.+0      	; 0x78 <u_delay+0x6>
      78:	00 d0       	rcall	.+0      	; 0x7a <u_delay+0x8>
      7a:	00 d0       	rcall	.+0      	; 0x7c <u_delay+0xa>
      7c:	cd b7       	in	r28, 0x3d	; 61
      7e:	de b7       	in	r29, 0x3e	; 62
      80:	9c 83       	std	Y+4, r25	; 0x04
      82:	8b 83       	std	Y+3, r24	; 0x03
      84:	13 c0       	rjmp	.+38     	; 0xac <u_delay+0x3a>
	//delay n 100us 
	unsigned int x; 

	while(iDelay--){ 
	x=130; 		// 8MHz Clock
      86:	82 e8       	ldi	r24, 0x82	; 130
      88:	90 e0       	ldi	r25, 0x00	; 0
      8a:	9a 83       	std	Y+2, r25	; 0x02
      8c:	89 83       	std	Y+1, r24	; 0x01
	while(x--); 
      8e:	1e 82       	std	Y+6, r1	; 0x06
      90:	89 81       	ldd	r24, Y+1	; 0x01
      92:	9a 81       	ldd	r25, Y+2	; 0x02
      94:	00 97       	sbiw	r24, 0x00	; 0
      96:	11 f0       	breq	.+4      	; 0x9c <u_delay+0x2a>
      98:	81 e0       	ldi	r24, 0x01	; 1
      9a:	8e 83       	std	Y+6, r24	; 0x06
      9c:	89 81       	ldd	r24, Y+1	; 0x01
      9e:	9a 81       	ldd	r25, Y+2	; 0x02
      a0:	01 97       	sbiw	r24, 0x01	; 1
      a2:	9a 83       	std	Y+2, r25	; 0x02
      a4:	89 83       	std	Y+1, r24	; 0x01
      a6:	8e 81       	ldd	r24, Y+6	; 0x06
      a8:	88 23       	and	r24, r24
      aa:	89 f7       	brne	.-30     	; 0x8e <u_delay+0x1c>
//----------------------------------------------------------------------------
void u_delay(unsigned int iDelay){ 
	//delay n 100us 
	unsigned int x; 

	while(iDelay--){ 
      ac:	1d 82       	std	Y+5, r1	; 0x05
      ae:	8b 81       	ldd	r24, Y+3	; 0x03
      b0:	9c 81       	ldd	r25, Y+4	; 0x04
      b2:	00 97       	sbiw	r24, 0x00	; 0
      b4:	11 f0       	breq	.+4      	; 0xba <u_delay+0x48>
      b6:	81 e0       	ldi	r24, 0x01	; 1
      b8:	8d 83       	std	Y+5, r24	; 0x05
      ba:	8b 81       	ldd	r24, Y+3	; 0x03
      bc:	9c 81       	ldd	r25, Y+4	; 0x04
      be:	01 97       	sbiw	r24, 0x01	; 1
      c0:	9c 83       	std	Y+4, r25	; 0x04
      c2:	8b 83       	std	Y+3, r24	; 0x03
      c4:	8d 81       	ldd	r24, Y+5	; 0x05
      c6:	88 23       	and	r24, r24
      c8:	f1 f6       	brne	.-68     	; 0x86 <u_delay+0x14>
	x=130; 		// 8MHz Clock
	while(x--); 
	} 
} 
      ca:	26 96       	adiw	r28, 0x06	; 6
      cc:	0f b6       	in	r0, 0x3f	; 63
      ce:	f8 94       	cli
      d0:	de bf       	out	0x3e, r29	; 62
      d2:	0f be       	out	0x3f, r0	; 63
      d4:	cd bf       	out	0x3d, r28	; 61
      d6:	cf 91       	pop	r28
      d8:	df 91       	pop	r29
      da:	08 95       	ret

000000dc <u_abs>:
//                    
// Notes			:
//----------------------------------------------------------------------------

INT16U u_abs(INT16S a)
{
      dc:	df 93       	push	r29
      de:	cf 93       	push	r28
      e0:	00 d0       	rcall	.+0      	; 0xe2 <u_abs+0x6>
      e2:	00 d0       	rcall	.+0      	; 0xe4 <u_abs+0x8>
      e4:	cd b7       	in	r28, 0x3d	; 61
      e6:	de b7       	in	r29, 0x3e	; 62
      e8:	9a 83       	std	Y+2, r25	; 0x02
      ea:	89 83       	std	Y+1, r24	; 0x01
	if(a < 0)
      ec:	89 81       	ldd	r24, Y+1	; 0x01
      ee:	9a 81       	ldd	r25, Y+2	; 0x02
      f0:	99 23       	and	r25, r25
      f2:	44 f4       	brge	.+16     	; 0x104 <u_abs+0x28>
		return -a;
      f4:	89 81       	ldd	r24, Y+1	; 0x01
      f6:	9a 81       	ldd	r25, Y+2	; 0x02
      f8:	90 95       	com	r25
      fa:	81 95       	neg	r24
      fc:	9f 4f       	sbci	r25, 0xFF	; 255
      fe:	9c 83       	std	Y+4, r25	; 0x04
     100:	8b 83       	std	Y+3, r24	; 0x03
     102:	04 c0       	rjmp	.+8      	; 0x10c <u_abs+0x30>
	return (INT16U) a;
     104:	89 81       	ldd	r24, Y+1	; 0x01
     106:	9a 81       	ldd	r25, Y+2	; 0x02
     108:	9c 83       	std	Y+4, r25	; 0x04
     10a:	8b 83       	std	Y+3, r24	; 0x03
     10c:	8b 81       	ldd	r24, Y+3	; 0x03
     10e:	9c 81       	ldd	r25, Y+4	; 0x04
}
     110:	0f 90       	pop	r0
     112:	0f 90       	pop	r0
     114:	0f 90       	pop	r0
     116:	0f 90       	pop	r0
     118:	cf 91       	pop	r28
     11a:	df 91       	pop	r29
     11c:	08 95       	ret

0000011e <u_sign>:
//                     
// Notes			    :
//----------------------------------------------------------------------------

INT16S u_sign(INT16S x) 
{
     11e:	df 93       	push	r29
     120:	cf 93       	push	r28
     122:	00 d0       	rcall	.+0      	; 0x124 <u_sign+0x6>
     124:	00 d0       	rcall	.+0      	; 0x126 <u_sign+0x8>
     126:	cd b7       	in	r28, 0x3d	; 61
     128:	de b7       	in	r29, 0x3e	; 62
     12a:	9a 83       	std	Y+2, r25	; 0x02
     12c:	89 83       	std	Y+1, r24	; 0x01
	if (x<0) return (-1);
     12e:	89 81       	ldd	r24, Y+1	; 0x01
     130:	9a 81       	ldd	r25, Y+2	; 0x02
     132:	99 23       	and	r25, r25
     134:	2c f4       	brge	.+10     	; 0x140 <u_sign+0x22>
     136:	8f ef       	ldi	r24, 0xFF	; 255
     138:	9f ef       	ldi	r25, 0xFF	; 255
     13a:	9c 83       	std	Y+4, r25	; 0x04
     13c:	8b 83       	std	Y+3, r24	; 0x03
     13e:	04 c0       	rjmp	.+8      	; 0x148 <u_sign+0x2a>
	return(1);
     140:	81 e0       	ldi	r24, 0x01	; 1
     142:	90 e0       	ldi	r25, 0x00	; 0
     144:	9c 83       	std	Y+4, r25	; 0x04
     146:	8b 83       	std	Y+3, r24	; 0x03
     148:	8b 81       	ldd	r24, Y+3	; 0x03
     14a:	9c 81       	ldd	r25, Y+4	; 0x04
}
     14c:	0f 90       	pop	r0
     14e:	0f 90       	pop	r0
     150:	0f 90       	pop	r0
     152:	0f 90       	pop	r0
     154:	cf 91       	pop	r28
     156:	df 91       	pop	r29
     158:	08 95       	ret

0000015a <u_asc2uint>:
// Date created		: 16 May 2002
// Description		: Convert alphanumeric string to hex. value
// Notes				:
//----------------------------------------------------------------------------
INT16U u_asc2uint(INT8U len, INT8U *sptr)
{
     15a:	0f 93       	push	r16
     15c:	1f 93       	push	r17
     15e:	df 93       	push	r29
     160:	cf 93       	push	r28
     162:	00 d0       	rcall	.+0      	; 0x164 <u_asc2uint+0xa>
     164:	00 d0       	rcall	.+0      	; 0x166 <u_asc2uint+0xc>
     166:	00 d0       	rcall	.+0      	; 0x168 <u_asc2uint+0xe>
     168:	cd b7       	in	r28, 0x3d	; 61
     16a:	de b7       	in	r29, 0x3e	; 62
     16c:	8c 83       	std	Y+4, r24	; 0x04
     16e:	7e 83       	std	Y+6, r23	; 0x06
     170:	6d 83       	std	Y+5, r22	; 0x05
	INT8U i;
	INT16U temp;

	temp = u_hex2dec(*sptr++);
     172:	ed 81       	ldd	r30, Y+5	; 0x05
     174:	fe 81       	ldd	r31, Y+6	; 0x06
     176:	20 81       	ld	r18, Z
     178:	8d 81       	ldd	r24, Y+5	; 0x05
     17a:	9e 81       	ldd	r25, Y+6	; 0x06
     17c:	01 96       	adiw	r24, 0x01	; 1
     17e:	9e 83       	std	Y+6, r25	; 0x06
     180:	8d 83       	std	Y+5, r24	; 0x05
     182:	82 2f       	mov	r24, r18
     184:	34 d0       	rcall	.+104    	; 0x1ee <u_hex2dec>
     186:	88 2f       	mov	r24, r24
     188:	90 e0       	ldi	r25, 0x00	; 0
     18a:	9a 83       	std	Y+2, r25	; 0x02
     18c:	89 83       	std	Y+1, r24	; 0x01
	for(i = 1; i < len; i++)
     18e:	81 e0       	ldi	r24, 0x01	; 1
     190:	8b 83       	std	Y+3, r24	; 0x03
     192:	1c c0       	rjmp	.+56     	; 0x1cc <u_asc2uint+0x72>
		temp = temp * 0x10 + u_hex2dec(*sptr++);
     194:	89 81       	ldd	r24, Y+1	; 0x01
     196:	9a 81       	ldd	r25, Y+2	; 0x02
     198:	8c 01       	movw	r16, r24
     19a:	02 95       	swap	r16
     19c:	12 95       	swap	r17
     19e:	10 7f       	andi	r17, 0xF0	; 240
     1a0:	10 27       	eor	r17, r16
     1a2:	00 7f       	andi	r16, 0xF0	; 240
     1a4:	10 27       	eor	r17, r16
     1a6:	ed 81       	ldd	r30, Y+5	; 0x05
     1a8:	fe 81       	ldd	r31, Y+6	; 0x06
     1aa:	20 81       	ld	r18, Z
     1ac:	8d 81       	ldd	r24, Y+5	; 0x05
     1ae:	9e 81       	ldd	r25, Y+6	; 0x06
     1b0:	01 96       	adiw	r24, 0x01	; 1
     1b2:	9e 83       	std	Y+6, r25	; 0x06
     1b4:	8d 83       	std	Y+5, r24	; 0x05
     1b6:	82 2f       	mov	r24, r18
     1b8:	1a d0       	rcall	.+52     	; 0x1ee <u_hex2dec>
     1ba:	88 2f       	mov	r24, r24
     1bc:	90 e0       	ldi	r25, 0x00	; 0
     1be:	80 0f       	add	r24, r16
     1c0:	91 1f       	adc	r25, r17
     1c2:	9a 83       	std	Y+2, r25	; 0x02
     1c4:	89 83       	std	Y+1, r24	; 0x01
{
	INT8U i;
	INT16U temp;

	temp = u_hex2dec(*sptr++);
	for(i = 1; i < len; i++)
     1c6:	8b 81       	ldd	r24, Y+3	; 0x03
     1c8:	8f 5f       	subi	r24, 0xFF	; 255
     1ca:	8b 83       	std	Y+3, r24	; 0x03
     1cc:	9b 81       	ldd	r25, Y+3	; 0x03
     1ce:	8c 81       	ldd	r24, Y+4	; 0x04
     1d0:	98 17       	cp	r25, r24
     1d2:	00 f3       	brcs	.-64     	; 0x194 <u_asc2uint+0x3a>
		temp = temp * 0x10 + u_hex2dec(*sptr++);
	return (temp);
     1d4:	89 81       	ldd	r24, Y+1	; 0x01
     1d6:	9a 81       	ldd	r25, Y+2	; 0x02
}
     1d8:	26 96       	adiw	r28, 0x06	; 6
     1da:	0f b6       	in	r0, 0x3f	; 63
     1dc:	f8 94       	cli
     1de:	de bf       	out	0x3e, r29	; 62
     1e0:	0f be       	out	0x3f, r0	; 63
     1e2:	cd bf       	out	0x3d, r28	; 61
     1e4:	cf 91       	pop	r28
     1e6:	df 91       	pop	r29
     1e8:	1f 91       	pop	r17
     1ea:	0f 91       	pop	r16
     1ec:	08 95       	ret

000001ee <u_hex2dec>:
//                     
// Notes			 :
//----------------------------------------------------------------------------

INT8U u_hex2dec(INT8U c) 
{
     1ee:	df 93       	push	r29
     1f0:	cf 93       	push	r28
     1f2:	00 d0       	rcall	.+0      	; 0x1f4 <u_hex2dec+0x6>
     1f4:	cd b7       	in	r28, 0x3d	; 61
     1f6:	de b7       	in	r29, 0x3e	; 62
     1f8:	89 83       	std	Y+1, r24	; 0x01
	if ((c>='0') && (c<='9')) 
     1fa:	89 81       	ldd	r24, Y+1	; 0x01
     1fc:	80 33       	cpi	r24, 0x30	; 48
     1fe:	40 f0       	brcs	.+16     	; 0x210 <u_hex2dec+0x22>
     200:	89 81       	ldd	r24, Y+1	; 0x01
     202:	8a 33       	cpi	r24, 0x3A	; 58
     204:	28 f4       	brcc	.+10     	; 0x210 <u_hex2dec+0x22>
    {
		return (c-0x30);
     206:	89 81       	ldd	r24, Y+1	; 0x01
     208:	98 2f       	mov	r25, r24
     20a:	90 53       	subi	r25, 0x30	; 48
     20c:	9a 83       	std	Y+2, r25	; 0x02
     20e:	17 c0       	rjmp	.+46     	; 0x23e <u_hex2dec+0x50>
	}else if ((c>='A') && (c<='F')) 
     210:	89 81       	ldd	r24, Y+1	; 0x01
     212:	81 34       	cpi	r24, 0x41	; 65
     214:	40 f0       	brcs	.+16     	; 0x226 <u_hex2dec+0x38>
     216:	89 81       	ldd	r24, Y+1	; 0x01
     218:	87 34       	cpi	r24, 0x47	; 71
     21a:	28 f4       	brcc	.+10     	; 0x226 <u_hex2dec+0x38>
    {
		return (c-'A'+10);
     21c:	89 81       	ldd	r24, Y+1	; 0x01
     21e:	98 2f       	mov	r25, r24
     220:	97 53       	subi	r25, 0x37	; 55
     222:	9a 83       	std	Y+2, r25	; 0x02
     224:	0c c0       	rjmp	.+24     	; 0x23e <u_hex2dec+0x50>
	}else if ((c>='a') && (c<='f')) 
     226:	89 81       	ldd	r24, Y+1	; 0x01
     228:	81 36       	cpi	r24, 0x61	; 97
     22a:	40 f0       	brcs	.+16     	; 0x23c <u_hex2dec+0x4e>
     22c:	89 81       	ldd	r24, Y+1	; 0x01
     22e:	87 36       	cpi	r24, 0x67	; 103
     230:	28 f4       	brcc	.+10     	; 0x23c <u_hex2dec+0x4e>
    {
		return (c-'a'+10);
     232:	89 81       	ldd	r24, Y+1	; 0x01
     234:	98 2f       	mov	r25, r24
     236:	97 55       	subi	r25, 0x57	; 87
     238:	9a 83       	std	Y+2, r25	; 0x02
     23a:	01 c0       	rjmp	.+2      	; 0x23e <u_hex2dec+0x50>
	}

	return 0;
     23c:	1a 82       	std	Y+2, r1	; 0x02
     23e:	8a 81       	ldd	r24, Y+2	; 0x02
}
     240:	0f 90       	pop	r0
     242:	0f 90       	pop	r0
     244:	cf 91       	pop	r28
     246:	df 91       	pop	r29
     248:	08 95       	ret

0000024a <u_putHexWord>:
//                     
// Notes			:
//----------------------------------------------------------------------------

void u_putHexWord(INT16U w)
{	
     24a:	df 93       	push	r29
     24c:	cf 93       	push	r28
     24e:	00 d0       	rcall	.+0      	; 0x250 <u_putHexWord+0x6>
     250:	cd b7       	in	r28, 0x3d	; 61
     252:	de b7       	in	r29, 0x3e	; 62
     254:	9a 83       	std	Y+2, r25	; 0x02
     256:	89 83       	std	Y+1, r24	; 0x01
    u_putHexByte((INT8U) (w>>8),0);
     258:	89 81       	ldd	r24, Y+1	; 0x01
     25a:	9a 81       	ldd	r25, Y+2	; 0x02
     25c:	89 2f       	mov	r24, r25
     25e:	99 27       	eor	r25, r25
     260:	60 e0       	ldi	r22, 0x00	; 0
     262:	08 d0       	rcall	.+16     	; 0x274 <u_putHexByte>
	u_putHexByte((INT8U) (w & 0xff),0);
     264:	89 81       	ldd	r24, Y+1	; 0x01
     266:	60 e0       	ldi	r22, 0x00	; 0
     268:	05 d0       	rcall	.+10     	; 0x274 <u_putHexByte>
//    u_putch(' ');
}
     26a:	0f 90       	pop	r0
     26c:	0f 90       	pop	r0
     26e:	cf 91       	pop	r28
     270:	df 91       	pop	r29
     272:	08 95       	ret

00000274 <u_putHexByte>:
//                     
// Notes			:
//----------------------------------------------------------------------------

void u_putHexByte(INT8U c, INT8U t) 
{
     274:	df 93       	push	r29
     276:	cf 93       	push	r28
     278:	00 d0       	rcall	.+0      	; 0x27a <u_putHexByte+0x6>
     27a:	cd b7       	in	r28, 0x3d	; 61
     27c:	de b7       	in	r29, 0x3e	; 62
     27e:	89 83       	std	Y+1, r24	; 0x01
     280:	6a 83       	std	Y+2, r22	; 0x02
	static const char STR_HEX[]="0123456789ABCDEF";
	u_putch(STR_HEX[(c&0xF0)>>4]);
     282:	89 81       	ldd	r24, Y+1	; 0x01
     284:	82 95       	swap	r24
     286:	8f 70       	andi	r24, 0x0F	; 15
     288:	88 2f       	mov	r24, r24
     28a:	90 e0       	ldi	r25, 0x00	; 0
     28c:	90 70       	andi	r25, 0x00	; 0
     28e:	fc 01       	movw	r30, r24
     290:	e0 5a       	subi	r30, 0xA0	; 160
     292:	ff 4f       	sbci	r31, 0xFF	; 255
     294:	80 81       	ld	r24, Z
     296:	14 d0       	rcall	.+40     	; 0x2c0 <u_putch>
	u_putch(STR_HEX[c&0x0F]);
     298:	89 81       	ldd	r24, Y+1	; 0x01
     29a:	88 2f       	mov	r24, r24
     29c:	90 e0       	ldi	r25, 0x00	; 0
     29e:	8f 70       	andi	r24, 0x0F	; 15
     2a0:	90 70       	andi	r25, 0x00	; 0
     2a2:	fc 01       	movw	r30, r24
     2a4:	e0 5a       	subi	r30, 0xA0	; 160
     2a6:	ff 4f       	sbci	r31, 0xFF	; 255
     2a8:	80 81       	ld	r24, Z
     2aa:	0a d0       	rcall	.+20     	; 0x2c0 <u_putch>

    if (t != 0)
     2ac:	8a 81       	ldd	r24, Y+2	; 0x02
     2ae:	88 23       	and	r24, r24
     2b0:	11 f0       	breq	.+4      	; 0x2b6 <u_putHexByte+0x42>
        u_putch(t);
     2b2:	8a 81       	ldd	r24, Y+2	; 0x02
     2b4:	05 d0       	rcall	.+10     	; 0x2c0 <u_putch>

}
     2b6:	0f 90       	pop	r0
     2b8:	0f 90       	pop	r0
     2ba:	cf 91       	pop	r28
     2bc:	df 91       	pop	r29
     2be:	08 95       	ret

000002c0 <u_putch>:
//                     
// Notes			:
//----------------------------------------------------------------------------

void u_putch(INT8U abyte) 
{
     2c0:	df 93       	push	r29
     2c2:	cf 93       	push	r28
     2c4:	0f 92       	push	r0
     2c6:	cd b7       	in	r28, 0x3d	; 61
     2c8:	de b7       	in	r29, 0x3e	; 62
     2ca:	89 83       	std	Y+1, r24	; 0x01

	UCSRB |= 0x08; // enable transmitter
     2cc:	aa e2       	ldi	r26, 0x2A	; 42
     2ce:	b0 e0       	ldi	r27, 0x00	; 0
     2d0:	ea e2       	ldi	r30, 0x2A	; 42
     2d2:	f0 e0       	ldi	r31, 0x00	; 0
     2d4:	80 81       	ld	r24, Z
     2d6:	88 60       	ori	r24, 0x08	; 8
     2d8:	8c 93       	st	X, r24

    while (!(UCSRA & 0x20))
     2da:	eb e2       	ldi	r30, 0x2B	; 43
     2dc:	f0 e0       	ldi	r31, 0x00	; 0
     2de:	80 81       	ld	r24, Z
     2e0:	88 2f       	mov	r24, r24
     2e2:	90 e0       	ldi	r25, 0x00	; 0
     2e4:	80 72       	andi	r24, 0x20	; 32
     2e6:	90 70       	andi	r25, 0x00	; 0
     2e8:	00 97       	sbiw	r24, 0x00	; 0
     2ea:	b9 f3       	breq	.-18     	; 0x2da <u_putch+0x1a>
	{
		// do nothing
	}
	
    UDR = abyte;
     2ec:	ec e2       	ldi	r30, 0x2C	; 44
     2ee:	f0 e0       	ldi	r31, 0x00	; 0
     2f0:	89 81       	ldd	r24, Y+1	; 0x01
     2f2:	80 83       	st	Z, r24

}
     2f4:	0f 90       	pop	r0
     2f6:	cf 91       	pop	r28
     2f8:	df 91       	pop	r29
     2fa:	08 95       	ret

000002fc <u_puts>:
//                     
// Notes			:
//----------------------------------------------------------------------------

void u_puts( INT8U *sptr) 
{
     2fc:	df 93       	push	r29
     2fe:	cf 93       	push	r28
     300:	00 d0       	rcall	.+0      	; 0x302 <u_puts+0x6>
     302:	cd b7       	in	r28, 0x3d	; 61
     304:	de b7       	in	r29, 0x3e	; 62
     306:	9a 83       	std	Y+2, r25	; 0x02
     308:	89 83       	std	Y+1, r24	; 0x01
     30a:	0a c0       	rjmp	.+20     	; 0x320 <u_puts+0x24>
	while(*sptr != 0) 
        u_putch(*sptr++);
     30c:	e9 81       	ldd	r30, Y+1	; 0x01
     30e:	fa 81       	ldd	r31, Y+2	; 0x02
     310:	20 81       	ld	r18, Z
     312:	89 81       	ldd	r24, Y+1	; 0x01
     314:	9a 81       	ldd	r25, Y+2	; 0x02
     316:	01 96       	adiw	r24, 0x01	; 1
     318:	9a 83       	std	Y+2, r25	; 0x02
     31a:	89 83       	std	Y+1, r24	; 0x01
     31c:	82 2f       	mov	r24, r18
     31e:	d0 df       	rcall	.-96     	; 0x2c0 <u_putch>
// Notes			:
//----------------------------------------------------------------------------

void u_puts( INT8U *sptr) 
{
	while(*sptr != 0) 
     320:	e9 81       	ldd	r30, Y+1	; 0x01
     322:	fa 81       	ldd	r31, Y+2	; 0x02
     324:	80 81       	ld	r24, Z
     326:	88 23       	and	r24, r24
     328:	89 f7       	brne	.-30     	; 0x30c <u_puts+0x10>
        u_putch(*sptr++);
}
     32a:	0f 90       	pop	r0
     32c:	0f 90       	pop	r0
     32e:	cf 91       	pop	r28
     330:	df 91       	pop	r29
     332:	08 95       	ret

00000334 <u_toupper>:

INT8U u_toupper(INT8U c)

{
     334:	df 93       	push	r29
     336:	cf 93       	push	r28
     338:	00 d0       	rcall	.+0      	; 0x33a <u_toupper+0x6>
     33a:	cd b7       	in	r28, 0x3d	; 61
     33c:	de b7       	in	r29, 0x3e	; 62
     33e:	89 83       	std	Y+1, r24	; 0x01

	if ((c>='a') && (c<='z'))		//convert lower case to upper case
     340:	89 81       	ldd	r24, Y+1	; 0x01
     342:	81 36       	cpi	r24, 0x61	; 97
     344:	40 f0       	brcs	.+16     	; 0x356 <u_toupper+0x22>
     346:	89 81       	ldd	r24, Y+1	; 0x01
     348:	8b 37       	cpi	r24, 0x7B	; 123
     34a:	28 f4       	brcc	.+10     	; 0x356 <u_toupper+0x22>
		return(c-0x20);
     34c:	89 81       	ldd	r24, Y+1	; 0x01
     34e:	98 2f       	mov	r25, r24
     350:	90 52       	subi	r25, 0x20	; 32
     352:	9a 83       	std	Y+2, r25	; 0x02
     354:	02 c0       	rjmp	.+4      	; 0x35a <u_toupper+0x26>
	else
		return(c);
     356:	89 81       	ldd	r24, Y+1	; 0x01
     358:	8a 83       	std	Y+2, r24	; 0x02
     35a:	8a 81       	ldd	r24, Y+2	; 0x02

}
     35c:	0f 90       	pop	r0
     35e:	0f 90       	pop	r0
     360:	cf 91       	pop	r28
     362:	df 91       	pop	r29
     364:	08 95       	ret

00000366 <__vector_11>:
volatile unsigned char mFaucetBL=0x00;


// Define Interrupt

SIGNAL(SIG_UART_RECV) { // USART RX interrupt
     366:	1f 92       	push	r1
     368:	0f 92       	push	r0
     36a:	0f b6       	in	r0, 0x3f	; 63
     36c:	0f 92       	push	r0
     36e:	11 24       	eor	r1, r1
     370:	2f 93       	push	r18
     372:	3f 93       	push	r19
     374:	4f 93       	push	r20
     376:	5f 93       	push	r21
     378:	6f 93       	push	r22
     37a:	7f 93       	push	r23
     37c:	8f 93       	push	r24
     37e:	9f 93       	push	r25
     380:	af 93       	push	r26
     382:	bf 93       	push	r27
     384:	ef 93       	push	r30
     386:	ff 93       	push	r31
     388:	df 93       	push	r29
     38a:	cf 93       	push	r28
     38c:	cd b7       	in	r28, 0x3d	; 61
     38e:	de b7       	in	r29, 0x3e	; 62

	ISR_UART_RECV();
     390:	13 d0       	rcall	.+38     	; 0x3b8 <ISR_UART_RECV>

}
     392:	cf 91       	pop	r28
     394:	df 91       	pop	r29
     396:	ff 91       	pop	r31
     398:	ef 91       	pop	r30
     39a:	bf 91       	pop	r27
     39c:	af 91       	pop	r26
     39e:	9f 91       	pop	r25
     3a0:	8f 91       	pop	r24
     3a2:	7f 91       	pop	r23
     3a4:	6f 91       	pop	r22
     3a6:	5f 91       	pop	r21
     3a8:	4f 91       	pop	r20
     3aa:	3f 91       	pop	r19
     3ac:	2f 91       	pop	r18
     3ae:	0f 90       	pop	r0
     3b0:	0f be       	out	0x3f, r0	; 63
     3b2:	0f 90       	pop	r0
     3b4:	1f 90       	pop	r1
     3b6:	18 95       	reti

000003b8 <ISR_UART_RECV>:

void ISR_UART_RECV(void)
{
     3b8:	df 93       	push	r29
     3ba:	cf 93       	push	r28
     3bc:	00 d0       	rcall	.+0      	; 0x3be <ISR_UART_RECV+0x6>
     3be:	0f 92       	push	r0
     3c0:	cd b7       	in	r28, 0x3d	; 61
     3c2:	de b7       	in	r29, 0x3e	; 62

	 //uart has received a character in UDR 	 
	 unsigned char data;
//	 static unsigned char pdata;
	 data = UDR;
     3c4:	ec e2       	ldi	r30, 0x2C	; 44
     3c6:	f0 e0       	ldi	r31, 0x00	; 0
     3c8:	80 81       	ld	r24, Z
     3ca:	89 83       	std	Y+1, r24	; 0x01

	 PORTC ^= (1<<LED1);
     3cc:	a5 e3       	ldi	r26, 0x35	; 53
     3ce:	b0 e0       	ldi	r27, 0x00	; 0
     3d0:	e5 e3       	ldi	r30, 0x35	; 53
     3d2:	f0 e0       	ldi	r31, 0x00	; 0
     3d4:	90 81       	ld	r25, Z
     3d6:	81 e0       	ldi	r24, 0x01	; 1
     3d8:	89 27       	eor	r24, r25
     3da:	8c 93       	st	X, r24

	 // Set CmdReady Flag 
	 if ((data=='\r') || (data=='\n')) 
     3dc:	89 81       	ldd	r24, Y+1	; 0x01
     3de:	8d 30       	cpi	r24, 0x0D	; 13
     3e0:	19 f0       	breq	.+6      	; 0x3e8 <ISR_UART_RECV+0x30>
     3e2:	89 81       	ldd	r24, Y+1	; 0x01
     3e4:	8a 30       	cpi	r24, 0x0A	; 10
     3e6:	c9 f5       	brne	.+114    	; 0x45a <ISR_UART_RECV+0xa2>
	 {
//	 	mCmdQ[0] |= 0x80;	
	 	mCmdQFlag = 1;	
     3e8:	81 e0       	ldi	r24, 0x01	; 1
     3ea:	80 93 9e 01 	sts	0x019E, r24
		// Ignore empty message
	 	if (mCmdQ[0] == 0x00)
     3ee:	80 91 be 01 	lds	r24, 0x01BE
     3f2:	88 23       	and	r24, r24
     3f4:	19 f4       	brne	.+6      	; 0x3fc <ISR_UART_RECV+0x44>
		{
			mCmdQFlag = 0x00;
     3f6:	10 92 9e 01 	sts	0x019E, r1
     3fa:	0e c0       	rjmp	.+28     	; 0x418 <ISR_UART_RECV+0x60>
		}
		else if ((mCmdQ[0] == 0x01) && (mCmdQ[1] == 0xff))	// Process message with ONE BYTE
     3fc:	80 91 be 01 	lds	r24, 0x01BE
     400:	81 30       	cpi	r24, 0x01	; 1
     402:	51 f4       	brne	.+20     	; 0x418 <ISR_UART_RECV+0x60>
     404:	80 91 bf 01 	lds	r24, 0x01BF
     408:	8f 3f       	cpi	r24, 0xFF	; 255
     40a:	31 f4       	brne	.+12     	; 0x418 <ISR_UART_RECV+0x60>
		{													// 0xff = Linux Login Reset
			mCmdQ[0] = 0x00;		
     40c:	10 92 be 01 	sts	0x01BE, r1
			mCmdQFlag = 0x00;
     410:	10 92 9e 01 	sts	0x019E, r1
			mLinuxMode = 0x00;
     414:	10 92 e8 00 	sts	0x00E8, r1
		}

		if (mLinuxMode <=1)									// Ignor message when mLinux Mode <=1
     418:	80 91 e8 00 	lds	r24, 0x00E8
     41c:	82 30       	cpi	r24, 0x02	; 2
     41e:	28 f4       	brcc	.+10     	; 0x42a <ISR_UART_RECV+0x72>
		{
	 		mCmdQ[0] = 0x00;	
     420:	10 92 be 01 	sts	0x01BE, r1
			mCmdQFlag = 0x00;
     424:	10 92 9e 01 	sts	0x019E, r1
     428:	38 c0       	rjmp	.+112    	; 0x49a <__stack+0x3b>
		}
		else if ((mpUART != '~') | (mCmdQ[1] != '~'))		// Ignor message not started with and terminated by "~"
     42a:	80 91 3e 02 	lds	r24, 0x023E
     42e:	1b 82       	std	Y+3, r1	; 0x03
     430:	8e 37       	cpi	r24, 0x7E	; 126
     432:	11 f0       	breq	.+4      	; 0x438 <ISR_UART_RECV+0x80>
     434:	81 e0       	ldi	r24, 0x01	; 1
     436:	8b 83       	std	Y+3, r24	; 0x03
     438:	80 91 bf 01 	lds	r24, 0x01BF
     43c:	1a 82       	std	Y+2, r1	; 0x02
     43e:	8e 37       	cpi	r24, 0x7E	; 126
     440:	11 f0       	breq	.+4      	; 0x446 <ISR_UART_RECV+0x8e>
     442:	91 e0       	ldi	r25, 0x01	; 1
     444:	9a 83       	std	Y+2, r25	; 0x02
     446:	8b 81       	ldd	r24, Y+3	; 0x03
     448:	9a 81       	ldd	r25, Y+2	; 0x02
     44a:	89 2b       	or	r24, r25
     44c:	88 23       	and	r24, r24
     44e:	29 f1       	breq	.+74     	; 0x49a <__stack+0x3b>
		{
	 		mCmdQ[0] = 0x00;	
     450:	10 92 be 01 	sts	0x01BE, r1
			mCmdQFlag = 0x00;
     454:	10 92 9e 01 	sts	0x019E, r1
     458:	20 c0       	rjmp	.+64     	; 0x49a <__stack+0x3b>
		}
	 }
	 else if (mCmdQ[0] < ((sizeof(mCmdQ))-1))	 
     45a:	80 91 be 01 	lds	r24, 0x01BE
     45e:	8f 37       	cpi	r24, 0x7F	; 127
     460:	e0 f4       	brcc	.+56     	; 0x49a <__stack+0x3b>
	 {
		 if ((mLinuxMode<=0x01) && (mpUART == ':') && data==' ')
     462:	80 91 e8 00 	lds	r24, 0x00E8
     466:	82 30       	cpi	r24, 0x02	; 2
     468:	50 f4       	brcc	.+20     	; 0x47e <__stack+0x1f>
     46a:	80 91 3e 02 	lds	r24, 0x023E
     46e:	8a 33       	cpi	r24, 0x3A	; 58
     470:	31 f4       	brne	.+12     	; 0x47e <__stack+0x1f>
     472:	89 81       	ldd	r24, Y+1	; 0x01
     474:	80 32       	cpi	r24, 0x20	; 32
     476:	19 f4       	brne	.+6      	; 0x47e <__stack+0x1f>
		 {
//			mCmdQ[0] |= 0x80;
			mCmdQFlag = 1;
     478:	81 e0       	ldi	r24, 0x01	; 1
     47a:	80 93 9e 01 	sts	0x019E, r24
		 }
	 	 mCmdQ[0]++;
     47e:	80 91 be 01 	lds	r24, 0x01BE
     482:	8f 5f       	subi	r24, 0xFF	; 255
     484:	80 93 be 01 	sts	0x01BE, r24
		 mCmdQ[mCmdQ[0]]=data;
     488:	80 91 be 01 	lds	r24, 0x01BE
     48c:	88 2f       	mov	r24, r24
     48e:	90 e0       	ldi	r25, 0x00	; 0
     490:	fc 01       	movw	r30, r24
     492:	e2 54       	subi	r30, 0x42	; 66
     494:	fe 4f       	sbci	r31, 0xFE	; 254
     496:	89 81       	ldd	r24, Y+1	; 0x01
     498:	80 83       	st	Z, r24
	 }	

// 	 pdata = data;
	 mpUART = data;
     49a:	89 81       	ldd	r24, Y+1	; 0x01
     49c:	80 93 3e 02 	sts	0x023E, r24


}
     4a0:	0f 90       	pop	r0
     4a2:	0f 90       	pop	r0
     4a4:	0f 90       	pop	r0
     4a6:	cf 91       	pop	r28
     4a8:	df 91       	pop	r29
     4aa:	08 95       	ret

000004ac <POLL_UART_RECV>:

void POLL_UART_RECV(void)
{
     4ac:	df 93       	push	r29
     4ae:	cf 93       	push	r28
     4b0:	00 d0       	rcall	.+0      	; 0x4b2 <POLL_UART_RECV+0x6>
     4b2:	0f 92       	push	r0
     4b4:	cd b7       	in	r28, 0x3d	; 61
     4b6:	de b7       	in	r29, 0x3e	; 62

 	 //uart has received a character in UDR 	 
	 unsigned char data;
//	 static unsigned char pdata;
	 data = UDR;
     4b8:	ec e2       	ldi	r30, 0x2C	; 44
     4ba:	f0 e0       	ldi	r31, 0x00	; 0
     4bc:	80 81       	ld	r24, Z
     4be:	89 83       	std	Y+1, r24	; 0x01

	 PORTC ^= (1<<LED1);
     4c0:	a5 e3       	ldi	r26, 0x35	; 53
     4c2:	b0 e0       	ldi	r27, 0x00	; 0
     4c4:	e5 e3       	ldi	r30, 0x35	; 53
     4c6:	f0 e0       	ldi	r31, 0x00	; 0
     4c8:	90 81       	ld	r25, Z
     4ca:	81 e0       	ldi	r24, 0x01	; 1
     4cc:	89 27       	eor	r24, r25
     4ce:	8c 93       	st	X, r24

	 // Set CmdReady Flag 
	 if ((data=='\r') || (data=='\n')) 
     4d0:	89 81       	ldd	r24, Y+1	; 0x01
     4d2:	8d 30       	cpi	r24, 0x0D	; 13
     4d4:	19 f0       	breq	.+6      	; 0x4dc <POLL_UART_RECV+0x30>
     4d6:	89 81       	ldd	r24, Y+1	; 0x01
     4d8:	8a 30       	cpi	r24, 0x0A	; 10
     4da:	c9 f5       	brne	.+114    	; 0x54e <POLL_UART_RECV+0xa2>
	 {
//	 	mCmdQ[0] |= 0x80;	
	 	mCmdQFlag = 1;	
     4dc:	81 e0       	ldi	r24, 0x01	; 1
     4de:	80 93 9e 01 	sts	0x019E, r24
		// Ignore empty message
	 	if (mCmdQ[0] == 0x00)
     4e2:	80 91 be 01 	lds	r24, 0x01BE
     4e6:	88 23       	and	r24, r24
     4e8:	19 f4       	brne	.+6      	; 0x4f0 <POLL_UART_RECV+0x44>
		{
			mCmdQFlag = 0x00;
     4ea:	10 92 9e 01 	sts	0x019E, r1
     4ee:	0e c0       	rjmp	.+28     	; 0x50c <POLL_UART_RECV+0x60>
		}
		else if ((mCmdQ[0] == 0x01) && (mCmdQ[1] == 0xff))	// Process message with ONE BYTE
     4f0:	80 91 be 01 	lds	r24, 0x01BE
     4f4:	81 30       	cpi	r24, 0x01	; 1
     4f6:	51 f4       	brne	.+20     	; 0x50c <POLL_UART_RECV+0x60>
     4f8:	80 91 bf 01 	lds	r24, 0x01BF
     4fc:	8f 3f       	cpi	r24, 0xFF	; 255
     4fe:	31 f4       	brne	.+12     	; 0x50c <POLL_UART_RECV+0x60>
		{													// 0xff = Linux Login Reset
			mCmdQ[0] = 0x00;		
     500:	10 92 be 01 	sts	0x01BE, r1
			mCmdQFlag = 0x00;
     504:	10 92 9e 01 	sts	0x019E, r1
			mLinuxMode = 0x00;
     508:	10 92 e8 00 	sts	0x00E8, r1
		}

		if (mLinuxMode <=1)									// Ignor message when mLinux Mode <=1
     50c:	80 91 e8 00 	lds	r24, 0x00E8
     510:	82 30       	cpi	r24, 0x02	; 2
     512:	28 f4       	brcc	.+10     	; 0x51e <POLL_UART_RECV+0x72>
		{
	 		mCmdQ[0] = 0x00;	
     514:	10 92 be 01 	sts	0x01BE, r1
			mCmdQFlag = 0x00;
     518:	10 92 9e 01 	sts	0x019E, r1
     51c:	38 c0       	rjmp	.+112    	; 0x58e <POLL_UART_RECV+0xe2>
		}
		else if ((mpUART != '~') | (mCmdQ[1] != '~'))		// Ignor message not started with and terminated by "~"
     51e:	80 91 3e 02 	lds	r24, 0x023E
     522:	1b 82       	std	Y+3, r1	; 0x03
     524:	8e 37       	cpi	r24, 0x7E	; 126
     526:	11 f0       	breq	.+4      	; 0x52c <POLL_UART_RECV+0x80>
     528:	81 e0       	ldi	r24, 0x01	; 1
     52a:	8b 83       	std	Y+3, r24	; 0x03
     52c:	80 91 bf 01 	lds	r24, 0x01BF
     530:	1a 82       	std	Y+2, r1	; 0x02
     532:	8e 37       	cpi	r24, 0x7E	; 126
     534:	11 f0       	breq	.+4      	; 0x53a <POLL_UART_RECV+0x8e>
     536:	91 e0       	ldi	r25, 0x01	; 1
     538:	9a 83       	std	Y+2, r25	; 0x02
     53a:	8b 81       	ldd	r24, Y+3	; 0x03
     53c:	9a 81       	ldd	r25, Y+2	; 0x02
     53e:	89 2b       	or	r24, r25
     540:	88 23       	and	r24, r24
     542:	29 f1       	breq	.+74     	; 0x58e <POLL_UART_RECV+0xe2>
		{
	 		mCmdQ[0] = 0x00;	
     544:	10 92 be 01 	sts	0x01BE, r1
			mCmdQFlag = 0x00;
     548:	10 92 9e 01 	sts	0x019E, r1
     54c:	20 c0       	rjmp	.+64     	; 0x58e <POLL_UART_RECV+0xe2>
		}
	 }
	 else if (mCmdQ[0] < ((sizeof(mCmdQ))-1))	 
     54e:	80 91 be 01 	lds	r24, 0x01BE
     552:	8f 37       	cpi	r24, 0x7F	; 127
     554:	e0 f4       	brcc	.+56     	; 0x58e <POLL_UART_RECV+0xe2>
	 {
		 if ((mLinuxMode<=0x01) && (mpUART == ':') && data==' ')
     556:	80 91 e8 00 	lds	r24, 0x00E8
     55a:	82 30       	cpi	r24, 0x02	; 2
     55c:	50 f4       	brcc	.+20     	; 0x572 <POLL_UART_RECV+0xc6>
     55e:	80 91 3e 02 	lds	r24, 0x023E
     562:	8a 33       	cpi	r24, 0x3A	; 58
     564:	31 f4       	brne	.+12     	; 0x572 <POLL_UART_RECV+0xc6>
     566:	89 81       	ldd	r24, Y+1	; 0x01
     568:	80 32       	cpi	r24, 0x20	; 32
     56a:	19 f4       	brne	.+6      	; 0x572 <POLL_UART_RECV+0xc6>
		 {
//			mCmdQ[0] |= 0x80;
			mCmdQFlag = 1;
     56c:	81 e0       	ldi	r24, 0x01	; 1
     56e:	80 93 9e 01 	sts	0x019E, r24
		 }
	 	 mCmdQ[0]++;
     572:	80 91 be 01 	lds	r24, 0x01BE
     576:	8f 5f       	subi	r24, 0xFF	; 255
     578:	80 93 be 01 	sts	0x01BE, r24
		 mCmdQ[mCmdQ[0]]=data;
     57c:	80 91 be 01 	lds	r24, 0x01BE
     580:	88 2f       	mov	r24, r24
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	fc 01       	movw	r30, r24
     586:	e2 54       	subi	r30, 0x42	; 66
     588:	fe 4f       	sbci	r31, 0xFE	; 254
     58a:	89 81       	ldd	r24, Y+1	; 0x01
     58c:	80 83       	st	Z, r24
	 }	

// 	 pdata = data;
	 mpUART = data;
     58e:	89 81       	ldd	r24, Y+1	; 0x01
     590:	80 93 3e 02 	sts	0x023E, r24

}
     594:	0f 90       	pop	r0
     596:	0f 90       	pop	r0
     598:	0f 90       	pop	r0
     59a:	cf 91       	pop	r28
     59c:	df 91       	pop	r29
     59e:	08 95       	ret

000005a0 <__vector_9>:


// uses timer0 for base timer
// Interrupt for every 21.845333mS
SIGNAL (TIMER0_OVF_vect)	
{
     5a0:	1f 92       	push	r1
     5a2:	0f 92       	push	r0
     5a4:	0f b6       	in	r0, 0x3f	; 63
     5a6:	0f 92       	push	r0
     5a8:	11 24       	eor	r1, r1
     5aa:	2f 93       	push	r18
     5ac:	3f 93       	push	r19
     5ae:	4f 93       	push	r20
     5b0:	5f 93       	push	r21
     5b2:	6f 93       	push	r22
     5b4:	7f 93       	push	r23
     5b6:	8f 93       	push	r24
     5b8:	9f 93       	push	r25
     5ba:	af 93       	push	r26
     5bc:	bf 93       	push	r27
     5be:	ef 93       	push	r30
     5c0:	ff 93       	push	r31
     5c2:	df 93       	push	r29
     5c4:	cf 93       	push	r28
     5c6:	cd b7       	in	r28, 0x3d	; 61
     5c8:	de b7       	in	r29, 0x3e	; 62
	ISR_TIMER0_OVR();
     5ca:	13 d0       	rcall	.+38     	; 0x5f2 <ISR_TIMER0_OVR>
}
     5cc:	cf 91       	pop	r28
     5ce:	df 91       	pop	r29
     5d0:	ff 91       	pop	r31
     5d2:	ef 91       	pop	r30
     5d4:	bf 91       	pop	r27
     5d6:	af 91       	pop	r26
     5d8:	9f 91       	pop	r25
     5da:	8f 91       	pop	r24
     5dc:	7f 91       	pop	r23
     5de:	6f 91       	pop	r22
     5e0:	5f 91       	pop	r21
     5e2:	4f 91       	pop	r20
     5e4:	3f 91       	pop	r19
     5e6:	2f 91       	pop	r18
     5e8:	0f 90       	pop	r0
     5ea:	0f be       	out	0x3f, r0	; 63
     5ec:	0f 90       	pop	r0
     5ee:	1f 90       	pop	r1
     5f0:	18 95       	reti

000005f2 <ISR_TIMER0_OVR>:

void ISR_TIMER0_OVR (void)
{
     5f2:	df 93       	push	r29
     5f4:	cf 93       	push	r28
     5f6:	cd b7       	in	r28, 0x3d	; 61
     5f8:	de b7       	in	r29, 0x3e	; 62
	mTimer0_Cnt++;
     5fa:	80 91 a2 01 	lds	r24, 0x01A2
     5fe:	8f 5f       	subi	r24, 0xFF	; 255
     600:	80 93 a2 01 	sts	0x01A2, r24
	if (mTimer0_Cnt>=9)	// 21.84533ms * 9 = 196.6ms
     604:	80 91 a2 01 	lds	r24, 0x01A2
     608:	89 30       	cpi	r24, 0x09	; 9
     60a:	28 f0       	brcs	.+10     	; 0x616 <ISR_TIMER0_OVR+0x24>
	{
		mTimer0_Flag = 1;
     60c:	81 e0       	ldi	r24, 0x01	; 1
     60e:	80 93 a1 01 	sts	0x01A1, r24
		mTimer0_Cnt =0;
     612:	10 92 a2 01 	sts	0x01A2, r1
	}
}
     616:	cf 91       	pop	r28
     618:	df 91       	pop	r29
     61a:	08 95       	ret

0000061c <POLL_TIMER0_OVR>:

void POLL_TIMER0_OVR(void)
{
     61c:	df 93       	push	r29
     61e:	cf 93       	push	r28
     620:	cd b7       	in	r28, 0x3d	; 61
     622:	de b7       	in	r29, 0x3e	; 62

	TIFR |= 0x01;			// Clear TOV0 Flag
     624:	a8 e5       	ldi	r26, 0x58	; 88
     626:	b0 e0       	ldi	r27, 0x00	; 0
     628:	e8 e5       	ldi	r30, 0x58	; 88
     62a:	f0 e0       	ldi	r31, 0x00	; 0
     62c:	80 81       	ld	r24, Z
     62e:	81 60       	ori	r24, 0x01	; 1
     630:	8c 93       	st	X, r24
	mTimer0_Cnt++;
     632:	80 91 a2 01 	lds	r24, 0x01A2
     636:	8f 5f       	subi	r24, 0xFF	; 255
     638:	80 93 a2 01 	sts	0x01A2, r24
	if (mTimer0_Cnt>=9)	// 21.84533ms * 9 = 196.6ms
     63c:	80 91 a2 01 	lds	r24, 0x01A2
     640:	89 30       	cpi	r24, 0x09	; 9
     642:	28 f0       	brcs	.+10     	; 0x64e <POLL_TIMER0_OVR+0x32>
	{
		mTimer0_Flag = 1;
     644:	81 e0       	ldi	r24, 0x01	; 1
     646:	80 93 a1 01 	sts	0x01A1, r24
		mTimer0_Cnt =0;
     64a:	10 92 a2 01 	sts	0x01A2, r1
	}
}
     64e:	cf 91       	pop	r28
     650:	df 91       	pop	r29
     652:	08 95       	ret

00000654 <__vector_6>:


SIGNAL (SIG_OUTPUT_COMPARE1A)
{
     654:	1f 92       	push	r1
     656:	0f 92       	push	r0
     658:	0f b6       	in	r0, 0x3f	; 63
     65a:	0f 92       	push	r0
     65c:	11 24       	eor	r1, r1
     65e:	2f 93       	push	r18
     660:	3f 93       	push	r19
     662:	8f 93       	push	r24
     664:	9f 93       	push	r25
     666:	af 93       	push	r26
     668:	bf 93       	push	r27
     66a:	ef 93       	push	r30
     66c:	ff 93       	push	r31
     66e:	df 93       	push	r29
     670:	cf 93       	push	r28
     672:	cd b7       	in	r28, 0x3d	; 61
     674:	de b7       	in	r29, 0x3e	; 62

	mPulseCnt --;
     676:	80 91 82 02 	lds	r24, 0x0282
     67a:	90 91 83 02 	lds	r25, 0x0283
     67e:	01 97       	sbiw	r24, 0x01	; 1
     680:	90 93 83 02 	sts	0x0283, r25
     684:	80 93 82 02 	sts	0x0282, r24

	if (mPulseCnt==mPulse[1])
     688:	20 91 3d 04 	lds	r18, 0x043D
     68c:	30 91 3e 04 	lds	r19, 0x043E
     690:	80 91 82 02 	lds	r24, 0x0282
     694:	90 91 83 02 	lds	r25, 0x0283
     698:	28 17       	cp	r18, r24
     69a:	39 07       	cpc	r19, r25
     69c:	71 f4       	brne	.+28     	; 0x6ba <__vector_6+0x66>
	{
		PORTB  &= ~(0x02);			// Set OC1A pin to "0"
     69e:	a8 e3       	ldi	r26, 0x38	; 56
     6a0:	b0 e0       	ldi	r27, 0x00	; 0
     6a2:	e8 e3       	ldi	r30, 0x38	; 56
     6a4:	f0 e0       	ldi	r31, 0x00	; 0
     6a6:	80 81       	ld	r24, Z
     6a8:	8d 7f       	andi	r24, 0xFD	; 253
     6aa:	8c 93       	st	X, r24
		TCCR1A &= ~(0b11000000);	// Disconnect OC1A on compare
     6ac:	af e4       	ldi	r26, 0x4F	; 79
     6ae:	b0 e0       	ldi	r27, 0x00	; 0
     6b0:	ef e4       	ldi	r30, 0x4F	; 79
     6b2:	f0 e0       	ldi	r31, 0x00	; 0
     6b4:	80 81       	ld	r24, Z
     6b6:	8f 73       	andi	r24, 0x3F	; 63
     6b8:	8c 93       	st	X, r24
//		PORTC  &= ~(1 << LED3);		// Clear LED3
	}

	if (mPulseCnt==0)
     6ba:	80 91 82 02 	lds	r24, 0x0282
     6be:	90 91 83 02 	lds	r25, 0x0283
     6c2:	00 97       	sbiw	r24, 0x00	; 0
     6c4:	49 f4       	brne	.+18     	; 0x6d8 <__vector_6+0x84>
	{
		mTxFlag = 0;
     6c6:	10 92 17 04 	sts	0x0417, r1
		TCCR1B &= 0b11111000;		// Stop Clock
     6ca:	ae e4       	ldi	r26, 0x4E	; 78
     6cc:	b0 e0       	ldi	r27, 0x00	; 0
     6ce:	ee e4       	ldi	r30, 0x4E	; 78
     6d0:	f0 e0       	ldi	r31, 0x00	; 0
     6d2:	80 81       	ld	r24, Z
     6d4:	88 7f       	andi	r24, 0xF8	; 248
     6d6:	8c 93       	st	X, r24
	}

}
     6d8:	cf 91       	pop	r28
     6da:	df 91       	pop	r29
     6dc:	ff 91       	pop	r31
     6de:	ef 91       	pop	r30
     6e0:	bf 91       	pop	r27
     6e2:	af 91       	pop	r26
     6e4:	9f 91       	pop	r25
     6e6:	8f 91       	pop	r24
     6e8:	3f 91       	pop	r19
     6ea:	2f 91       	pop	r18
     6ec:	0f 90       	pop	r0
     6ee:	0f be       	out	0x3f, r0	; 63
     6f0:	0f 90       	pop	r0
     6f2:	1f 90       	pop	r1
     6f4:	18 95       	reti

000006f6 <__vector_5>:

SIGNAL (SIG_INPUT_CAPTURE1)
{
     6f6:	1f 92       	push	r1
     6f8:	0f 92       	push	r0
     6fa:	0f b6       	in	r0, 0x3f	; 63
     6fc:	0f 92       	push	r0
     6fe:	11 24       	eor	r1, r1
     700:	2f 93       	push	r18
     702:	3f 93       	push	r19
     704:	4f 93       	push	r20
     706:	5f 93       	push	r21
     708:	6f 93       	push	r22
     70a:	7f 93       	push	r23
     70c:	8f 93       	push	r24
     70e:	9f 93       	push	r25
     710:	af 93       	push	r26
     712:	bf 93       	push	r27
     714:	ef 93       	push	r30
     716:	ff 93       	push	r31
     718:	df 93       	push	r29
     71a:	cf 93       	push	r28
     71c:	00 d0       	rcall	.+0      	; 0x71e <__vector_5+0x28>
     71e:	0f 92       	push	r0
     720:	cd b7       	in	r28, 0x3d	; 61
     722:	de b7       	in	r29, 0x3e	; 62
	unsigned char tmp;
	unsigned int tCnt;

	tCnt = ICR1;
     724:	e6 e4       	ldi	r30, 0x46	; 70
     726:	f0 e0       	ldi	r31, 0x00	; 0
     728:	80 81       	ld	r24, Z
     72a:	91 81       	ldd	r25, Z+1	; 0x01
     72c:	9a 83       	std	Y+2, r25	; 0x02
     72e:	89 83       	std	Y+1, r24	; 0x01

	mCapturePulse[mCaptureIndex] = tCnt;	// Capture Timer1
     730:	80 91 84 02 	lds	r24, 0x0284
     734:	90 91 85 02 	lds	r25, 0x0285
     738:	88 0f       	add	r24, r24
     73a:	99 1f       	adc	r25, r25
     73c:	fc 01       	movw	r30, r24
     73e:	ea 57       	subi	r30, 0x7A	; 122
     740:	fd 4f       	sbci	r31, 0xFD	; 253
     742:	89 81       	ldd	r24, Y+1	; 0x01
     744:	9a 81       	ldd	r25, Y+2	; 0x02
     746:	91 83       	std	Z+1, r25	; 0x01
     748:	80 83       	st	Z, r24
	mPulseT[2]=mPulseT[1];
     74a:	80 91 a6 01 	lds	r24, 0x01A6
     74e:	90 91 a7 01 	lds	r25, 0x01A7
     752:	90 93 a9 01 	sts	0x01A9, r25
     756:	80 93 a8 01 	sts	0x01A8, r24
	mPulseT[1]=mPulseT[0];
     75a:	80 91 a4 01 	lds	r24, 0x01A4
     75e:	90 91 a5 01 	lds	r25, 0x01A5
     762:	90 93 a7 01 	sts	0x01A7, r25
     766:	80 93 a6 01 	sts	0x01A6, r24
	mPulseT[0] = mCapturePulse[mCaptureIndex] >> 1;
     76a:	80 91 84 02 	lds	r24, 0x0284
     76e:	90 91 85 02 	lds	r25, 0x0285
     772:	88 0f       	add	r24, r24
     774:	99 1f       	adc	r25, r25
     776:	fc 01       	movw	r30, r24
     778:	ea 57       	subi	r30, 0x7A	; 122
     77a:	fd 4f       	sbci	r31, 0xFD	; 253
     77c:	80 81       	ld	r24, Z
     77e:	91 81       	ldd	r25, Z+1	; 0x01
     780:	96 95       	lsr	r25
     782:	87 95       	ror	r24
     784:	90 93 a5 01 	sts	0x01A5, r25
     788:	80 93 a4 01 	sts	0x01A4, r24

	TCNT1 = 0x00;							// Set Timer1 = 0x00;
     78c:	ec e4       	ldi	r30, 0x4C	; 76
     78e:	f0 e0       	ldi	r31, 0x00	; 0
     790:	11 82       	std	Z+1, r1	; 0x01
     792:	10 82       	st	Z, r1

//	TCCR1B ^= 0x01000000;					// Toggle Trigger Edge
	tmp = TCCR1B;
     794:	ee e4       	ldi	r30, 0x4E	; 78
     796:	f0 e0       	ldi	r31, 0x00	; 0
     798:	80 81       	ld	r24, Z
     79a:	8b 83       	std	Y+3, r24	; 0x03
	tmp ^= 0x40;
     79c:	9b 81       	ldd	r25, Y+3	; 0x03
     79e:	80 e4       	ldi	r24, 0x40	; 64
     7a0:	89 27       	eor	r24, r25
     7a2:	8b 83       	std	Y+3, r24	; 0x03
	TCCR1B = tmp;							// Toggle Trigger Edge
     7a4:	ee e4       	ldi	r30, 0x4E	; 78
     7a6:	f0 e0       	ldi	r31, 0x00	; 0
     7a8:	8b 81       	ldd	r24, Y+3	; 0x03
     7aa:	80 83       	st	Z, r24

	izuvo_rx_pulse(tCnt);
     7ac:	89 81       	ldd	r24, Y+1	; 0x01
     7ae:	9a 81       	ldd	r25, Y+2	; 0x02
     7b0:	89 d5       	rcall	.+2834   	; 0x12c4 <izuvo_rx_pulse>

//  0135 26 13 13 13

	if ( mPulseT[2]>0x0100 && mPulseT[1]<0x0030 && mPulseT[1]>0x0020 && mPulseT[0]<0x0020 && mPulseIndex==0) 
     7b2:	80 91 a8 01 	lds	r24, 0x01A8
     7b6:	90 91 a9 01 	lds	r25, 0x01A9
     7ba:	21 e0       	ldi	r18, 0x01	; 1
     7bc:	81 30       	cpi	r24, 0x01	; 1
     7be:	92 07       	cpc	r25, r18
     7c0:	00 f1       	brcs	.+64     	; 0x802 <__vector_5+0x10c>
     7c2:	80 91 a6 01 	lds	r24, 0x01A6
     7c6:	90 91 a7 01 	lds	r25, 0x01A7
     7ca:	80 33       	cpi	r24, 0x30	; 48
     7cc:	91 05       	cpc	r25, r1
     7ce:	c8 f4       	brcc	.+50     	; 0x802 <__vector_5+0x10c>
     7d0:	80 91 a6 01 	lds	r24, 0x01A6
     7d4:	90 91 a7 01 	lds	r25, 0x01A7
     7d8:	81 32       	cpi	r24, 0x21	; 33
     7da:	91 05       	cpc	r25, r1
     7dc:	90 f0       	brcs	.+36     	; 0x802 <__vector_5+0x10c>
     7de:	80 91 a4 01 	lds	r24, 0x01A4
     7e2:	90 91 a5 01 	lds	r25, 0x01A5
     7e6:	80 32       	cpi	r24, 0x20	; 32
     7e8:	91 05       	cpc	r25, r1
     7ea:	58 f4       	brcc	.+22     	; 0x802 <__vector_5+0x10c>
     7ec:	80 91 aa 01 	lds	r24, 0x01AA
     7f0:	88 23       	and	r24, r24
     7f2:	39 f4       	brne	.+14     	; 0x802 <__vector_5+0x10c>
	{
		mPulseIndex = mCaptureIndex-1;
     7f4:	80 91 84 02 	lds	r24, 0x0284
     7f8:	90 91 85 02 	lds	r25, 0x0285
     7fc:	81 50       	subi	r24, 0x01	; 1
     7fe:	80 93 aa 01 	sts	0x01AA, r24
	}


	mCaptureIndex++;
     802:	80 91 84 02 	lds	r24, 0x0284
     806:	90 91 85 02 	lds	r25, 0x0285
     80a:	01 96       	adiw	r24, 0x01	; 1
     80c:	90 93 85 02 	sts	0x0285, r25
     810:	80 93 84 02 	sts	0x0284, r24
	if (mCaptureIndex > (sizeof(mCapturePulse)/2))
     814:	80 91 84 02 	lds	r24, 0x0284
     818:	90 91 85 02 	lds	r25, 0x0285
     81c:	89 3c       	cpi	r24, 0xC9	; 201
     81e:	91 05       	cpc	r25, r1
     820:	30 f0       	brcs	.+12     	; 0x82e <__vector_5+0x138>
		mCaptureIndex = sizeof(mCapturePulse)/2;
     822:	88 ec       	ldi	r24, 0xC8	; 200
     824:	90 e0       	ldi	r25, 0x00	; 0
     826:	90 93 85 02 	sts	0x0285, r25
     82a:	80 93 84 02 	sts	0x0284, r24

}
     82e:	0f 90       	pop	r0
     830:	0f 90       	pop	r0
     832:	0f 90       	pop	r0
     834:	cf 91       	pop	r28
     836:	df 91       	pop	r29
     838:	ff 91       	pop	r31
     83a:	ef 91       	pop	r30
     83c:	bf 91       	pop	r27
     83e:	af 91       	pop	r26
     840:	9f 91       	pop	r25
     842:	8f 91       	pop	r24
     844:	7f 91       	pop	r23
     846:	6f 91       	pop	r22
     848:	5f 91       	pop	r21
     84a:	4f 91       	pop	r20
     84c:	3f 91       	pop	r19
     84e:	2f 91       	pop	r18
     850:	0f 90       	pop	r0
     852:	0f be       	out	0x3f, r0	; 63
     854:	0f 90       	pop	r0
     856:	1f 90       	pop	r1
     858:	18 95       	reti

0000085a <init_hardware>:



void init_hardware(void)
{
     85a:	df 93       	push	r29
     85c:	cf 93       	push	r28
     85e:	cd b7       	in	r28, 0x3d	; 61
     860:	de b7       	in	r29, 0x3e	; 62

//	init UART

	UCSRA = 0x02; // U2X = 1
     862:	eb e2       	ldi	r30, 0x2B	; 43
     864:	f0 e0       	ldi	r31, 0x00	; 0
     866:	82 e0       	ldi	r24, 0x02	; 2
     868:	80 83       	st	Z, r24
	UCSRB = 0x00;	
     86a:	ea e2       	ldi	r30, 0x2A	; 42
     86c:	f0 e0       	ldi	r31, 0x00	; 0
     86e:	10 82       	st	Z, r1
	UCSRC = 0x86; // No Parity | 1 Stop Bit | 8 Data Bit
     870:	e0 e4       	ldi	r30, 0x40	; 64
     872:	f0 e0       	ldi	r31, 0x00	; 0
     874:	86 e8       	ldi	r24, 0x86	; 134
     876:	80 83       	st	Z, r24
	UBRRH = 0x00; // 115200bps @ 12.00MHz 0x4D=9600 0x33 = 115200
     878:	e0 e4       	ldi	r30, 0x40	; 64
     87a:	f0 e0       	ldi	r31, 0x00	; 0
     87c:	10 82       	st	Z, r1
	UBRRL = 0x0C; // 115200bps @ 12.00MHz 0x4D/9B=9600 ??/0x0C = 115200
     87e:	e9 e2       	ldi	r30, 0x29	; 41
     880:	f0 e0       	ldi	r31, 0x00	; 0
     882:	8c e0       	ldi	r24, 0x0C	; 12
     884:	80 83       	st	Z, r24
	UCSRB = 0x98; // Enable Rx Interrupt, Rx/Tx PIN	
     886:	ea e2       	ldi	r30, 0x2A	; 42
     888:	f0 e0       	ldi	r31, 0x00	; 0
     88a:	88 e9       	ldi	r24, 0x98	; 152
     88c:	80 83       	st	Z, r24

	// Timer/Counter 0 initialization
	// Clock source: System Clock
	// Clock value: 125.000 kHz
	TCCR0=0x05;		// Clk/1024 = 12000000/1024 = 11718.75Hz
     88e:	e3 e5       	ldi	r30, 0x53	; 83
     890:	f0 e0       	ldi	r31, 0x00	; 0
     892:	85 e0       	ldi	r24, 0x05	; 5
     894:	80 83       	st	Z, r24
	TCNT0=0x00;
     896:	e2 e5       	ldi	r30, 0x52	; 82
     898:	f0 e0       	ldi	r31, 0x00	; 0
     89a:	10 82       	st	Z, r1
	TIMSK |= 0x01;	// Turn ON Timer0 Interrup
     89c:	a9 e5       	ldi	r26, 0x59	; 89
     89e:	b0 e0       	ldi	r27, 0x00	; 0
     8a0:	e9 e5       	ldi	r30, 0x59	; 89
     8a2:	f0 e0       	ldi	r31, 0x00	; 0
     8a4:	80 81       	ld	r24, Z
     8a6:	81 60       	ori	r24, 0x01	; 1
     8a8:	8c 93       	st	X, r24

	//  prepare 36kHz for IR - Communication
	TCCR1A = 0b01001000;	// Toggle OC1A on compare
     8aa:	ef e4       	ldi	r30, 0x4F	; 79
     8ac:	f0 e0       	ldi	r31, 0x00	; 0
     8ae:	88 e4       	ldi	r24, 0x48	; 72
     8b0:	80 83       	st	Z, r24
	TCCR1B = 0b00001000;	// CLK=STOP
     8b2:	ee e4       	ldi	r30, 0x4E	; 78
     8b4:	f0 e0       	ldi	r31, 0x00	; 0
     8b6:	88 e0       	ldi	r24, 0x08	; 8
     8b8:	80 83       	st	Z, r24
	OCR1AH  = 0x00; 		// 12MHz / 40Kz / 2 = 150 = 0x0096
     8ba:	eb e4       	ldi	r30, 0x4B	; 75
     8bc:	f0 e0       	ldi	r31, 0x00	; 0
     8be:	10 82       	st	Z, r1
	OCR1AL  = 0x94; 		// 
     8c0:	ea e4       	ldi	r30, 0x4A	; 74
     8c2:	f0 e0       	ldi	r31, 0x00	; 0
     8c4:	84 e9       	ldi	r24, 0x94	; 148
     8c6:	80 83       	st	Z, r24
	TCNT1   = 0x0000;
     8c8:	ec e4       	ldi	r30, 0x4C	; 76
     8ca:	f0 e0       	ldi	r31, 0x00	; 0
     8cc:	11 82       	std	Z+1, r1	; 0x01
     8ce:	10 82       	st	Z, r1
	TIMSK |= 0x10;	// Turn ON Timer0 Interrup
     8d0:	a9 e5       	ldi	r26, 0x59	; 89
     8d2:	b0 e0       	ldi	r27, 0x00	; 0
     8d4:	e9 e5       	ldi	r30, 0x59	; 89
     8d6:	f0 e0       	ldi	r31, 0x00	; 0
     8d8:	80 81       	ld	r24, Z
     8da:	80 61       	ori	r24, 0x10	; 16
     8dc:	8c 93       	st	X, r24


//	init IO
	DDRC = 0x07; 
     8de:	e4 e3       	ldi	r30, 0x34	; 52
     8e0:	f0 e0       	ldi	r31, 0x00	; 0
     8e2:	87 e0       	ldi	r24, 0x07	; 7
     8e4:	80 83       	st	Z, r24
	DDRB = 0x3A;	// PB1,2,3,4,5 
     8e6:	e7 e3       	ldi	r30, 0x37	; 55
     8e8:	f0 e0       	ldi	r31, 0x00	; 0
     8ea:	8a e3       	ldi	r24, 0x3A	; 58
     8ec:	80 83       	st	Z, r24


}
     8ee:	cf 91       	pop	r28
     8f0:	df 91       	pop	r29
     8f2:	08 95       	ret

000008f4 <init_system>:

void init_system(void)
{
     8f4:	df 93       	push	r29
     8f6:	cf 93       	push	r28
     8f8:	0f 92       	push	r0
     8fa:	cd b7       	in	r28, 0x3d	; 61
     8fc:	de b7       	in	r29, 0x3e	; 62
	unsigned char i;
	u_puts(EXIT);
     8fe:	89 ee       	ldi	r24, 0xE9	; 233
     900:	90 e0       	ldi	r25, 0x00	; 0
     902:	fc dc       	rcall	.-1544   	; 0x2fc <u_puts>
	for (i=0; i<sizeof(T_PRONTO_CODE); i++)
     904:	19 82       	std	Y+1, r1	; 0x01
     906:	14 c0       	rjmp	.+40     	; 0x930 <init_system+0x3c>
	{
		mCmdQ[i+1]=T_PRONTO_CODE[i];
     908:	89 81       	ldd	r24, Y+1	; 0x01
     90a:	88 2f       	mov	r24, r24
     90c:	90 e0       	ldi	r25, 0x00	; 0
     90e:	9c 01       	movw	r18, r24
     910:	2f 5f       	subi	r18, 0xFF	; 255
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	89 81       	ldd	r24, Y+1	; 0x01
     916:	88 2f       	mov	r24, r24
     918:	90 e0       	ldi	r25, 0x00	; 0
     91a:	fc 01       	movw	r30, r24
     91c:	ef 56       	subi	r30, 0x6F	; 111
     91e:	ff 4f       	sbci	r31, 0xFF	; 255
     920:	80 81       	ld	r24, Z
     922:	f9 01       	movw	r30, r18
     924:	e2 54       	subi	r30, 0x42	; 66
     926:	fe 4f       	sbci	r31, 0xFE	; 254
     928:	80 83       	st	Z, r24

void init_system(void)
{
	unsigned char i;
	u_puts(EXIT);
	for (i=0; i<sizeof(T_PRONTO_CODE); i++)
     92a:	89 81       	ldd	r24, Y+1	; 0x01
     92c:	8f 5f       	subi	r24, 0xFF	; 255
     92e:	89 83       	std	Y+1, r24	; 0x01
     930:	89 81       	ldd	r24, Y+1	; 0x01
     932:	87 35       	cpi	r24, 0x57	; 87
     934:	48 f3       	brcs	.-46     	; 0x908 <init_system+0x14>
	{
		mCmdQ[i+1]=T_PRONTO_CODE[i];
	}	
	mCmdQ[0] = sizeof(T_PRONTO_CODE)-1;
     936:	86 e5       	ldi	r24, 0x56	; 86
     938:	80 93 be 01 	sts	0x01BE, r24
	mCmdQFlag = 1;
     93c:	81 e0       	ldi	r24, 0x01	; 1
     93e:	80 93 9e 01 	sts	0x019E, r24
//	process_cmd();

	for (i=0; i<=100; i++)
     942:	19 82       	std	Y+1, r1	; 0x01
     944:	0d c0       	rjmp	.+26     	; 0x960 <init_system+0x6c>
	{
		mCapturePulse[i]=0x00;		
     946:	89 81       	ldd	r24, Y+1	; 0x01
     948:	88 2f       	mov	r24, r24
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	88 0f       	add	r24, r24
     94e:	99 1f       	adc	r25, r25
     950:	fc 01       	movw	r30, r24
     952:	ea 57       	subi	r30, 0x7A	; 122
     954:	fd 4f       	sbci	r31, 0xFD	; 253
     956:	11 82       	std	Z+1, r1	; 0x01
     958:	10 82       	st	Z, r1
	}	
	mCmdQ[0] = sizeof(T_PRONTO_CODE)-1;
	mCmdQFlag = 1;
//	process_cmd();

	for (i=0; i<=100; i++)
     95a:	89 81       	ldd	r24, Y+1	; 0x01
     95c:	8f 5f       	subi	r24, 0xFF	; 255
     95e:	89 83       	std	Y+1, r24	; 0x01
     960:	89 81       	ldd	r24, Y+1	; 0x01
     962:	85 36       	cpi	r24, 0x65	; 101
     964:	80 f3       	brcs	.-32     	; 0x946 <init_system+0x52>
	{
		mCapturePulse[i]=0x00;		
	}

//  0135 26 13 13 13 4E 13 26
	i=2;
     966:	82 e0       	ldi	r24, 0x02	; 2
     968:	89 83       	std	Y+1, r24	; 0x01
	mCapturePulse[i]=0x0135; i++;
     96a:	89 81       	ldd	r24, Y+1	; 0x01
     96c:	88 2f       	mov	r24, r24
     96e:	90 e0       	ldi	r25, 0x00	; 0
     970:	88 0f       	add	r24, r24
     972:	99 1f       	adc	r25, r25
     974:	fc 01       	movw	r30, r24
     976:	ea 57       	subi	r30, 0x7A	; 122
     978:	fd 4f       	sbci	r31, 0xFD	; 253
     97a:	85 e3       	ldi	r24, 0x35	; 53
     97c:	91 e0       	ldi	r25, 0x01	; 1
     97e:	91 83       	std	Z+1, r25	; 0x01
     980:	80 83       	st	Z, r24
     982:	89 81       	ldd	r24, Y+1	; 0x01
     984:	8f 5f       	subi	r24, 0xFF	; 255
     986:	89 83       	std	Y+1, r24	; 0x01
	mCapturePulse[i]=0x0026; i++;
     988:	89 81       	ldd	r24, Y+1	; 0x01
     98a:	88 2f       	mov	r24, r24
     98c:	90 e0       	ldi	r25, 0x00	; 0
     98e:	88 0f       	add	r24, r24
     990:	99 1f       	adc	r25, r25
     992:	fc 01       	movw	r30, r24
     994:	ea 57       	subi	r30, 0x7A	; 122
     996:	fd 4f       	sbci	r31, 0xFD	; 253
     998:	86 e2       	ldi	r24, 0x26	; 38
     99a:	90 e0       	ldi	r25, 0x00	; 0
     99c:	91 83       	std	Z+1, r25	; 0x01
     99e:	80 83       	st	Z, r24
     9a0:	89 81       	ldd	r24, Y+1	; 0x01
     9a2:	8f 5f       	subi	r24, 0xFF	; 255
     9a4:	89 83       	std	Y+1, r24	; 0x01
	mCapturePulse[i]=0x0013; i++;
     9a6:	89 81       	ldd	r24, Y+1	; 0x01
     9a8:	88 2f       	mov	r24, r24
     9aa:	90 e0       	ldi	r25, 0x00	; 0
     9ac:	88 0f       	add	r24, r24
     9ae:	99 1f       	adc	r25, r25
     9b0:	fc 01       	movw	r30, r24
     9b2:	ea 57       	subi	r30, 0x7A	; 122
     9b4:	fd 4f       	sbci	r31, 0xFD	; 253
     9b6:	83 e1       	ldi	r24, 0x13	; 19
     9b8:	90 e0       	ldi	r25, 0x00	; 0
     9ba:	91 83       	std	Z+1, r25	; 0x01
     9bc:	80 83       	st	Z, r24
     9be:	89 81       	ldd	r24, Y+1	; 0x01
     9c0:	8f 5f       	subi	r24, 0xFF	; 255
     9c2:	89 83       	std	Y+1, r24	; 0x01
	mCapturePulse[i]=0x0013; i++;
     9c4:	89 81       	ldd	r24, Y+1	; 0x01
     9c6:	88 2f       	mov	r24, r24
     9c8:	90 e0       	ldi	r25, 0x00	; 0
     9ca:	88 0f       	add	r24, r24
     9cc:	99 1f       	adc	r25, r25
     9ce:	fc 01       	movw	r30, r24
     9d0:	ea 57       	subi	r30, 0x7A	; 122
     9d2:	fd 4f       	sbci	r31, 0xFD	; 253
     9d4:	83 e1       	ldi	r24, 0x13	; 19
     9d6:	90 e0       	ldi	r25, 0x00	; 0
     9d8:	91 83       	std	Z+1, r25	; 0x01
     9da:	80 83       	st	Z, r24
     9dc:	89 81       	ldd	r24, Y+1	; 0x01
     9de:	8f 5f       	subi	r24, 0xFF	; 255
     9e0:	89 83       	std	Y+1, r24	; 0x01
	mCapturePulse[i]=0x0013; i++;
     9e2:	89 81       	ldd	r24, Y+1	; 0x01
     9e4:	88 2f       	mov	r24, r24
     9e6:	90 e0       	ldi	r25, 0x00	; 0
     9e8:	88 0f       	add	r24, r24
     9ea:	99 1f       	adc	r25, r25
     9ec:	fc 01       	movw	r30, r24
     9ee:	ea 57       	subi	r30, 0x7A	; 122
     9f0:	fd 4f       	sbci	r31, 0xFD	; 253
     9f2:	83 e1       	ldi	r24, 0x13	; 19
     9f4:	90 e0       	ldi	r25, 0x00	; 0
     9f6:	91 83       	std	Z+1, r25	; 0x01
     9f8:	80 83       	st	Z, r24
     9fa:	89 81       	ldd	r24, Y+1	; 0x01
     9fc:	8f 5f       	subi	r24, 0xFF	; 255
     9fe:	89 83       	std	Y+1, r24	; 0x01
//	i = izuvo_search_header();

//	mZuvoAuto = 1;
//	izuvo_init_capture_pulse();

	mFaucetMode = 0xf0;
     a00:	80 ef       	ldi	r24, 0xF0	; 240
     a02:	80 93 ab 01 	sts	0x01AB, r24
}
     a06:	0f 90       	pop	r0
     a08:	cf 91       	pop	r28
     a0a:	df 91       	pop	r29
     a0c:	08 95       	ret

00000a0e <process_tmr>:


void process_tmr(void)
{
     a0e:	df 93       	push	r29
     a10:	cf 93       	push	r28
     a12:	00 d0       	rcall	.+0      	; 0xa14 <process_tmr+0x6>
     a14:	00 d0       	rcall	.+0      	; 0xa16 <process_tmr+0x8>
     a16:	cd b7       	in	r28, 0x3d	; 61
     a18:	de b7       	in	r29, 0x3e	; 62
	static unsigned int tCnt=0;
	static unsigned char tSecCnt=0;	
	static unsigned char tFaucetCnt=0;
	static unsigned char tFaucetState=0;

	if (mTimer0_Flag==1)	// @ very 196.6ms
     a1a:	80 91 a1 01 	lds	r24, 0x01A1
     a1e:	81 30       	cpi	r24, 0x01	; 1
     a20:	09 f0       	breq	.+2      	; 0xa24 <process_tmr+0x16>
     a22:	fb c0       	rjmp	.+502    	; 0xc1a <process_tmr+0x20c>
//#define  LED_BL 3	  // PB3
//#define  LED_1  2   // PB2
//#define  LED_2  4   // PB4
//#define  LED_3  5   // PB5		

		tFaucetCnt ++;
     a24:	80 91 ae 01 	lds	r24, 0x01AE
     a28:	8f 5f       	subi	r24, 0xFF	; 255
     a2a:	80 93 ae 01 	sts	0x01AE, r24

		if (tFaucetCnt >= 10)
     a2e:	80 91 ae 01 	lds	r24, 0x01AE
     a32:	8a 30       	cpi	r24, 0x0A	; 10
     a34:	08 f4       	brcc	.+2      	; 0xa38 <process_tmr+0x2a>
     a36:	45 c0       	rjmp	.+138    	; 0xac2 <process_tmr+0xb4>
		{
			tFaucetCnt=0;
     a38:	10 92 ae 01 	sts	0x01AE, r1
			tFaucetState ++;
     a3c:	80 91 ad 01 	lds	r24, 0x01AD
     a40:	8f 5f       	subi	r24, 0xFF	; 255
     a42:	80 93 ad 01 	sts	0x01AD, r24
			if (tFaucetState>3)
     a46:	80 91 ad 01 	lds	r24, 0x01AD
     a4a:	84 30       	cpi	r24, 0x04	; 4
     a4c:	10 f0       	brcs	.+4      	; 0xa52 <process_tmr+0x44>
			{
				tFaucetState = 0;
     a4e:	10 92 ad 01 	sts	0x01AD, r1
			}

			if ((mFaucetMode & 0xf0) == 0xf0)
     a52:	80 91 ab 01 	lds	r24, 0x01AB
     a56:	88 2f       	mov	r24, r24
     a58:	90 e0       	ldi	r25, 0x00	; 0
     a5a:	80 7f       	andi	r24, 0xF0	; 240
     a5c:	90 70       	andi	r25, 0x00	; 0
     a5e:	80 3f       	cpi	r24, 0xF0	; 240
     a60:	91 05       	cpc	r25, r1
     a62:	79 f5       	brne	.+94     	; 0xac2 <process_tmr+0xb4>
			{
				mFaucetBL += 0x02;
     a64:	80 91 ac 01 	lds	r24, 0x01AC
     a68:	8e 5f       	subi	r24, 0xFE	; 254
     a6a:	80 93 ac 01 	sts	0x01AC, r24
				mFaucetMode &= 0xf0;
     a6e:	80 91 ab 01 	lds	r24, 0x01AB
     a72:	80 7f       	andi	r24, 0xF0	; 240
     a74:	80 93 ab 01 	sts	0x01AB, r24

				switch (tFaucetState)
     a78:	80 91 ad 01 	lds	r24, 0x01AD
     a7c:	28 2f       	mov	r18, r24
     a7e:	30 e0       	ldi	r19, 0x00	; 0
     a80:	3c 83       	std	Y+4, r19	; 0x04
     a82:	2b 83       	std	Y+3, r18	; 0x03
     a84:	8b 81       	ldd	r24, Y+3	; 0x03
     a86:	9c 81       	ldd	r25, Y+4	; 0x04
     a88:	81 30       	cpi	r24, 0x01	; 1
     a8a:	91 05       	cpc	r25, r1
     a8c:	79 f0       	breq	.+30     	; 0xaac <process_tmr+0x9e>
     a8e:	2b 81       	ldd	r18, Y+3	; 0x03
     a90:	3c 81       	ldd	r19, Y+4	; 0x04
     a92:	22 30       	cpi	r18, 0x02	; 2
     a94:	31 05       	cpc	r19, r1
     a96:	81 f0       	breq	.+32     	; 0xab8 <process_tmr+0xaa>
     a98:	8b 81       	ldd	r24, Y+3	; 0x03
     a9a:	9c 81       	ldd	r25, Y+4	; 0x04
     a9c:	00 97       	sbiw	r24, 0x00	; 0
     a9e:	89 f4       	brne	.+34     	; 0xac2 <process_tmr+0xb4>
				{
					case 0:
						mFaucetMode += 1;
     aa0:	80 91 ab 01 	lds	r24, 0x01AB
     aa4:	8f 5f       	subi	r24, 0xFF	; 255
     aa6:	80 93 ab 01 	sts	0x01AB, r24
     aaa:	0b c0       	rjmp	.+22     	; 0xac2 <process_tmr+0xb4>
						break;
					case 1:
						mFaucetMode += 2;
     aac:	80 91 ab 01 	lds	r24, 0x01AB
     ab0:	8e 5f       	subi	r24, 0xFE	; 254
     ab2:	80 93 ab 01 	sts	0x01AB, r24
     ab6:	05 c0       	rjmp	.+10     	; 0xac2 <process_tmr+0xb4>
						break;
					case 2:
						mFaucetMode += 4;
     ab8:	80 91 ab 01 	lds	r24, 0x01AB
     abc:	8c 5f       	subi	r24, 0xFC	; 252
     abe:	80 93 ab 01 	sts	0x01AB, r24
				}

			}		
		}

		if ((mFaucetMode & 0x01) ==0)
     ac2:	80 91 ab 01 	lds	r24, 0x01AB
     ac6:	88 2f       	mov	r24, r24
     ac8:	90 e0       	ldi	r25, 0x00	; 0
     aca:	81 70       	andi	r24, 0x01	; 1
     acc:	90 70       	andi	r25, 0x00	; 0
     ace:	00 97       	sbiw	r24, 0x00	; 0
     ad0:	41 f4       	brne	.+16     	; 0xae2 <process_tmr+0xd4>
		{
			PORTB |= (1<< LED_1);
     ad2:	a8 e3       	ldi	r26, 0x38	; 56
     ad4:	b0 e0       	ldi	r27, 0x00	; 0
     ad6:	e8 e3       	ldi	r30, 0x38	; 56
     ad8:	f0 e0       	ldi	r31, 0x00	; 0
     ada:	80 81       	ld	r24, Z
     adc:	84 60       	ori	r24, 0x04	; 4
     ade:	8c 93       	st	X, r24
     ae0:	07 c0       	rjmp	.+14     	; 0xaf0 <process_tmr+0xe2>
		}
		else
		{
			PORTB &= ~(1<< LED_1);
     ae2:	a8 e3       	ldi	r26, 0x38	; 56
     ae4:	b0 e0       	ldi	r27, 0x00	; 0
     ae6:	e8 e3       	ldi	r30, 0x38	; 56
     ae8:	f0 e0       	ldi	r31, 0x00	; 0
     aea:	80 81       	ld	r24, Z
     aec:	8b 7f       	andi	r24, 0xFB	; 251
     aee:	8c 93       	st	X, r24
		}
		

		if ((mFaucetMode & 0x02) ==0)
     af0:	80 91 ab 01 	lds	r24, 0x01AB
     af4:	88 2f       	mov	r24, r24
     af6:	90 e0       	ldi	r25, 0x00	; 0
     af8:	82 70       	andi	r24, 0x02	; 2
     afa:	90 70       	andi	r25, 0x00	; 0
     afc:	00 97       	sbiw	r24, 0x00	; 0
     afe:	41 f4       	brne	.+16     	; 0xb10 <process_tmr+0x102>
		{
			PORTB |= (1<< LED_2);
     b00:	a8 e3       	ldi	r26, 0x38	; 56
     b02:	b0 e0       	ldi	r27, 0x00	; 0
     b04:	e8 e3       	ldi	r30, 0x38	; 56
     b06:	f0 e0       	ldi	r31, 0x00	; 0
     b08:	80 81       	ld	r24, Z
     b0a:	80 61       	ori	r24, 0x10	; 16
     b0c:	8c 93       	st	X, r24
     b0e:	07 c0       	rjmp	.+14     	; 0xb1e <process_tmr+0x110>
		}
		else
		{
			PORTB &= ~(1<< LED_2);
     b10:	a8 e3       	ldi	r26, 0x38	; 56
     b12:	b0 e0       	ldi	r27, 0x00	; 0
     b14:	e8 e3       	ldi	r30, 0x38	; 56
     b16:	f0 e0       	ldi	r31, 0x00	; 0
     b18:	80 81       	ld	r24, Z
     b1a:	8f 7e       	andi	r24, 0xEF	; 239
     b1c:	8c 93       	st	X, r24
		}

		if ((mFaucetMode & 0x04) ==0)
     b1e:	80 91 ab 01 	lds	r24, 0x01AB
     b22:	88 2f       	mov	r24, r24
     b24:	90 e0       	ldi	r25, 0x00	; 0
     b26:	84 70       	andi	r24, 0x04	; 4
     b28:	90 70       	andi	r25, 0x00	; 0
     b2a:	00 97       	sbiw	r24, 0x00	; 0
     b2c:	41 f4       	brne	.+16     	; 0xb3e <process_tmr+0x130>
		{
			PORTB |= (1<< LED_3);
     b2e:	a8 e3       	ldi	r26, 0x38	; 56
     b30:	b0 e0       	ldi	r27, 0x00	; 0
     b32:	e8 e3       	ldi	r30, 0x38	; 56
     b34:	f0 e0       	ldi	r31, 0x00	; 0
     b36:	80 81       	ld	r24, Z
     b38:	80 62       	ori	r24, 0x20	; 32
     b3a:	8c 93       	st	X, r24
     b3c:	07 c0       	rjmp	.+14     	; 0xb4c <process_tmr+0x13e>
		}
		else
		{
			PORTB &= ~(1<< LED_3);
     b3e:	a8 e3       	ldi	r26, 0x38	; 56
     b40:	b0 e0       	ldi	r27, 0x00	; 0
     b42:	e8 e3       	ldi	r30, 0x38	; 56
     b44:	f0 e0       	ldi	r31, 0x00	; 0
     b46:	80 81       	ld	r24, Z
     b48:	8f 7d       	andi	r24, 0xDF	; 223
     b4a:	8c 93       	st	X, r24
		}	
			
		if ((mFaucetMode & 0xf0) ==0) 
     b4c:	80 91 ab 01 	lds	r24, 0x01AB
     b50:	88 2f       	mov	r24, r24
     b52:	90 e0       	ldi	r25, 0x00	; 0
     b54:	80 7f       	andi	r24, 0xF0	; 240
     b56:	90 70       	andi	r25, 0x00	; 0
     b58:	00 97       	sbiw	r24, 0x00	; 0
     b5a:	b9 f4       	brne	.+46     	; 0xb8a <process_tmr+0x17c>
		{
			if ((mFaucetMode & 0x08) == 0)
     b5c:	80 91 ab 01 	lds	r24, 0x01AB
     b60:	88 2f       	mov	r24, r24
     b62:	90 e0       	ldi	r25, 0x00	; 0
     b64:	88 70       	andi	r24, 0x08	; 8
     b66:	90 70       	andi	r25, 0x00	; 0
     b68:	00 97       	sbiw	r24, 0x00	; 0
     b6a:	41 f4       	brne	.+16     	; 0xb7c <process_tmr+0x16e>
			{
				PORTB |= (1<< LED_BL);
     b6c:	a8 e3       	ldi	r26, 0x38	; 56
     b6e:	b0 e0       	ldi	r27, 0x00	; 0
     b70:	e8 e3       	ldi	r30, 0x38	; 56
     b72:	f0 e0       	ldi	r31, 0x00	; 0
     b74:	80 81       	ld	r24, Z
     b76:	88 60       	ori	r24, 0x08	; 8
     b78:	8c 93       	st	X, r24
     b7a:	07 c0       	rjmp	.+14     	; 0xb8a <process_tmr+0x17c>
			}
			else
			{
				PORTB &= ~(1<< LED_BL);
     b7c:	a8 e3       	ldi	r26, 0x38	; 56
     b7e:	b0 e0       	ldi	r27, 0x00	; 0
     b80:	e8 e3       	ldi	r30, 0x38	; 56
     b82:	f0 e0       	ldi	r31, 0x00	; 0
     b84:	80 81       	ld	r24, Z
     b86:	87 7f       	andi	r24, 0xF7	; 247
     b88:	8c 93       	st	X, r24
		}


		

		mTimer0_Flag=0;
     b8a:	10 92 a1 01 	sts	0x01A1, r1
		tSecCnt++;
     b8e:	80 91 af 01 	lds	r24, 0x01AF
     b92:	8f 5f       	subi	r24, 0xFF	; 255
     b94:	80 93 af 01 	sts	0x01AF, r24
		if (tSecCnt>=10)
     b98:	80 91 af 01 	lds	r24, 0x01AF
     b9c:	8a 30       	cpi	r24, 0x0A	; 10
     b9e:	10 f0       	brcs	.+4      	; 0xba4 <process_tmr+0x196>
		{
			tSecCnt=0;
     ba0:	10 92 af 01 	sts	0x01AF, r1
//			if (mLinuxMode!=2)
//				u_puts(EXIT);
		}

		tCnt ++	;
     ba4:	80 91 b0 01 	lds	r24, 0x01B0
     ba8:	90 91 b1 01 	lds	r25, 0x01B1
     bac:	01 96       	adiw	r24, 0x01	; 1
     bae:	90 93 b1 01 	sts	0x01B1, r25
     bb2:	80 93 b0 01 	sts	0x01B0, r24
		if (mLinuxMode!=2)	
     bb6:	80 91 e8 00 	lds	r24, 0x00E8
     bba:	82 30       	cpi	r24, 0x02	; 2
     bbc:	31 f0       	breq	.+12     	; 0xbca <process_tmr+0x1bc>
		{
			tCnt=0xff;
     bbe:	8f ef       	ldi	r24, 0xFF	; 255
     bc0:	90 e0       	ldi	r25, 0x00	; 0
     bc2:	90 93 b1 01 	sts	0x01B1, r25
     bc6:	80 93 b0 01 	sts	0x01B0, r24
		}

		if (tCnt>=10)		
     bca:	80 91 b0 01 	lds	r24, 0x01B0
     bce:	90 91 b1 01 	lds	r25, 0x01B1
     bd2:	8a 30       	cpi	r24, 0x0A	; 10
     bd4:	91 05       	cpc	r25, r1
     bd6:	60 f0       	brcs	.+24     	; 0xbf0 <process_tmr+0x1e2>
		{
			tCnt=0;
     bd8:	10 92 b1 01 	sts	0x01B1, r1
     bdc:	10 92 b0 01 	sts	0x01B0, r1
			PORTC ^= (1 << LED1);
     be0:	a5 e3       	ldi	r26, 0x35	; 53
     be2:	b0 e0       	ldi	r27, 0x00	; 0
     be4:	e5 e3       	ldi	r30, 0x35	; 53
     be6:	f0 e0       	ldi	r31, 0x00	; 0
     be8:	90 81       	ld	r25, Z
     bea:	81 e0       	ldi	r24, 0x01	; 1
     bec:	89 27       	eor	r24, r25
     bee:	8c 93       	st	X, r24
		}
		switch (mFunctionMode)
     bf0:	80 91 a3 01 	lds	r24, 0x01A3
     bf4:	28 2f       	mov	r18, r24
     bf6:	30 e0       	ldi	r19, 0x00	; 0
     bf8:	3a 83       	std	Y+2, r19	; 0x02
     bfa:	29 83       	std	Y+1, r18	; 0x01
     bfc:	89 81       	ldd	r24, Y+1	; 0x01
     bfe:	9a 81       	ldd	r25, Y+2	; 0x02
     c00:	81 30       	cpi	r24, 0x01	; 1
     c02:	91 05       	cpc	r25, r1
     c04:	51 f0       	breq	.+20     	; 0xc1a <process_tmr+0x20c>
     c06:	29 81       	ldd	r18, Y+1	; 0x01
     c08:	3a 81       	ldd	r19, Y+2	; 0x02
     c0a:	22 30       	cpi	r18, 0x02	; 2
     c0c:	31 05       	cpc	r19, r1
     c0e:	29 f4       	brne	.+10     	; 0xc1a <process_tmr+0x20c>
				break;
			case 1:
//				ir_send_pulseEx();
				break;
			case 2:
				if (mZuvoAuto==0)
     c10:	80 91 bb 01 	lds	r24, 0x01BB
     c14:	88 23       	and	r24, r24
     c16:	09 f4       	brne	.+2      	; 0xc1a <process_tmr+0x20c>
				{
					ir_capture_pulse();
     c18:	d4 d5       	rcall	.+2984   	; 0x17c2 <ir_capture_pulse>
			default:
				break;
		}
	}

}
     c1a:	0f 90       	pop	r0
     c1c:	0f 90       	pop	r0
     c1e:	0f 90       	pop	r0
     c20:	0f 90       	pop	r0
     c22:	cf 91       	pop	r28
     c24:	df 91       	pop	r29
     c26:	08 95       	ret

00000c28 <process_cmd>:

void process_cmd(void)
{
     c28:	df 93       	push	r29
     c2a:	cf 93       	push	r28
     c2c:	0f 92       	push	r0
     c2e:	cd b7       	in	r28, 0x3d	; 61
     c30:	de b7       	in	r29, 0x3e	; 62
	unsigned char index;

//	if (mCmdQ[0]>=0x80)	// Message available for process
	if (mCmdQFlag==1)	// Message available for process
     c32:	80 91 9e 01 	lds	r24, 0x019E
     c36:	81 30       	cpi	r24, 0x01	; 1
     c38:	71 f5       	brne	.+92     	; 0xc96 <process_cmd+0x6e>
	{
//		index = mCmdQ[0] & 0x7f;
		index = mCmdQ[0];
     c3a:	80 91 be 01 	lds	r24, 0x01BE
     c3e:	89 83       	std	Y+1, r24	; 0x01
		PORTC ^=(1 << LED1);
     c40:	a5 e3       	ldi	r26, 0x35	; 53
     c42:	b0 e0       	ldi	r27, 0x00	; 0
     c44:	e5 e3       	ldi	r30, 0x35	; 53
     c46:	f0 e0       	ldi	r31, 0x00	; 0
     c48:	90 81       	ld	r25, Z
     c4a:	81 e0       	ldi	r24, 0x01	; 1
     c4c:	89 27       	eor	r24, r25
     c4e:	8c 93       	st	X, r24

		// Valid message neeed to have at least FOUR character
		if (index>=3) 
     c50:	89 81       	ldd	r24, Y+1	; 0x01
     c52:	83 30       	cpi	r24, 0x03	; 3
     c54:	e0 f0       	brcs	.+56     	; 0xc8e <process_cmd+0x66>
		{
			if (mLinuxMode<=0x01)
     c56:	80 91 e8 00 	lds	r24, 0x00E8
     c5a:	82 30       	cpi	r24, 0x02	; 2
     c5c:	20 f4       	brcc	.+8      	; 0xc66 <process_cmd+0x3e>
				process_cmd_linux(mLinuxMode);
     c5e:	80 91 e8 00 	lds	r24, 0x00E8
     c62:	1d d0       	rcall	.+58     	; 0xc9e <process_cmd_linux>
     c64:	14 c0       	rjmp	.+40     	; 0xc8e <process_cmd+0x66>
			else if ((mCmdQ[1]=='~') && (mCmdQ[index]=='~'))
     c66:	80 91 bf 01 	lds	r24, 0x01BF
     c6a:	8e 37       	cpi	r24, 0x7E	; 126
     c6c:	81 f4       	brne	.+32     	; 0xc8e <process_cmd+0x66>
     c6e:	89 81       	ldd	r24, Y+1	; 0x01
     c70:	88 2f       	mov	r24, r24
     c72:	90 e0       	ldi	r25, 0x00	; 0
     c74:	fc 01       	movw	r30, r24
     c76:	e2 54       	subi	r30, 0x42	; 66
     c78:	fe 4f       	sbci	r31, 0xFE	; 254
     c7a:	80 81       	ld	r24, Z
     c7c:	8e 37       	cpi	r24, 0x7E	; 126
     c7e:	39 f4       	brne	.+14     	; 0xc8e <process_cmd+0x66>
				process_cmd_hal(&mCmdQ[2],index-2);
     c80:	89 81       	ldd	r24, Y+1	; 0x01
     c82:	28 2f       	mov	r18, r24
     c84:	22 50       	subi	r18, 0x02	; 2
     c86:	80 ec       	ldi	r24, 0xC0	; 192
     c88:	91 e0       	ldi	r25, 0x01	; 1
     c8a:	62 2f       	mov	r22, r18
     c8c:	3b d0       	rcall	.+118    	; 0xd04 <process_cmd_hal>

		}
		mCmdQ[0]=0;		
     c8e:	10 92 be 01 	sts	0x01BE, r1
		mCmdQFlag=0;
     c92:	10 92 9e 01 	sts	0x019E, r1
	}
}
     c96:	0f 90       	pop	r0
     c98:	cf 91       	pop	r28
     c9a:	df 91       	pop	r29
     c9c:	08 95       	ret

00000c9e <process_cmd_linux>:

void process_cmd_linux(unsigned char iMode)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	00 d0       	rcall	.+0      	; 0xca4 <process_cmd_linux+0x6>
     ca4:	0f 92       	push	r0
     ca6:	cd b7       	in	r28, 0x3d	; 61
     ca8:	de b7       	in	r29, 0x3e	; 62
     caa:	89 83       	std	Y+1, r24	; 0x01
	switch (iMode)
     cac:	89 81       	ldd	r24, Y+1	; 0x01
     cae:	28 2f       	mov	r18, r24
     cb0:	30 e0       	ldi	r19, 0x00	; 0
     cb2:	3b 83       	std	Y+3, r19	; 0x03
     cb4:	2a 83       	std	Y+2, r18	; 0x02
     cb6:	8a 81       	ldd	r24, Y+2	; 0x02
     cb8:	9b 81       	ldd	r25, Y+3	; 0x03
     cba:	00 97       	sbiw	r24, 0x00	; 0
     cbc:	31 f0       	breq	.+12     	; 0xcca <process_cmd_linux+0x2c>
     cbe:	2a 81       	ldd	r18, Y+2	; 0x02
     cc0:	3b 81       	ldd	r19, Y+3	; 0x03
     cc2:	21 30       	cpi	r18, 0x01	; 1
     cc4:	31 05       	cpc	r19, r1
     cc6:	59 f0       	breq	.+22     	; 0xcde <process_cmd_linux+0x40>
     cc8:	14 c0       	rjmp	.+40     	; 0xcf2 <process_cmd_linux+0x54>
	{
		case 0x00:
			mLinuxMode = 0x01;
     cca:	81 e0       	ldi	r24, 0x01	; 1
     ccc:	80 93 e8 00 	sts	0x00E8, r24
			u_puts(mLinux_user);
     cd0:	81 e7       	ldi	r24, 0x71	; 113
     cd2:	90 e0       	ldi	r25, 0x00	; 0
     cd4:	13 db       	rcall	.-2522   	; 0x2fc <u_puts>
			u_puts("\r\n");
     cd6:	82 ef       	ldi	r24, 0xF2	; 242
     cd8:	90 e0       	ldi	r25, 0x00	; 0
     cda:	10 db       	rcall	.-2528   	; 0x2fc <u_puts>
     cdc:	0d c0       	rjmp	.+26     	; 0xcf8 <process_cmd_linux+0x5a>
			break;

		case 0x01:
			mLinuxMode = 0x02;
     cde:	82 e0       	ldi	r24, 0x02	; 2
     ce0:	80 93 e8 00 	sts	0x00E8, r24
			u_puts(mLinux_passwd);
     ce4:	81 e8       	ldi	r24, 0x81	; 129
     ce6:	90 e0       	ldi	r25, 0x00	; 0
     ce8:	09 db       	rcall	.-2542   	; 0x2fc <u_puts>
			u_puts("\r\n");
     cea:	82 ef       	ldi	r24, 0xF2	; 242
     cec:	90 e0       	ldi	r25, 0x00	; 0
     cee:	06 db       	rcall	.-2548   	; 0x2fc <u_puts>
     cf0:	03 c0       	rjmp	.+6      	; 0xcf8 <process_cmd_linux+0x5a>
			break;

		default:
			mLinuxMode=0xff;
     cf2:	8f ef       	ldi	r24, 0xFF	; 255
     cf4:	80 93 e8 00 	sts	0x00E8, r24
	}

}
     cf8:	0f 90       	pop	r0
     cfa:	0f 90       	pop	r0
     cfc:	0f 90       	pop	r0
     cfe:	cf 91       	pop	r28
     d00:	df 91       	pop	r29
     d02:	08 95       	ret

00000d04 <process_cmd_hal>:

void process_cmd_hal(unsigned char *sptr, unsigned char len)
{
     d04:	df 93       	push	r29
     d06:	cf 93       	push	r28
     d08:	cd b7       	in	r28, 0x3d	; 61
     d0a:	de b7       	in	r29, 0x3e	; 62
     d0c:	29 97       	sbiw	r28, 0x09	; 9
     d0e:	0f b6       	in	r0, 0x3f	; 63
     d10:	f8 94       	cli
     d12:	de bf       	out	0x3e, r29	; 62
     d14:	0f be       	out	0x3f, r0	; 63
     d16:	cd bf       	out	0x3d, r28	; 61
     d18:	9e 83       	std	Y+6, r25	; 0x06
     d1a:	8d 83       	std	Y+5, r24	; 0x05
     d1c:	6f 83       	std	Y+7, r22	; 0x07

	unsigned char i,j;
	unsigned char tCmd;
	char tmp;

	tCmd=u_toupper(*sptr);
     d1e:	ed 81       	ldd	r30, Y+5	; 0x05
     d20:	fe 81       	ldd	r31, Y+6	; 0x06
     d22:	80 81       	ld	r24, Z
     d24:	07 db       	rcall	.-2546   	; 0x334 <u_toupper>
     d26:	8a 83       	std	Y+2, r24	; 0x02
	mCmdCnt ++;
     d28:	80 91 9f 01 	lds	r24, 0x019F
     d2c:	90 91 a0 01 	lds	r25, 0x01A0
     d30:	01 96       	adiw	r24, 0x01	; 1
     d32:	90 93 a0 01 	sts	0x01A0, r25
     d36:	80 93 9f 01 	sts	0x019F, r24
	switch (tCmd)
     d3a:	8a 81       	ldd	r24, Y+2	; 0x02
     d3c:	28 2f       	mov	r18, r24
     d3e:	30 e0       	ldi	r19, 0x00	; 0
     d40:	39 87       	std	Y+9, r19	; 0x09
     d42:	28 87       	std	Y+8, r18	; 0x08
     d44:	88 85       	ldd	r24, Y+8	; 0x08
     d46:	99 85       	ldd	r25, Y+9	; 0x09
     d48:	83 35       	cpi	r24, 0x53	; 83
     d4a:	91 05       	cpc	r25, r1
     d4c:	09 f4       	brne	.+2      	; 0xd50 <process_cmd_hal+0x4c>
     d4e:	cd c0       	rjmp	.+410    	; 0xeea <process_cmd_hal+0x1e6>
     d50:	28 85       	ldd	r18, Y+8	; 0x08
     d52:	39 85       	ldd	r19, Y+9	; 0x09
     d54:	24 35       	cpi	r18, 0x54	; 84
     d56:	31 05       	cpc	r19, r1
     d58:	9c f4       	brge	.+38     	; 0xd80 <process_cmd_hal+0x7c>
     d5a:	88 85       	ldd	r24, Y+8	; 0x08
     d5c:	99 85       	ldd	r25, Y+9	; 0x09
     d5e:	8c 34       	cpi	r24, 0x4C	; 76
     d60:	91 05       	cpc	r25, r1
     d62:	09 f4       	brne	.+2      	; 0xd66 <process_cmd_hal+0x62>
     d64:	45 c0       	rjmp	.+138    	; 0xdf0 <process_cmd_hal+0xec>
     d66:	28 85       	ldd	r18, Y+8	; 0x08
     d68:	39 85       	ldd	r19, Y+9	; 0x09
     d6a:	22 35       	cpi	r18, 0x52	; 82
     d6c:	31 05       	cpc	r19, r1
     d6e:	09 f4       	brne	.+2      	; 0xd72 <process_cmd_hal+0x6e>
     d70:	eb c0       	rjmp	.+470    	; 0xf48 <process_cmd_hal+0x244>
     d72:	88 85       	ldd	r24, Y+8	; 0x08
     d74:	99 85       	ldd	r25, Y+9	; 0x09
     d76:	86 34       	cpi	r24, 0x46	; 70
     d78:	91 05       	cpc	r25, r1
     d7a:	09 f4       	brne	.+2      	; 0xd7e <process_cmd_hal+0x7a>
     d7c:	e9 c0       	rjmp	.+466    	; 0xf50 <process_cmd_hal+0x24c>
     d7e:	4a c1       	rjmp	.+660    	; 0x1014 <process_cmd_hal+0x310>
     d80:	28 85       	ldd	r18, Y+8	; 0x08
     d82:	39 85       	ldd	r19, Y+9	; 0x09
     d84:	26 35       	cpi	r18, 0x56	; 86
     d86:	31 05       	cpc	r19, r1
     d88:	09 f4       	brne	.+2      	; 0xd8c <process_cmd_hal+0x88>
     d8a:	d1 c0       	rjmp	.+418    	; 0xf2e <process_cmd_hal+0x22a>
     d8c:	88 85       	ldd	r24, Y+8	; 0x08
     d8e:	99 85       	ldd	r25, Y+9	; 0x09
     d90:	87 35       	cpi	r24, 0x57	; 87
     d92:	91 05       	cpc	r25, r1
     d94:	3c f4       	brge	.+14     	; 0xda4 <process_cmd_hal+0xa0>
     d96:	28 85       	ldd	r18, Y+8	; 0x08
     d98:	39 85       	ldd	r19, Y+9	; 0x09
     d9a:	24 35       	cpi	r18, 0x54	; 84
     d9c:	31 05       	cpc	r19, r1
     d9e:	09 f4       	brne	.+2      	; 0xda2 <process_cmd_hal+0x9e>
     da0:	1d c1       	rjmp	.+570    	; 0xfdc <process_cmd_hal+0x2d8>
     da2:	38 c1       	rjmp	.+624    	; 0x1014 <process_cmd_hal+0x310>
     da4:	88 85       	ldd	r24, Y+8	; 0x08
     da6:	99 85       	ldd	r25, Y+9	; 0x09
     da8:	8a 35       	cpi	r24, 0x5A	; 90
     daa:	91 05       	cpc	r25, r1
     dac:	09 f4       	brne	.+2      	; 0xdb0 <process_cmd_hal+0xac>
     dae:	04 c1       	rjmp	.+520    	; 0xfb8 <process_cmd_hal+0x2b4>
     db0:	28 85       	ldd	r18, Y+8	; 0x08
     db2:	39 85       	ldd	r19, Y+9	; 0x09
     db4:	2e 37       	cpi	r18, 0x7E	; 126
     db6:	31 05       	cpc	r19, r1
     db8:	09 f0       	breq	.+2      	; 0xdbc <process_cmd_hal+0xb8>
     dba:	2c c1       	rjmp	.+600    	; 0x1014 <process_cmd_hal+0x310>
	{
		case '~':	// Echo message back
			for (i=1; i<len; i++)
     dbc:	81 e0       	ldi	r24, 0x01	; 1
     dbe:	8c 83       	std	Y+4, r24	; 0x04
     dc0:	0f c0       	rjmp	.+30     	; 0xde0 <process_cmd_hal+0xdc>
			{
				tmp = *(sptr+i);
     dc2:	8c 81       	ldd	r24, Y+4	; 0x04
     dc4:	28 2f       	mov	r18, r24
     dc6:	30 e0       	ldi	r19, 0x00	; 0
     dc8:	8d 81       	ldd	r24, Y+5	; 0x05
     dca:	9e 81       	ldd	r25, Y+6	; 0x06
     dcc:	fc 01       	movw	r30, r24
     dce:	e2 0f       	add	r30, r18
     dd0:	f3 1f       	adc	r31, r19
     dd2:	80 81       	ld	r24, Z
     dd4:	89 83       	std	Y+1, r24	; 0x01
				u_putch(tmp);
     dd6:	89 81       	ldd	r24, Y+1	; 0x01
     dd8:	73 da       	rcall	.-2842   	; 0x2c0 <u_putch>
	tCmd=u_toupper(*sptr);
	mCmdCnt ++;
	switch (tCmd)
	{
		case '~':	// Echo message back
			for (i=1; i<len; i++)
     dda:	8c 81       	ldd	r24, Y+4	; 0x04
     ddc:	8f 5f       	subi	r24, 0xFF	; 255
     dde:	8c 83       	std	Y+4, r24	; 0x04
     de0:	9c 81       	ldd	r25, Y+4	; 0x04
     de2:	8f 81       	ldd	r24, Y+7	; 0x07
     de4:	98 17       	cp	r25, r24
     de6:	68 f3       	brcs	.-38     	; 0xdc2 <process_cmd_hal+0xbe>
			{
				tmp = *(sptr+i);
				u_putch(tmp);
			}
			u_puts("\r\n");
     de8:	82 ef       	ldi	r24, 0xF2	; 242
     dea:	90 e0       	ldi	r25, 0x00	; 0
     dec:	87 da       	rcall	.-2802   	; 0x2fc <u_puts>
     dee:	12 c1       	rjmp	.+548    	; 0x1014 <process_cmd_hal+0x310>
			break;

		case 'L':	// Login information
			for (i=1; i<len; i++)
     df0:	81 e0       	ldi	r24, 0x01	; 1
     df2:	8c 83       	std	Y+4, r24	; 0x04
     df4:	10 c0       	rjmp	.+32     	; 0xe16 <process_cmd_hal+0x112>
			{
				tmp = *(sptr+i);
     df6:	8c 81       	ldd	r24, Y+4	; 0x04
     df8:	28 2f       	mov	r18, r24
     dfa:	30 e0       	ldi	r19, 0x00	; 0
     dfc:	8d 81       	ldd	r24, Y+5	; 0x05
     dfe:	9e 81       	ldd	r25, Y+6	; 0x06
     e00:	fc 01       	movw	r30, r24
     e02:	e2 0f       	add	r30, r18
     e04:	f3 1f       	adc	r31, r19
     e06:	80 81       	ld	r24, Z
     e08:	89 83       	std	Y+1, r24	; 0x01
				if (tmp==' ')
     e0a:	89 81       	ldd	r24, Y+1	; 0x01
     e0c:	80 32       	cpi	r24, 0x20	; 32
     e0e:	39 f0       	breq	.+14     	; 0xe1e <process_cmd_hal+0x11a>
			}
			u_puts("\r\n");
			break;

		case 'L':	// Login information
			for (i=1; i<len; i++)
     e10:	8c 81       	ldd	r24, Y+4	; 0x04
     e12:	8f 5f       	subi	r24, 0xFF	; 255
     e14:	8c 83       	std	Y+4, r24	; 0x04
     e16:	9c 81       	ldd	r25, Y+4	; 0x04
     e18:	8f 81       	ldd	r24, Y+7	; 0x07
     e1a:	98 17       	cp	r25, r24
     e1c:	60 f3       	brcs	.-40     	; 0xdf6 <process_cmd_hal+0xf2>
				tmp = *(sptr+i);
				if (tmp==' ')
					break;
			}

			if (i<(len-1))
     e1e:	8c 81       	ldd	r24, Y+4	; 0x04
     e20:	28 2f       	mov	r18, r24
     e22:	30 e0       	ldi	r19, 0x00	; 0
     e24:	8f 81       	ldd	r24, Y+7	; 0x07
     e26:	88 2f       	mov	r24, r24
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	01 97       	sbiw	r24, 0x01	; 1
     e2c:	28 17       	cp	r18, r24
     e2e:	39 07       	cpc	r19, r25
     e30:	0c f0       	brlt	.+2      	; 0xe34 <process_cmd_hal+0x130>
     e32:	f0 c0       	rjmp	.+480    	; 0x1014 <process_cmd_hal+0x310>
			{
				for (j=0; j<sizeof(mLinux_user); j++)
     e34:	1b 82       	std	Y+3, r1	; 0x03
     e36:	11 c0       	rjmp	.+34     	; 0xe5a <process_cmd_hal+0x156>
				{
					mLinux_user[j]=0x00;
     e38:	8b 81       	ldd	r24, Y+3	; 0x03
     e3a:	88 2f       	mov	r24, r24
     e3c:	90 e0       	ldi	r25, 0x00	; 0
     e3e:	fc 01       	movw	r30, r24
     e40:	ef 58       	subi	r30, 0x8F	; 143
     e42:	ff 4f       	sbci	r31, 0xFF	; 255
     e44:	10 82       	st	Z, r1
					mLinux_passwd[j]=0x00;
     e46:	8b 81       	ldd	r24, Y+3	; 0x03
     e48:	88 2f       	mov	r24, r24
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	fc 01       	movw	r30, r24
     e4e:	ef 57       	subi	r30, 0x7F	; 127
     e50:	ff 4f       	sbci	r31, 0xFF	; 255
     e52:	10 82       	st	Z, r1
					break;
			}

			if (i<(len-1))
			{
				for (j=0; j<sizeof(mLinux_user); j++)
     e54:	8b 81       	ldd	r24, Y+3	; 0x03
     e56:	8f 5f       	subi	r24, 0xFF	; 255
     e58:	8b 83       	std	Y+3, r24	; 0x03
     e5a:	8b 81       	ldd	r24, Y+3	; 0x03
     e5c:	80 31       	cpi	r24, 0x10	; 16
     e5e:	60 f3       	brcs	.-40     	; 0xe38 <process_cmd_hal+0x134>
				{
					mLinux_user[j]=0x00;
					mLinux_passwd[j]=0x00;
				}

				for (j=1; j<i; j++)
     e60:	81 e0       	ldi	r24, 0x01	; 1
     e62:	8b 83       	std	Y+3, r24	; 0x03
     e64:	16 c0       	rjmp	.+44     	; 0xe92 <process_cmd_hal+0x18e>
				{
					mLinux_user[j-1]=*(sptr+j);
     e66:	8b 81       	ldd	r24, Y+3	; 0x03
     e68:	88 2f       	mov	r24, r24
     e6a:	90 e0       	ldi	r25, 0x00	; 0
     e6c:	ac 01       	movw	r20, r24
     e6e:	41 50       	subi	r20, 0x01	; 1
     e70:	50 40       	sbci	r21, 0x00	; 0
     e72:	8b 81       	ldd	r24, Y+3	; 0x03
     e74:	28 2f       	mov	r18, r24
     e76:	30 e0       	ldi	r19, 0x00	; 0
     e78:	8d 81       	ldd	r24, Y+5	; 0x05
     e7a:	9e 81       	ldd	r25, Y+6	; 0x06
     e7c:	fc 01       	movw	r30, r24
     e7e:	e2 0f       	add	r30, r18
     e80:	f3 1f       	adc	r31, r19
     e82:	80 81       	ld	r24, Z
     e84:	fa 01       	movw	r30, r20
     e86:	ef 58       	subi	r30, 0x8F	; 143
     e88:	ff 4f       	sbci	r31, 0xFF	; 255
     e8a:	80 83       	st	Z, r24
				{
					mLinux_user[j]=0x00;
					mLinux_passwd[j]=0x00;
				}

				for (j=1; j<i; j++)
     e8c:	8b 81       	ldd	r24, Y+3	; 0x03
     e8e:	8f 5f       	subi	r24, 0xFF	; 255
     e90:	8b 83       	std	Y+3, r24	; 0x03
     e92:	9b 81       	ldd	r25, Y+3	; 0x03
     e94:	8c 81       	ldd	r24, Y+4	; 0x04
     e96:	98 17       	cp	r25, r24
     e98:	30 f3       	brcs	.-52     	; 0xe66 <process_cmd_hal+0x162>
				{
					mLinux_user[j-1]=*(sptr+j);
				}
				for (j=(i+1); j<len; j++)
     e9a:	8c 81       	ldd	r24, Y+4	; 0x04
     e9c:	8f 5f       	subi	r24, 0xFF	; 255
     e9e:	8b 83       	std	Y+3, r24	; 0x03
     ea0:	1c c0       	rjmp	.+56     	; 0xeda <process_cmd_hal+0x1d6>
				{
					mLinux_passwd[j-1-i]=*(sptr+j);
     ea2:	8b 81       	ldd	r24, Y+3	; 0x03
     ea4:	88 2f       	mov	r24, r24
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	9c 01       	movw	r18, r24
     eaa:	21 50       	subi	r18, 0x01	; 1
     eac:	30 40       	sbci	r19, 0x00	; 0
     eae:	8c 81       	ldd	r24, Y+4	; 0x04
     eb0:	88 2f       	mov	r24, r24
     eb2:	90 e0       	ldi	r25, 0x00	; 0
     eb4:	a9 01       	movw	r20, r18
     eb6:	48 1b       	sub	r20, r24
     eb8:	59 0b       	sbc	r21, r25
     eba:	8b 81       	ldd	r24, Y+3	; 0x03
     ebc:	28 2f       	mov	r18, r24
     ebe:	30 e0       	ldi	r19, 0x00	; 0
     ec0:	8d 81       	ldd	r24, Y+5	; 0x05
     ec2:	9e 81       	ldd	r25, Y+6	; 0x06
     ec4:	fc 01       	movw	r30, r24
     ec6:	e2 0f       	add	r30, r18
     ec8:	f3 1f       	adc	r31, r19
     eca:	80 81       	ld	r24, Z
     ecc:	fa 01       	movw	r30, r20
     ece:	ef 57       	subi	r30, 0x7F	; 127
     ed0:	ff 4f       	sbci	r31, 0xFF	; 255
     ed2:	80 83       	st	Z, r24

				for (j=1; j<i; j++)
				{
					mLinux_user[j-1]=*(sptr+j);
				}
				for (j=(i+1); j<len; j++)
     ed4:	8b 81       	ldd	r24, Y+3	; 0x03
     ed6:	8f 5f       	subi	r24, 0xFF	; 255
     ed8:	8b 83       	std	Y+3, r24	; 0x03
     eda:	9b 81       	ldd	r25, Y+3	; 0x03
     edc:	8f 81       	ldd	r24, Y+7	; 0x07
     ede:	98 17       	cp	r25, r24
     ee0:	00 f3       	brcs	.-64     	; 0xea2 <process_cmd_hal+0x19e>
				{
					mLinux_passwd[j-1-i]=*(sptr+j);
				}

				u_puts("\r\n");
     ee2:	82 ef       	ldi	r24, 0xF2	; 242
     ee4:	90 e0       	ldi	r25, 0x00	; 0
     ee6:	0a da       	rcall	.-3052   	; 0x2fc <u_puts>
     ee8:	95 c0       	rjmp	.+298    	; 0x1014 <process_cmd_hal+0x310>
			}

  			break;

		case 'S':	// Status
			u_puts(LinuxCmd);
     eea:	85 ef       	ldi	r24, 0xF5	; 245
     eec:	90 e0       	ldi	r25, 0x00	; 0
     eee:	06 da       	rcall	.-3060   	; 0x2fc <u_puts>
			u_puts("'S' mcu_status:");				// Status command
     ef0:	88 e0       	ldi	r24, 0x08	; 8
     ef2:	91 e0       	ldi	r25, 0x01	; 1
     ef4:	03 da       	rcall	.-3066   	; 0x2fc <u_puts>
			u_puts(mLinux_user);
     ef6:	81 e7       	ldi	r24, 0x71	; 113
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	00 da       	rcall	.-3072   	; 0x2fc <u_puts>
			u_puts("/");
     efc:	88 e1       	ldi	r24, 0x18	; 24
     efe:	91 e0       	ldi	r25, 0x01	; 1
     f00:	fd d9       	rcall	.-3078   	; 0x2fc <u_puts>
			u_puts(mLinux_passwd);u_puts(":");
     f02:	81 e8       	ldi	r24, 0x81	; 129
     f04:	90 e0       	ldi	r25, 0x00	; 0
     f06:	fa d9       	rcall	.-3084   	; 0x2fc <u_puts>
     f08:	8a e1       	ldi	r24, 0x1A	; 26
     f0a:	91 e0       	ldi	r25, 0x01	; 1
     f0c:	f7 d9       	rcall	.-3090   	; 0x2fc <u_puts>
			u_putHexByte(mLinuxMode,':');	// mLinuxMode = 0x02 : Login Linux already
     f0e:	80 91 e8 00 	lds	r24, 0x00E8
     f12:	6a e3       	ldi	r22, 0x3A	; 58
     f14:	af d9       	rcall	.-3234   	; 0x274 <u_putHexByte>
			u_putHexWord(mCmdCnt);u_puts(":");
     f16:	80 91 9f 01 	lds	r24, 0x019F
     f1a:	90 91 a0 01 	lds	r25, 0x01A0
     f1e:	95 d9       	rcall	.-3286   	; 0x24a <u_putHexWord>
     f20:	8a e1       	ldi	r24, 0x1A	; 26
     f22:	91 e0       	ldi	r25, 0x01	; 1
     f24:	eb d9       	rcall	.-3114   	; 0x2fc <u_puts>
			u_puts("\r\n");
     f26:	82 ef       	ldi	r24, 0xF2	; 242
     f28:	90 e0       	ldi	r25, 0x00	; 0
     f2a:	e8 d9       	rcall	.-3120   	; 0x2fc <u_puts>
     f2c:	73 c0       	rjmp	.+230    	; 0x1014 <process_cmd_hal+0x310>
			break;

		case 'V':	// Version
			u_puts(LinuxCmd);
     f2e:	85 ef       	ldi	r24, 0xF5	; 245
     f30:	90 e0       	ldi	r25, 0x00	; 0
     f32:	e4 d9       	rcall	.-3128   	; 0x2fc <u_puts>
			u_puts("'V' ");
     f34:	8c e1       	ldi	r24, 0x1C	; 28
     f36:	91 e0       	ldi	r25, 0x01	; 1
     f38:	e1 d9       	rcall	.-3134   	; 0x2fc <u_puts>
			u_puts(VERSION);
     f3a:	81 e2       	ldi	r24, 0x21	; 33
     f3c:	91 e0       	ldi	r25, 0x01	; 1
     f3e:	de d9       	rcall	.-3140   	; 0x2fc <u_puts>
			u_puts("'\r\n");
     f40:	8a e4       	ldi	r24, 0x4A	; 74
     f42:	91 e0       	ldi	r25, 0x01	; 1
     f44:	db d9       	rcall	.-3146   	; 0x2fc <u_puts>
     f46:	66 c0       	rjmp	.+204    	; 0x1014 <process_cmd_hal+0x310>
			break;

		case 'R': 	// Remote command
			process_remote_command((char*) (sptr));
     f48:	8d 81       	ldd	r24, Y+5	; 0x05
     f4a:	9e 81       	ldd	r25, Y+6	; 0x06
     f4c:	6c d0       	rcall	.+216    	; 0x1026 <process_remote_command>
     f4e:	62 c0       	rjmp	.+196    	; 0x1014 <process_cmd_hal+0x310>
			break;

		case 'F': 	// ZuVo Faucet Command
			if (len>=5)
     f50:	8f 81       	ldd	r24, Y+7	; 0x07
     f52:	85 30       	cpi	r24, 0x05	; 5
     f54:	f8 f0       	brcs	.+62     	; 0xf94 <process_cmd_hal+0x290>
			{
			mFaucetMode = u_asc2uint(2,(char*) (sptr+1));
     f56:	8d 81       	ldd	r24, Y+5	; 0x05
     f58:	9e 81       	ldd	r25, Y+6	; 0x06
     f5a:	9c 01       	movw	r18, r24
     f5c:	2f 5f       	subi	r18, 0xFF	; 255
     f5e:	3f 4f       	sbci	r19, 0xFF	; 255
     f60:	82 e0       	ldi	r24, 0x02	; 2
     f62:	b9 01       	movw	r22, r18
     f64:	fa d8       	rcall	.-3596   	; 0x15a <u_asc2uint>
     f66:	80 93 ab 01 	sts	0x01AB, r24
			mFaucetBL = u_asc2uint(2,(char*) (sptr+3));
     f6a:	8d 81       	ldd	r24, Y+5	; 0x05
     f6c:	9e 81       	ldd	r25, Y+6	; 0x06
     f6e:	9c 01       	movw	r18, r24
     f70:	2d 5f       	subi	r18, 0xFD	; 253
     f72:	3f 4f       	sbci	r19, 0xFF	; 255
     f74:	82 e0       	ldi	r24, 0x02	; 2
     f76:	b9 01       	movw	r22, r18
     f78:	f0 d8       	rcall	.-3616   	; 0x15a <u_asc2uint>
     f7a:	80 93 ac 01 	sts	0x01AC, r24
			if ((mFaucetMode & 0xf0) == 0xf0)
     f7e:	80 91 ab 01 	lds	r24, 0x01AB
     f82:	88 2f       	mov	r24, r24
     f84:	90 e0       	ldi	r25, 0x00	; 0
     f86:	80 7f       	andi	r24, 0xF0	; 240
     f88:	90 70       	andi	r25, 0x00	; 0
     f8a:	80 3f       	cpi	r24, 0xF0	; 240
     f8c:	91 05       	cpc	r25, r1
     f8e:	11 f4       	brne	.+4      	; 0xf94 <process_cmd_hal+0x290>
			{	mFaucetBL = 0x00;
     f90:	10 92 ac 01 	sts	0x01AC, r1
			}
			}
			u_puts("ZuVo Faucet ");
     f94:	8e e4       	ldi	r24, 0x4E	; 78
     f96:	91 e0       	ldi	r25, 0x01	; 1
     f98:	b1 d9       	rcall	.-3230   	; 0x2fc <u_puts>
			u_putHexByte(mFaucetMode,' ');
     f9a:	80 91 ab 01 	lds	r24, 0x01AB
     f9e:	60 e2       	ldi	r22, 0x20	; 32
     fa0:	69 d9       	rcall	.-3374   	; 0x274 <u_putHexByte>
			u_putHexByte(mFaucetBL,' ');
     fa2:	80 91 ac 01 	lds	r24, 0x01AC
     fa6:	60 e2       	ldi	r22, 0x20	; 32
     fa8:	65 d9       	rcall	.-3382   	; 0x274 <u_putHexByte>
			u_putHexByte(len,' ');
     faa:	8f 81       	ldd	r24, Y+7	; 0x07
     fac:	60 e2       	ldi	r22, 0x20	; 32
     fae:	62 d9       	rcall	.-3388   	; 0x274 <u_putHexByte>
			u_puts("\r\n");
     fb0:	82 ef       	ldi	r24, 0xF2	; 242
     fb2:	90 e0       	ldi	r25, 0x00	; 0
     fb4:	a3 d9       	rcall	.-3258   	; 0x2fc <u_puts>
     fb6:	2e c0       	rjmp	.+92     	; 0x1014 <process_cmd_hal+0x310>
			break;

		case 'Z': 	// ZuVo Command
			mZuvoAuto ^= 0x01;
     fb8:	90 91 bb 01 	lds	r25, 0x01BB
     fbc:	81 e0       	ldi	r24, 0x01	; 1
     fbe:	89 27       	eor	r24, r25
     fc0:	80 93 bb 01 	sts	0x01BB, r24
			izuvo_init_capture_pulse();
     fc4:	c8 d0       	rcall	.+400    	; 0x1156 <izuvo_init_capture_pulse>
			u_puts("ZuVo ");
     fc6:	8b e5       	ldi	r24, 0x5B	; 91
     fc8:	91 e0       	ldi	r25, 0x01	; 1
     fca:	98 d9       	rcall	.-3280   	; 0x2fc <u_puts>
			u_putHexByte(mZuvoAuto,' ');
     fcc:	80 91 bb 01 	lds	r24, 0x01BB
     fd0:	60 e2       	ldi	r22, 0x20	; 32
     fd2:	50 d9       	rcall	.-3424   	; 0x274 <u_putHexByte>
			u_puts("\r\n");
     fd4:	82 ef       	ldi	r24, 0xF2	; 242
     fd6:	90 e0       	ldi	r25, 0x00	; 0
     fd8:	91 d9       	rcall	.-3294   	; 0x2fc <u_puts>
     fda:	1c c0       	rjmp	.+56     	; 0x1014 <process_cmd_hal+0x310>
			break;


		case 'T': 	// Test Command
			u_puts("Test :");
     fdc:	81 e6       	ldi	r24, 0x61	; 97
     fde:	91 e0       	ldi	r25, 0x01	; 1
     fe0:	8d d9       	rcall	.-3302   	; 0x2fc <u_puts>
			for (i=1; i<len; i++)
     fe2:	81 e0       	ldi	r24, 0x01	; 1
     fe4:	8c 83       	std	Y+4, r24	; 0x04
     fe6:	0f c0       	rjmp	.+30     	; 0x1006 <process_cmd_hal+0x302>
			{
				tmp = *(sptr+i);
     fe8:	8c 81       	ldd	r24, Y+4	; 0x04
     fea:	28 2f       	mov	r18, r24
     fec:	30 e0       	ldi	r19, 0x00	; 0
     fee:	8d 81       	ldd	r24, Y+5	; 0x05
     ff0:	9e 81       	ldd	r25, Y+6	; 0x06
     ff2:	fc 01       	movw	r30, r24
     ff4:	e2 0f       	add	r30, r18
     ff6:	f3 1f       	adc	r31, r19
     ff8:	80 81       	ld	r24, Z
     ffa:	89 83       	std	Y+1, r24	; 0x01
				u_putch(tmp);
     ffc:	89 81       	ldd	r24, Y+1	; 0x01
     ffe:	60 d9       	rcall	.-3392   	; 0x2c0 <u_putch>
			break;


		case 'T': 	// Test Command
			u_puts("Test :");
			for (i=1; i<len; i++)
    1000:	8c 81       	ldd	r24, Y+4	; 0x04
    1002:	8f 5f       	subi	r24, 0xFF	; 255
    1004:	8c 83       	std	Y+4, r24	; 0x04
    1006:	9c 81       	ldd	r25, Y+4	; 0x04
    1008:	8f 81       	ldd	r24, Y+7	; 0x07
    100a:	98 17       	cp	r25, r24
    100c:	68 f3       	brcs	.-38     	; 0xfe8 <process_cmd_hal+0x2e4>
			{
				tmp = *(sptr+i);
				u_putch(tmp);
			}
			u_puts("\r\n");
    100e:	82 ef       	ldi	r24, 0xF2	; 242
    1010:	90 e0       	ldi	r25, 0x00	; 0
    1012:	74 d9       	rcall	.-3352   	; 0x2fc <u_puts>
			break;


	}
}
    1014:	29 96       	adiw	r28, 0x09	; 9
    1016:	0f b6       	in	r0, 0x3f	; 63
    1018:	f8 94       	cli
    101a:	de bf       	out	0x3e, r29	; 62
    101c:	0f be       	out	0x3f, r0	; 63
    101e:	cd bf       	out	0x3d, r28	; 61
    1020:	cf 91       	pop	r28
    1022:	df 91       	pop	r29
    1024:	08 95       	ret

00001026 <process_remote_command>:

extern unsigned char 	mLinuxMode;


void process_remote_command(char *input)
{
    1026:	df 93       	push	r29
    1028:	cf 93       	push	r28
    102a:	00 d0       	rcall	.+0      	; 0x102c <process_remote_command+0x6>
    102c:	00 d0       	rcall	.+0      	; 0x102e <process_remote_command+0x8>
    102e:	cd b7       	in	r28, 0x3d	; 61
    1030:	de b7       	in	r29, 0x3e	; 62
    1032:	9c 83       	std	Y+4, r25	; 0x04
    1034:	8b 83       	std	Y+3, r24	; 0x03
//	"~R{A}{B} {REPEAT} {CODE}
//  A = Action 	:  S = Send ; C = Capture ...
//	B = TYPE 	:  0 = IR; 1 = 433MHz; 2 = 335MHz; 3 = X10 ...
//

	char tType=0;
    1036:	1a 82       	std	Y+2, r1	; 0x02
	char tAction = 0;
    1038:	19 82       	std	Y+1, r1	; 0x01

	tAction = *(input+1);
    103a:	8b 81       	ldd	r24, Y+3	; 0x03
    103c:	9c 81       	ldd	r25, Y+4	; 0x04
    103e:	fc 01       	movw	r30, r24
    1040:	31 96       	adiw	r30, 0x01	; 1
    1042:	80 81       	ld	r24, Z
    1044:	89 83       	std	Y+1, r24	; 0x01
	tType 	= *(input+2);
    1046:	8b 81       	ldd	r24, Y+3	; 0x03
    1048:	9c 81       	ldd	r25, Y+4	; 0x04
    104a:	fc 01       	movw	r30, r24
    104c:	32 96       	adiw	r30, 0x02	; 2
    104e:	80 81       	ld	r24, Z
    1050:	8a 83       	std	Y+2, r24	; 0x02

	switch (tType)
    1052:	8a 81       	ldd	r24, Y+2	; 0x02
    1054:	88 2f       	mov	r24, r24
    1056:	90 e0       	ldi	r25, 0x00	; 0
    1058:	80 33       	cpi	r24, 0x30	; 48
    105a:	91 05       	cpc	r25, r1
    105c:	61 f4       	brne	.+24     	; 0x1076 <process_remote_command+0x50>
	{
		case '0':	// iR
			switch (tAction)
    105e:	89 81       	ldd	r24, Y+1	; 0x01
    1060:	88 2f       	mov	r24, r24
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	83 34       	cpi	r24, 0x43	; 67
    1066:	91 05       	cpc	r25, r1
    1068:	31 f4       	brne	.+12     	; 0x1076 <process_remote_command+0x50>
			{
				case 'S':
//					ir_init_send_pulse(input+4);
					break;
				case 'C':
					mPulseIndex = 0;
    106a:	10 92 aa 01 	sts	0x01AA, r1
					ir_init_capture_pulse(input+4);
    106e:	8b 81       	ldd	r24, Y+3	; 0x03
    1070:	9c 81       	ldd	r25, Y+4	; 0x04
    1072:	04 96       	adiw	r24, 0x04	; 4
    1074:	3a d0       	rcall	.+116    	; 0x10ea <ir_init_capture_pulse>
		default:
			break;
	
	}

}
    1076:	0f 90       	pop	r0
    1078:	0f 90       	pop	r0
    107a:	0f 90       	pop	r0
    107c:	0f 90       	pop	r0
    107e:	cf 91       	pop	r28
    1080:	df 91       	pop	r29
    1082:	08 95       	ret

00001084 <ir_wait_tx>:


void ir_wait_tx(void)
{
    1084:	df 93       	push	r29
    1086:	cf 93       	push	r28
    1088:	00 d0       	rcall	.+0      	; 0x108a <ir_wait_tx+0x6>
    108a:	cd b7       	in	r28, 0x3d	; 61
    108c:	de b7       	in	r29, 0x3e	; 62
	unsigned int x=0;
    108e:	1a 82       	std	Y+2, r1	; 0x02
    1090:	19 82       	std	Y+1, r1	; 0x01
    1092:	19 c0       	rjmp	.+50     	; 0x10c6 <ir_wait_tx+0x42>

	while (x<15000)					// Time Out
	{

		if ((TIFR & 0x01)==0x01)	// TIMER0 Overflow
    1094:	e8 e5       	ldi	r30, 0x58	; 88
    1096:	f0 e0       	ldi	r31, 0x00	; 0
    1098:	80 81       	ld	r24, Z
    109a:	88 2f       	mov	r24, r24
    109c:	90 e0       	ldi	r25, 0x00	; 0
    109e:	81 70       	andi	r24, 0x01	; 1
    10a0:	90 70       	andi	r25, 0x00	; 0
    10a2:	88 23       	and	r24, r24
    10a4:	09 f0       	breq	.+2      	; 0x10a8 <ir_wait_tx+0x24>
		{
			POLL_TIMER0_OVR();
    10a6:	ba da       	rcall	.-2700   	; 0x61c <POLL_TIMER0_OVR>
		}

		if ((UCSRA & 0x80)==0x80)	// UART RX data ready for recieve
    10a8:	eb e2       	ldi	r30, 0x2B	; 43
    10aa:	f0 e0       	ldi	r31, 0x00	; 0
    10ac:	80 81       	ld	r24, Z
    10ae:	88 23       	and	r24, r24
    10b0:	0c f4       	brge	.+2      	; 0x10b4 <ir_wait_tx+0x30>
		{
	 		POLL_UART_RECV();
    10b2:	fc d9       	rcall	.-3080   	; 0x4ac <POLL_UART_RECV>
		}

		x++;
    10b4:	89 81       	ldd	r24, Y+1	; 0x01
    10b6:	9a 81       	ldd	r25, Y+2	; 0x02
    10b8:	01 96       	adiw	r24, 0x01	; 1
    10ba:	9a 83       	std	Y+2, r25	; 0x02
    10bc:	89 83       	std	Y+1, r24	; 0x01
//		asm volatile ("nop");
		if (mTxFlag==0)
    10be:	80 91 17 04 	lds	r24, 0x0417
    10c2:	88 23       	and	r24, r24
    10c4:	31 f0       	breq	.+12     	; 0x10d2 <ir_wait_tx+0x4e>

void ir_wait_tx(void)
{
	unsigned int x=0;

	while (x<15000)					// Time Out
    10c6:	89 81       	ldd	r24, Y+1	; 0x01
    10c8:	9a 81       	ldd	r25, Y+2	; 0x02
    10ca:	2a e3       	ldi	r18, 0x3A	; 58
    10cc:	88 39       	cpi	r24, 0x98	; 152
    10ce:	92 07       	cpc	r25, r18
    10d0:	08 f3       	brcs	.-62     	; 0x1094 <ir_wait_tx+0x10>
		if (mTxFlag==0)
		{
			break;
		}
	}
	TCCR1B &= 0b11111000;	// Stop Clock
    10d2:	ae e4       	ldi	r26, 0x4E	; 78
    10d4:	b0 e0       	ldi	r27, 0x00	; 0
    10d6:	ee e4       	ldi	r30, 0x4E	; 78
    10d8:	f0 e0       	ldi	r31, 0x00	; 0
    10da:	80 81       	ld	r24, Z
    10dc:	88 7f       	andi	r24, 0xF8	; 248
    10de:	8c 93       	st	X, r24

}
    10e0:	0f 90       	pop	r0
    10e2:	0f 90       	pop	r0
    10e4:	cf 91       	pop	r28
    10e6:	df 91       	pop	r29
    10e8:	08 95       	ret

000010ea <ir_init_capture_pulse>:

void ir_init_capture_pulse(char *input)
{
    10ea:	df 93       	push	r29
    10ec:	cf 93       	push	r28
    10ee:	00 d0       	rcall	.+0      	; 0x10f0 <ir_init_capture_pulse+0x6>
    10f0:	cd b7       	in	r28, 0x3d	; 61
    10f2:	de b7       	in	r29, 0x3e	; 62
    10f4:	9a 83       	std	Y+2, r25	; 0x02
    10f6:	89 83       	std	Y+1, r24	; 0x01

	// Set TIMER1 WGM to Mode 0
	TCCR1B = 0b00000000;	// Disable Input Capture
    10f8:	ee e4       	ldi	r30, 0x4E	; 78
    10fa:	f0 e0       	ldi	r31, 0x00	; 0
    10fc:	10 82       	st	Z, r1
	TCNT1  = 0;
    10fe:	ec e4       	ldi	r30, 0x4C	; 76
    1100:	f0 e0       	ldi	r31, 0x00	; 0
    1102:	11 82       	std	Z+1, r1	; 0x01
    1104:	10 82       	st	Z, r1
	mCaptureIndex = 0;
    1106:	10 92 85 02 	sts	0x0285, r1
    110a:	10 92 84 02 	sts	0x0284, r1
	mCaptureState = 1;
    110e:	81 e0       	ldi	r24, 0x01	; 1
    1110:	80 93 63 02 	sts	0x0263, r24
	mFunctionMode = 2;		// Change it to Capture Mode
    1114:	82 e0       	ldi	r24, 0x02	; 2
    1116:	80 93 a3 01 	sts	0x01A3, r24
	mCaptureRepeat =  u_asc2uint(2,(char *) (input));
    111a:	29 81       	ldd	r18, Y+1	; 0x01
    111c:	3a 81       	ldd	r19, Y+2	; 0x02
    111e:	82 e0       	ldi	r24, 0x02	; 2
    1120:	b9 01       	movw	r22, r18
    1122:	1b d8       	rcall	.-4042   	; 0x15a <u_asc2uint>
    1124:	80 93 3a 04 	sts	0x043A, r24

	TCCR1B  = 0b11000011;	// Enable Input Capture
    1128:	ee e4       	ldi	r30, 0x4E	; 78
    112a:	f0 e0       	ldi	r31, 0x00	; 0
    112c:	83 ec       	ldi	r24, 0xC3	; 195
    112e:	80 83       	st	Z, r24
	TIMSK  &= ~0b00111100;  // Disable all TIMER1 interupt
    1130:	a9 e5       	ldi	r26, 0x59	; 89
    1132:	b0 e0       	ldi	r27, 0x00	; 0
    1134:	e9 e5       	ldi	r30, 0x59	; 89
    1136:	f0 e0       	ldi	r31, 0x00	; 0
    1138:	80 81       	ld	r24, Z
    113a:	83 7c       	andi	r24, 0xC3	; 195
    113c:	8c 93       	st	X, r24
	TIMSK  |=  0b00100000;	// Enable Input Capture1 Interrupt
    113e:	a9 e5       	ldi	r26, 0x59	; 89
    1140:	b0 e0       	ldi	r27, 0x00	; 0
    1142:	e9 e5       	ldi	r30, 0x59	; 89
    1144:	f0 e0       	ldi	r31, 0x00	; 0
    1146:	80 81       	ld	r24, Z
    1148:	80 62       	ori	r24, 0x20	; 32
    114a:	8c 93       	st	X, r24

}
    114c:	0f 90       	pop	r0
    114e:	0f 90       	pop	r0
    1150:	cf 91       	pop	r28
    1152:	df 91       	pop	r29
    1154:	08 95       	ret

00001156 <izuvo_init_capture_pulse>:

void izuvo_init_capture_pulse(void)
{
    1156:	df 93       	push	r29
    1158:	cf 93       	push	r28
    115a:	cd b7       	in	r28, 0x3d	; 61
    115c:	de b7       	in	r29, 0x3e	; 62

	// Set TIMER1 WGM to Mode 0
	TCCR1B = 0b00000000;	// Disable Input Capture
    115e:	ee e4       	ldi	r30, 0x4E	; 78
    1160:	f0 e0       	ldi	r31, 0x00	; 0
    1162:	10 82       	st	Z, r1
	TCNT1  = 0;
    1164:	ec e4       	ldi	r30, 0x4C	; 76
    1166:	f0 e0       	ldi	r31, 0x00	; 0
    1168:	11 82       	std	Z+1, r1	; 0x01
    116a:	10 82       	st	Z, r1
	mCaptureIndex = 0;
    116c:	10 92 85 02 	sts	0x0285, r1
    1170:	10 92 84 02 	sts	0x0284, r1
	mCaptureState = 1;
    1174:	81 e0       	ldi	r24, 0x01	; 1
    1176:	80 93 63 02 	sts	0x0263, r24
	mFunctionMode = 2;		// Change it to Capture Mode
    117a:	82 e0       	ldi	r24, 0x02	; 2
    117c:	80 93 a3 01 	sts	0x01A3, r24
	mCaptureRepeat =  0x01;
    1180:	81 e0       	ldi	r24, 0x01	; 1
    1182:	80 93 3a 04 	sts	0x043A, r24

	TCCR1B  = 0b11000011;	// Enable Input Capture
    1186:	ee e4       	ldi	r30, 0x4E	; 78
    1188:	f0 e0       	ldi	r31, 0x00	; 0
    118a:	83 ec       	ldi	r24, 0xC3	; 195
    118c:	80 83       	st	Z, r24
	TIMSK  &= ~0b00111100;  // Disable all TIMER1 interupt
    118e:	a9 e5       	ldi	r26, 0x59	; 89
    1190:	b0 e0       	ldi	r27, 0x00	; 0
    1192:	e9 e5       	ldi	r30, 0x59	; 89
    1194:	f0 e0       	ldi	r31, 0x00	; 0
    1196:	80 81       	ld	r24, Z
    1198:	83 7c       	andi	r24, 0xC3	; 195
    119a:	8c 93       	st	X, r24
	TIMSK  |=  0b00100000;	// Enable Input Capture1 Interrupt
    119c:	a9 e5       	ldi	r26, 0x59	; 89
    119e:	b0 e0       	ldi	r27, 0x00	; 0
    11a0:	e9 e5       	ldi	r30, 0x59	; 89
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	80 81       	ld	r24, Z
    11a6:	80 62       	ori	r24, 0x20	; 32
    11a8:	8c 93       	st	X, r24


}
    11aa:	cf 91       	pop	r28
    11ac:	df 91       	pop	r29
    11ae:	08 95       	ret

000011b0 <izuvo_search_header>:


unsigned char izuvo_search_header(void)
{
    11b0:	df 93       	push	r29
    11b2:	cf 93       	push	r28
    11b4:	cd b7       	in	r28, 0x3d	; 61
    11b6:	de b7       	in	r29, 0x3e	; 62
    11b8:	29 97       	sbiw	r28, 0x09	; 9
    11ba:	0f b6       	in	r0, 0x3f	; 63
    11bc:	f8 94       	cli
    11be:	de bf       	out	0x3e, r29	; 62
    11c0:	0f be       	out	0x3f, r0	; 63
    11c2:	cd bf       	out	0x3d, r28	; 61
//  0135 26 13 13 13
	unsigned char i;
	unsigned char index;
	unsigned int  tPulseArr[3];

	index = sizeof(mCapturePulse)/2;
    11c4:	88 ec       	ldi	r24, 0xC8	; 200
    11c6:	89 83       	std	Y+1, r24	; 0x01

	if (index >=10)
    11c8:	89 81       	ldd	r24, Y+1	; 0x01
    11ca:	8a 30       	cpi	r24, 0x0A	; 10
    11cc:	18 f0       	brcs	.+6      	; 0x11d4 <izuvo_search_header+0x24>
	{
		index = index -4;
    11ce:	89 81       	ldd	r24, Y+1	; 0x01
    11d0:	84 50       	subi	r24, 0x04	; 4
    11d2:	89 83       	std	Y+1, r24	; 0x01
	}

	tPulseArr[0]=0;
    11d4:	1c 82       	std	Y+4, r1	; 0x04
    11d6:	1b 82       	std	Y+3, r1	; 0x03
	tPulseArr[1]=0;
    11d8:	1e 82       	std	Y+6, r1	; 0x06
    11da:	1d 82       	std	Y+5, r1	; 0x05
	tPulseArr[2]=0;
    11dc:	18 86       	std	Y+8, r1	; 0x08
    11de:	1f 82       	std	Y+7, r1	; 0x07

	for (i=0; i<index; i++)
    11e0:	1a 82       	std	Y+2, r1	; 0x02
    11e2:	33 c0       	rjmp	.+102    	; 0x124a <izuvo_search_header+0x9a>
	{
	
		tPulseArr[0]=tPulseArr[1];
    11e4:	8d 81       	ldd	r24, Y+5	; 0x05
    11e6:	9e 81       	ldd	r25, Y+6	; 0x06
    11e8:	9c 83       	std	Y+4, r25	; 0x04
    11ea:	8b 83       	std	Y+3, r24	; 0x03
		tPulseArr[1]=tPulseArr[2];
    11ec:	8f 81       	ldd	r24, Y+7	; 0x07
    11ee:	98 85       	ldd	r25, Y+8	; 0x08
    11f0:	9e 83       	std	Y+6, r25	; 0x06
    11f2:	8d 83       	std	Y+5, r24	; 0x05
		tPulseArr[2]=mCapturePulse[i]>>1;
    11f4:	8a 81       	ldd	r24, Y+2	; 0x02
    11f6:	88 2f       	mov	r24, r24
    11f8:	90 e0       	ldi	r25, 0x00	; 0
    11fa:	88 0f       	add	r24, r24
    11fc:	99 1f       	adc	r25, r25
    11fe:	fc 01       	movw	r30, r24
    1200:	ea 57       	subi	r30, 0x7A	; 122
    1202:	fd 4f       	sbci	r31, 0xFD	; 253
    1204:	80 81       	ld	r24, Z
    1206:	91 81       	ldd	r25, Z+1	; 0x01
    1208:	96 95       	lsr	r25
    120a:	87 95       	ror	r24
    120c:	98 87       	std	Y+8, r25	; 0x08
    120e:	8f 83       	std	Y+7, r24	; 0x07


		if ((tPulseArr[0] >= 0x0100) && (tPulseArr[1]>0x20) && (tPulseArr[1]<0x30) && (tPulseArr[2]<0x15))
    1210:	8b 81       	ldd	r24, Y+3	; 0x03
    1212:	9c 81       	ldd	r25, Y+4	; 0x04
    1214:	8f 3f       	cpi	r24, 0xFF	; 255
    1216:	91 05       	cpc	r25, r1
    1218:	a9 f0       	breq	.+42     	; 0x1244 <izuvo_search_header+0x94>
    121a:	a0 f0       	brcs	.+40     	; 0x1244 <izuvo_search_header+0x94>
    121c:	8d 81       	ldd	r24, Y+5	; 0x05
    121e:	9e 81       	ldd	r25, Y+6	; 0x06
    1220:	81 32       	cpi	r24, 0x21	; 33
    1222:	91 05       	cpc	r25, r1
    1224:	78 f0       	brcs	.+30     	; 0x1244 <izuvo_search_header+0x94>
    1226:	8d 81       	ldd	r24, Y+5	; 0x05
    1228:	9e 81       	ldd	r25, Y+6	; 0x06
    122a:	80 33       	cpi	r24, 0x30	; 48
    122c:	91 05       	cpc	r25, r1
    122e:	50 f4       	brcc	.+20     	; 0x1244 <izuvo_search_header+0x94>
    1230:	8f 81       	ldd	r24, Y+7	; 0x07
    1232:	98 85       	ldd	r25, Y+8	; 0x08
    1234:	85 31       	cpi	r24, 0x15	; 21
    1236:	91 05       	cpc	r25, r1
    1238:	28 f4       	brcc	.+10     	; 0x1244 <izuvo_search_header+0x94>
		{ 
				return(i-1);
    123a:	8a 81       	ldd	r24, Y+2	; 0x02
    123c:	98 2f       	mov	r25, r24
    123e:	91 50       	subi	r25, 0x01	; 1
    1240:	99 87       	std	Y+9, r25	; 0x09
    1242:	08 c0       	rjmp	.+16     	; 0x1254 <izuvo_search_header+0xa4>

	tPulseArr[0]=0;
	tPulseArr[1]=0;
	tPulseArr[2]=0;

	for (i=0; i<index; i++)
    1244:	8a 81       	ldd	r24, Y+2	; 0x02
    1246:	8f 5f       	subi	r24, 0xFF	; 255
    1248:	8a 83       	std	Y+2, r24	; 0x02
    124a:	9a 81       	ldd	r25, Y+2	; 0x02
    124c:	89 81       	ldd	r24, Y+1	; 0x01
    124e:	98 17       	cp	r25, r24
    1250:	48 f2       	brcs	.-110    	; 0x11e4 <izuvo_search_header+0x34>
				return(i-1);
		}

	}

	return (0);
    1252:	19 86       	std	Y+9, r1	; 0x09
    1254:	89 85       	ldd	r24, Y+9	; 0x09
}
    1256:	29 96       	adiw	r28, 0x09	; 9
    1258:	0f b6       	in	r0, 0x3f	; 63
    125a:	f8 94       	cli
    125c:	de bf       	out	0x3e, r29	; 62
    125e:	0f be       	out	0x3f, r0	; 63
    1260:	cd bf       	out	0x3d, r28	; 61
    1262:	cf 91       	pop	r28
    1264:	df 91       	pop	r29
    1266:	08 95       	ret

00001268 <swapByte>:



unsigned char swapByte(unsigned char iByte)
{
    1268:	df 93       	push	r29
    126a:	cf 93       	push	r28
    126c:	00 d0       	rcall	.+0      	; 0x126e <swapByte+0x6>
    126e:	0f 92       	push	r0
    1270:	cd b7       	in	r28, 0x3d	; 61
    1272:	de b7       	in	r29, 0x3e	; 62
    1274:	8b 83       	std	Y+3, r24	; 0x03

	unsigned char i;
	unsigned char tByte=0;
    1276:	19 82       	std	Y+1, r1	; 0x01


	for (i=0; i<=7; i++)
    1278:	1a 82       	std	Y+2, r1	; 0x02
    127a:	1a c0       	rjmp	.+52     	; 0x12b0 <swapByte+0x48>
	{
		tByte  = (tByte << 1);
    127c:	89 81       	ldd	r24, Y+1	; 0x01
    127e:	88 0f       	add	r24, r24
    1280:	89 83       	std	Y+1, r24	; 0x01
		if ((iByte & (0x01<<i)) !=0)
    1282:	8b 81       	ldd	r24, Y+3	; 0x03
    1284:	28 2f       	mov	r18, r24
    1286:	30 e0       	ldi	r19, 0x00	; 0
    1288:	8a 81       	ldd	r24, Y+2	; 0x02
    128a:	88 2f       	mov	r24, r24
    128c:	90 e0       	ldi	r25, 0x00	; 0
    128e:	a9 01       	movw	r20, r18
    1290:	02 c0       	rjmp	.+4      	; 0x1296 <swapByte+0x2e>
    1292:	55 95       	asr	r21
    1294:	47 95       	ror	r20
    1296:	8a 95       	dec	r24
    1298:	e2 f7       	brpl	.-8      	; 0x1292 <swapByte+0x2a>
    129a:	ca 01       	movw	r24, r20
    129c:	81 70       	andi	r24, 0x01	; 1
    129e:	90 70       	andi	r25, 0x00	; 0
    12a0:	88 23       	and	r24, r24
    12a2:	19 f0       	breq	.+6      	; 0x12aa <swapByte+0x42>
		{
			tByte += 1;
    12a4:	89 81       	ldd	r24, Y+1	; 0x01
    12a6:	8f 5f       	subi	r24, 0xFF	; 255
    12a8:	89 83       	std	Y+1, r24	; 0x01

	unsigned char i;
	unsigned char tByte=0;


	for (i=0; i<=7; i++)
    12aa:	8a 81       	ldd	r24, Y+2	; 0x02
    12ac:	8f 5f       	subi	r24, 0xFF	; 255
    12ae:	8a 83       	std	Y+2, r24	; 0x02
    12b0:	8a 81       	ldd	r24, Y+2	; 0x02
    12b2:	88 30       	cpi	r24, 0x08	; 8
    12b4:	18 f3       	brcs	.-58     	; 0x127c <swapByte+0x14>
			tByte += 1;
		}
	
	}

	return (tByte);
    12b6:	89 81       	ldd	r24, Y+1	; 0x01

}
    12b8:	0f 90       	pop	r0
    12ba:	0f 90       	pop	r0
    12bc:	0f 90       	pop	r0
    12be:	cf 91       	pop	r28
    12c0:	df 91       	pop	r29
    12c2:	08 95       	ret

000012c4 <izuvo_rx_pulse>:

void izuvo_rx_pulse(unsigned int iPulse)
{
    12c4:	df 93       	push	r29
    12c6:	cf 93       	push	r28
    12c8:	00 d0       	rcall	.+0      	; 0x12ca <izuvo_rx_pulse+0x6>
    12ca:	00 d0       	rcall	.+0      	; 0x12cc <izuvo_rx_pulse+0x8>
    12cc:	00 d0       	rcall	.+0      	; 0x12ce <izuvo_rx_pulse+0xa>
    12ce:	cd b7       	in	r28, 0x3d	; 61
    12d0:	de b7       	in	r29, 0x3e	; 62
    12d2:	9e 83       	std	Y+6, r25	; 0x06
    12d4:	8d 83       	std	Y+5, r24	; 0x05

	unsigned char unit;
	unsigned char i,j;
	unsigned char tByte;

	unit = izuvo_rx_unit(iPulse>>1);
    12d6:	8d 81       	ldd	r24, Y+5	; 0x05
    12d8:	9e 81       	ldd	r25, Y+6	; 0x06
    12da:	96 95       	lsr	r25
    12dc:	87 95       	ror	r24
    12de:	d7 d0       	rcall	.+430    	; 0x148e <izuvo_rx_unit>
    12e0:	8c 83       	std	Y+4, r24	; 0x04

	mZuvoHeader[1] = (mZuvoHeader[1] << 4) + (mZuvoHeader[0]>>12);
    12e2:	80 91 b4 01 	lds	r24, 0x01B4
    12e6:	90 91 b5 01 	lds	r25, 0x01B5
    12ea:	9c 01       	movw	r18, r24
    12ec:	22 95       	swap	r18
    12ee:	32 95       	swap	r19
    12f0:	30 7f       	andi	r19, 0xF0	; 240
    12f2:	32 27       	eor	r19, r18
    12f4:	20 7f       	andi	r18, 0xF0	; 240
    12f6:	32 27       	eor	r19, r18
    12f8:	80 91 b2 01 	lds	r24, 0x01B2
    12fc:	90 91 b3 01 	lds	r25, 0x01B3
    1300:	89 2f       	mov	r24, r25
    1302:	99 27       	eor	r25, r25
    1304:	82 95       	swap	r24
    1306:	8f 70       	andi	r24, 0x0F	; 15
    1308:	82 0f       	add	r24, r18
    130a:	93 1f       	adc	r25, r19
    130c:	90 93 b5 01 	sts	0x01B5, r25
    1310:	80 93 b4 01 	sts	0x01B4, r24
	mZuvoHeader[0] = (mZuvoHeader[0] << 4) + (unit & 0x0f);
    1314:	80 91 b2 01 	lds	r24, 0x01B2
    1318:	90 91 b3 01 	lds	r25, 0x01B3
    131c:	9c 01       	movw	r18, r24
    131e:	22 95       	swap	r18
    1320:	32 95       	swap	r19
    1322:	30 7f       	andi	r19, 0xF0	; 240
    1324:	32 27       	eor	r19, r18
    1326:	20 7f       	andi	r18, 0xF0	; 240
    1328:	32 27       	eor	r19, r18
    132a:	8c 81       	ldd	r24, Y+4	; 0x04
    132c:	88 2f       	mov	r24, r24
    132e:	90 e0       	ldi	r25, 0x00	; 0
    1330:	8f 70       	andi	r24, 0x0F	; 15
    1332:	90 70       	andi	r25, 0x00	; 0
    1334:	82 0f       	add	r24, r18
    1336:	93 1f       	adc	r25, r19
    1338:	90 93 b3 01 	sts	0x01B3, r25
    133c:	80 93 b2 01 	sts	0x01B2, r24


	if (mZuvoIndex<sizeof(mZuvoData))
    1340:	80 91 68 01 	lds	r24, 0x0168
    1344:	8e 31       	cpi	r24, 0x1E	; 30
    1346:	08 f0       	brcs	.+2      	; 0x134a <izuvo_rx_pulse+0x86>
    1348:	72 c0       	rjmp	.+228    	; 0x142e <izuvo_rx_pulse+0x16a>
	{
		for (i=0; i<unit; i++)
    134a:	1b 82       	std	Y+3, r1	; 0x03
    134c:	65 c0       	rjmp	.+202    	; 0x1418 <izuvo_rx_pulse+0x154>
		{
			mZuvoUartByte = mZuvoUartByte<<1;
    134e:	80 91 b9 01 	lds	r24, 0x01B9
    1352:	90 91 ba 01 	lds	r25, 0x01BA
    1356:	88 0f       	add	r24, r24
    1358:	99 1f       	adc	r25, r25
    135a:	90 93 ba 01 	sts	0x01BA, r25
    135e:	80 93 b9 01 	sts	0x01B9, r24
			if (mZuvoBit !=0)
    1362:	80 91 b6 01 	lds	r24, 0x01B6
    1366:	88 23       	and	r24, r24
    1368:	49 f0       	breq	.+18     	; 0x137c <izuvo_rx_pulse+0xb8>
			{
				mZuvoUartByte +=1;
    136a:	80 91 b9 01 	lds	r24, 0x01B9
    136e:	90 91 ba 01 	lds	r25, 0x01BA
    1372:	01 96       	adiw	r24, 0x01	; 1
    1374:	90 93 ba 01 	sts	0x01BA, r25
    1378:	80 93 b9 01 	sts	0x01B9, r24
			}
			mZuvoBitCnt +=1;
    137c:	80 91 b7 01 	lds	r24, 0x01B7
    1380:	8f 5f       	subi	r24, 0xFF	; 255
    1382:	80 93 b7 01 	sts	0x01B7, r24

			if (mZuvoBitCnt>=10)
    1386:	80 91 b7 01 	lds	r24, 0x01B7
    138a:	8a 30       	cpi	r24, 0x0A	; 10
    138c:	08 f4       	brcc	.+2      	; 0x1390 <izuvo_rx_pulse+0xcc>
    138e:	41 c0       	rjmp	.+130    	; 0x1412 <izuvo_rx_pulse+0x14e>
			{
				tByte = swapByte((mZuvoUartByte>>1)&0xff);
    1390:	80 91 b9 01 	lds	r24, 0x01B9
    1394:	90 91 ba 01 	lds	r25, 0x01BA
    1398:	96 95       	lsr	r25
    139a:	87 95       	ror	r24
    139c:	65 df       	rcall	.-310    	; 0x1268 <swapByte>
    139e:	89 83       	std	Y+1, r24	; 0x01
				mZuvoData[mZuvoByteCnt]=tByte;
    13a0:	80 91 b8 01 	lds	r24, 0x01B8
    13a4:	88 2f       	mov	r24, r24
    13a6:	90 e0       	ldi	r25, 0x00	; 0
    13a8:	fc 01       	movw	r30, r24
    13aa:	e6 5e       	subi	r30, 0xE6	; 230
    13ac:	fb 4f       	sbci	r31, 0xFB	; 251
    13ae:	89 81       	ldd	r24, Y+1	; 0x01
    13b0:	80 83       	st	Z, r24
				mZuvoBitCnt  -=10;
    13b2:	80 91 b7 01 	lds	r24, 0x01B7
    13b6:	8a 50       	subi	r24, 0x0A	; 10
    13b8:	80 93 b7 01 	sts	0x01B7, r24
				mZuvoByteCnt +=1;
    13bc:	80 91 b8 01 	lds	r24, 0x01B8
    13c0:	8f 5f       	subi	r24, 0xFF	; 255
    13c2:	80 93 b8 01 	sts	0x01B8, r24
				if (tByte==0x0D)
    13c6:	89 81       	ldd	r24, Y+1	; 0x01
    13c8:	8d 30       	cpi	r24, 0x0D	; 13
    13ca:	19 f5       	brne	.+70     	; 0x1412 <izuvo_rx_pulse+0x14e>
				{
					if ((mLinuxMode==2) || (1))	
					{
					PORTC ^= (1 << LED2);
    13cc:	a5 e3       	ldi	r26, 0x35	; 53
    13ce:	b0 e0       	ldi	r27, 0x00	; 0
    13d0:	e5 e3       	ldi	r30, 0x35	; 53
    13d2:	f0 e0       	ldi	r31, 0x00	; 0
    13d4:	90 81       	ld	r25, Z
    13d6:	82 e0       	ldi	r24, 0x02	; 2
    13d8:	89 27       	eor	r24, r25
    13da:	8c 93       	st	X, r24
					u_puts(LinuxCmd);
    13dc:	89 e6       	ldi	r24, 0x69	; 105
    13de:	91 e0       	ldi	r25, 0x01	; 1
    13e0:	8d d7       	rcall	.+3866   	; 0x22fc <__data_load_end+0x9a6>
//					u_puts("Footer detected\r\n");
					for (j=0; j<mZuvoByteCnt; j++)
    13e2:	1a 82       	std	Y+2, r1	; 0x02
    13e4:	0b c0       	rjmp	.+22     	; 0x13fc <izuvo_rx_pulse+0x138>
					{
						u_putch(mZuvoData[j]);
    13e6:	8a 81       	ldd	r24, Y+2	; 0x02
    13e8:	88 2f       	mov	r24, r24
    13ea:	90 e0       	ldi	r25, 0x00	; 0
    13ec:	fc 01       	movw	r30, r24
    13ee:	e6 5e       	subi	r30, 0xE6	; 230
    13f0:	fb 4f       	sbci	r31, 0xFB	; 251
    13f2:	80 81       	ld	r24, Z
    13f4:	65 d7       	rcall	.+3786   	; 0x22c0 <__data_load_end+0x96a>
					if ((mLinuxMode==2) || (1))	
					{
					PORTC ^= (1 << LED2);
					u_puts(LinuxCmd);
//					u_puts("Footer detected\r\n");
					for (j=0; j<mZuvoByteCnt; j++)
    13f6:	8a 81       	ldd	r24, Y+2	; 0x02
    13f8:	8f 5f       	subi	r24, 0xFF	; 255
    13fa:	8a 83       	std	Y+2, r24	; 0x02
    13fc:	90 91 b8 01 	lds	r25, 0x01B8
    1400:	8a 81       	ldd	r24, Y+2	; 0x02
    1402:	89 17       	cp	r24, r25
    1404:	80 f3       	brcs	.-32     	; 0x13e6 <izuvo_rx_pulse+0x122>
					{
						u_putch(mZuvoData[j]);
					}
					u_puts("\r\n");
    1406:	8c e7       	ldi	r24, 0x7C	; 124
    1408:	91 e0       	ldi	r25, 0x01	; 1
    140a:	78 d7       	rcall	.+3824   	; 0x22fc <__data_load_end+0x9a6>
					}
					mZuvoIndex=0xff;
    140c:	8f ef       	ldi	r24, 0xFF	; 255
    140e:	80 93 68 01 	sts	0x0168, r24
	mZuvoHeader[0] = (mZuvoHeader[0] << 4) + (unit & 0x0f);


	if (mZuvoIndex<sizeof(mZuvoData))
	{
		for (i=0; i<unit; i++)
    1412:	8b 81       	ldd	r24, Y+3	; 0x03
    1414:	8f 5f       	subi	r24, 0xFF	; 255
    1416:	8b 83       	std	Y+3, r24	; 0x03
    1418:	9b 81       	ldd	r25, Y+3	; 0x03
    141a:	8c 81       	ldd	r24, Y+4	; 0x04
    141c:	98 17       	cp	r25, r24
    141e:	08 f4       	brcc	.+2      	; 0x1422 <izuvo_rx_pulse+0x15e>
    1420:	96 cf       	rjmp	.-212    	; 0x134e <izuvo_rx_pulse+0x8a>
				}
			}

		}

		mZuvoBit ^= 0x01;
    1422:	80 91 b6 01 	lds	r24, 0x01B6
    1426:	91 e0       	ldi	r25, 0x01	; 1
    1428:	89 27       	eor	r24, r25
    142a:	80 93 b6 01 	sts	0x01B6, r24
	}

	if (((mZuvoHeader[1]&0x0fff)==0x0A21) && (mZuvoHeader[0]==0x1141))
    142e:	80 91 b4 01 	lds	r24, 0x01B4
    1432:	90 91 b5 01 	lds	r25, 0x01B5
    1436:	9f 70       	andi	r25, 0x0F	; 15
    1438:	2a e0       	ldi	r18, 0x0A	; 10
    143a:	81 32       	cpi	r24, 0x21	; 33
    143c:	92 07       	cpc	r25, r18
    143e:	a1 f4       	brne	.+40     	; 0x1468 <izuvo_rx_pulse+0x1a4>
    1440:	80 91 b2 01 	lds	r24, 0x01B2
    1444:	90 91 b3 01 	lds	r25, 0x01B3
    1448:	21 e1       	ldi	r18, 0x11	; 17
    144a:	81 34       	cpi	r24, 0x41	; 65
    144c:	92 07       	cpc	r25, r18
    144e:	61 f4       	brne	.+24     	; 0x1468 <izuvo_rx_pulse+0x1a4>
	{
		mZuvoIndex=0;
    1450:	10 92 68 01 	sts	0x0168, r1
		mZuvoBit=0;
    1454:	10 92 b6 01 	sts	0x01B6, r1
		mZuvoBitCnt=0;
    1458:	10 92 b7 01 	sts	0x01B7, r1
		mZuvoByteCnt=0;
    145c:	10 92 b8 01 	sts	0x01B8, r1
		mZuvoUartByte=0;
    1460:	10 92 ba 01 	sts	0x01BA, r1
    1464:	10 92 b9 01 	sts	0x01B9, r1
//		u_puts("Header Detected\r\n");
	}

	if (mZuvoHeader[0]==0xaa)
    1468:	80 91 b2 01 	lds	r24, 0x01B2
    146c:	90 91 b3 01 	lds	r25, 0x01B3
    1470:	8a 3a       	cpi	r24, 0xAA	; 170
    1472:	91 05       	cpc	r25, r1
    1474:	19 f4       	brne	.+6      	; 0x147c <izuvo_rx_pulse+0x1b8>
	{
		mZuvoIndex=0xff;	
    1476:	8f ef       	ldi	r24, 0xFF	; 255
    1478:	80 93 68 01 	sts	0x0168, r24
	}


}
    147c:	26 96       	adiw	r28, 0x06	; 6
    147e:	0f b6       	in	r0, 0x3f	; 63
    1480:	f8 94       	cli
    1482:	de bf       	out	0x3e, r29	; 62
    1484:	0f be       	out	0x3f, r0	; 63
    1486:	cd bf       	out	0x3d, r28	; 61
    1488:	cf 91       	pop	r28
    148a:	df 91       	pop	r29
    148c:	08 95       	ret

0000148e <izuvo_rx_unit>:

unsigned char izuvo_rx_unit(unsigned int iCnt)
{
    148e:	df 93       	push	r29
    1490:	cf 93       	push	r28
    1492:	00 d0       	rcall	.+0      	; 0x1494 <izuvo_rx_unit+0x6>
    1494:	00 d0       	rcall	.+0      	; 0x1496 <izuvo_rx_unit+0x8>
    1496:	cd b7       	in	r28, 0x3d	; 61
    1498:	de b7       	in	r29, 0x3e	; 62
    149a:	9c 83       	std	Y+4, r25	; 0x04
    149c:	8b 83       	std	Y+3, r24	; 0x03

	unsigned char unit;
	unsigned char iByte;

	if (iCnt > 0xff)
    149e:	8b 81       	ldd	r24, Y+3	; 0x03
    14a0:	9c 81       	ldd	r25, Y+4	; 0x04
    14a2:	8f 3f       	cpi	r24, 0xFF	; 255
    14a4:	91 05       	cpc	r25, r1
    14a6:	21 f0       	breq	.+8      	; 0x14b0 <izuvo_rx_unit+0x22>
    14a8:	18 f0       	brcs	.+6      	; 0x14b0 <izuvo_rx_unit+0x22>
	{
		iByte = 0xff;
    14aa:	8f ef       	ldi	r24, 0xFF	; 255
    14ac:	89 83       	std	Y+1, r24	; 0x01
    14ae:	02 c0       	rjmp	.+4      	; 0x14b4 <izuvo_rx_unit+0x26>
	}
	else
	{
		iByte = iCnt & 0xff;
    14b0:	8b 81       	ldd	r24, Y+3	; 0x03
    14b2:	89 83       	std	Y+1, r24	; 0x01
	}


	if (iByte < ((unit_base*2) - unit_tol))
    14b4:	89 81       	ldd	r24, Y+1	; 0x01
    14b6:	8e 31       	cpi	r24, 0x1E	; 30
    14b8:	18 f4       	brcc	.+6      	; 0x14c0 <izuvo_rx_unit+0x32>
	{
		unit = 1;
    14ba:	81 e0       	ldi	r24, 0x01	; 1
    14bc:	8a 83       	std	Y+2, r24	; 0x02
    14be:	32 c0       	rjmp	.+100    	; 0x1524 <izuvo_rx_unit+0x96>
	}
	else if (iByte < ((unit_base*3) - unit_tol))
    14c0:	89 81       	ldd	r24, Y+1	; 0x01
    14c2:	81 33       	cpi	r24, 0x31	; 49
    14c4:	18 f4       	brcc	.+6      	; 0x14cc <izuvo_rx_unit+0x3e>
	{
		unit = 2;
    14c6:	82 e0       	ldi	r24, 0x02	; 2
    14c8:	8a 83       	std	Y+2, r24	; 0x02
    14ca:	2c c0       	rjmp	.+88     	; 0x1524 <izuvo_rx_unit+0x96>
	}
	else if (iByte < ((unit_base*4) - unit_tol))
    14cc:	89 81       	ldd	r24, Y+1	; 0x01
    14ce:	84 34       	cpi	r24, 0x44	; 68
    14d0:	18 f4       	brcc	.+6      	; 0x14d8 <izuvo_rx_unit+0x4a>
	{
		unit = 3;
    14d2:	83 e0       	ldi	r24, 0x03	; 3
    14d4:	8a 83       	std	Y+2, r24	; 0x02
    14d6:	26 c0       	rjmp	.+76     	; 0x1524 <izuvo_rx_unit+0x96>
	}
	else if (iByte < ((unit_base*5) - unit_tol))
    14d8:	89 81       	ldd	r24, Y+1	; 0x01
    14da:	87 35       	cpi	r24, 0x57	; 87
    14dc:	18 f4       	brcc	.+6      	; 0x14e4 <izuvo_rx_unit+0x56>
	{
		unit = 4;
    14de:	84 e0       	ldi	r24, 0x04	; 4
    14e0:	8a 83       	std	Y+2, r24	; 0x02
    14e2:	20 c0       	rjmp	.+64     	; 0x1524 <izuvo_rx_unit+0x96>
	}
	else if (iByte < ((unit_base*6) - unit_tol))
    14e4:	89 81       	ldd	r24, Y+1	; 0x01
    14e6:	8a 36       	cpi	r24, 0x6A	; 106
    14e8:	18 f4       	brcc	.+6      	; 0x14f0 <izuvo_rx_unit+0x62>
	{
		unit = 5;
    14ea:	85 e0       	ldi	r24, 0x05	; 5
    14ec:	8a 83       	std	Y+2, r24	; 0x02
    14ee:	1a c0       	rjmp	.+52     	; 0x1524 <izuvo_rx_unit+0x96>
	}
	else if (iByte < ((unit_base*7) - unit_tol))
    14f0:	89 81       	ldd	r24, Y+1	; 0x01
    14f2:	8d 37       	cpi	r24, 0x7D	; 125
    14f4:	18 f4       	brcc	.+6      	; 0x14fc <izuvo_rx_unit+0x6e>
	{
		unit = 6;
    14f6:	86 e0       	ldi	r24, 0x06	; 6
    14f8:	8a 83       	std	Y+2, r24	; 0x02
    14fa:	14 c0       	rjmp	.+40     	; 0x1524 <izuvo_rx_unit+0x96>
	}
	else if (iByte < ((unit_base*8) - unit_tol))
    14fc:	89 81       	ldd	r24, Y+1	; 0x01
    14fe:	80 39       	cpi	r24, 0x90	; 144
    1500:	18 f4       	brcc	.+6      	; 0x1508 <izuvo_rx_unit+0x7a>
	{
		unit = 7;
    1502:	87 e0       	ldi	r24, 0x07	; 7
    1504:	8a 83       	std	Y+2, r24	; 0x02
    1506:	0e c0       	rjmp	.+28     	; 0x1524 <izuvo_rx_unit+0x96>
	}
	else if (iByte < ((unit_base*9) - unit_tol))
    1508:	89 81       	ldd	r24, Y+1	; 0x01
    150a:	83 3a       	cpi	r24, 0xA3	; 163
    150c:	18 f4       	brcc	.+6      	; 0x1514 <izuvo_rx_unit+0x86>
	{
		unit = 8;
    150e:	88 e0       	ldi	r24, 0x08	; 8
    1510:	8a 83       	std	Y+2, r24	; 0x02
    1512:	08 c0       	rjmp	.+16     	; 0x1524 <izuvo_rx_unit+0x96>
	}
	else if (iByte < ((unit_base*10) - unit_tol))
    1514:	89 81       	ldd	r24, Y+1	; 0x01
    1516:	86 3b       	cpi	r24, 0xB6	; 182
    1518:	18 f4       	brcc	.+6      	; 0x1520 <izuvo_rx_unit+0x92>
	{
		unit = 9;
    151a:	89 e0       	ldi	r24, 0x09	; 9
    151c:	8a 83       	std	Y+2, r24	; 0x02
    151e:	02 c0       	rjmp	.+4      	; 0x1524 <izuvo_rx_unit+0x96>
	}
	else
	{
		unit = 10;
    1520:	8a e0       	ldi	r24, 0x0A	; 10
    1522:	8a 83       	std	Y+2, r24	; 0x02
	}

	return (unit);
    1524:	8a 81       	ldd	r24, Y+2	; 0x02

}
    1526:	0f 90       	pop	r0
    1528:	0f 90       	pop	r0
    152a:	0f 90       	pop	r0
    152c:	0f 90       	pop	r0
    152e:	cf 91       	pop	r28
    1530:	df 91       	pop	r29
    1532:	08 95       	ret

00001534 <izuvo_decode_byte>:


void izuvo_decode_byte(unsigned char iByte)
{
    1534:	df 93       	push	r29
    1536:	cf 93       	push	r28
    1538:	00 d0       	rcall	.+0      	; 0x153a <izuvo_decode_byte+0x6>
    153a:	00 d0       	rcall	.+0      	; 0x153c <izuvo_decode_byte+0x8>
    153c:	0f 92       	push	r0
    153e:	cd b7       	in	r28, 0x3d	; 61
    1540:	de b7       	in	r29, 0x3e	; 62
    1542:	8d 83       	std	Y+5, r24	; 0x05
		static unsigned int tRx;
		unsigned char i;

//		unit = izuvo_rx_unit(iByte);

		if (iByte < ((unit_base*2) - unit_tol))
    1544:	8d 81       	ldd	r24, Y+5	; 0x05
    1546:	8e 31       	cpi	r24, 0x1E	; 30
    1548:	18 f4       	brcc	.+6      	; 0x1550 <izuvo_decode_byte+0x1c>
		{
			unit = 1;
    154a:	81 e0       	ldi	r24, 0x01	; 1
    154c:	8c 83       	std	Y+4, r24	; 0x04
    154e:	32 c0       	rjmp	.+100    	; 0x15b4 <izuvo_decode_byte+0x80>
		}
		else if (iByte < ((unit_base*3) - unit_tol))
    1550:	8d 81       	ldd	r24, Y+5	; 0x05
    1552:	81 33       	cpi	r24, 0x31	; 49
    1554:	18 f4       	brcc	.+6      	; 0x155c <izuvo_decode_byte+0x28>
		{
			unit = 2;
    1556:	82 e0       	ldi	r24, 0x02	; 2
    1558:	8c 83       	std	Y+4, r24	; 0x04
    155a:	2c c0       	rjmp	.+88     	; 0x15b4 <izuvo_decode_byte+0x80>
		}
		else if (iByte < ((unit_base*4) - unit_tol))
    155c:	8d 81       	ldd	r24, Y+5	; 0x05
    155e:	84 34       	cpi	r24, 0x44	; 68
    1560:	18 f4       	brcc	.+6      	; 0x1568 <izuvo_decode_byte+0x34>
		{
			unit = 3;
    1562:	83 e0       	ldi	r24, 0x03	; 3
    1564:	8c 83       	std	Y+4, r24	; 0x04
    1566:	26 c0       	rjmp	.+76     	; 0x15b4 <izuvo_decode_byte+0x80>
		}
		else if (iByte < ((unit_base*5) - unit_tol))
    1568:	8d 81       	ldd	r24, Y+5	; 0x05
    156a:	87 35       	cpi	r24, 0x57	; 87
    156c:	18 f4       	brcc	.+6      	; 0x1574 <izuvo_decode_byte+0x40>
		{
			unit = 4;
    156e:	84 e0       	ldi	r24, 0x04	; 4
    1570:	8c 83       	std	Y+4, r24	; 0x04
    1572:	20 c0       	rjmp	.+64     	; 0x15b4 <izuvo_decode_byte+0x80>
		}
		else if (iByte < ((unit_base*6) - unit_tol))
    1574:	8d 81       	ldd	r24, Y+5	; 0x05
    1576:	8a 36       	cpi	r24, 0x6A	; 106
    1578:	18 f4       	brcc	.+6      	; 0x1580 <izuvo_decode_byte+0x4c>
		{
			unit = 5;
    157a:	85 e0       	ldi	r24, 0x05	; 5
    157c:	8c 83       	std	Y+4, r24	; 0x04
    157e:	1a c0       	rjmp	.+52     	; 0x15b4 <izuvo_decode_byte+0x80>
		}
		else if (iByte < ((unit_base*7) - unit_tol))
    1580:	8d 81       	ldd	r24, Y+5	; 0x05
    1582:	8d 37       	cpi	r24, 0x7D	; 125
    1584:	18 f4       	brcc	.+6      	; 0x158c <izuvo_decode_byte+0x58>
		{
			unit = 6;
    1586:	86 e0       	ldi	r24, 0x06	; 6
    1588:	8c 83       	std	Y+4, r24	; 0x04
    158a:	14 c0       	rjmp	.+40     	; 0x15b4 <izuvo_decode_byte+0x80>
		}
		else if (iByte < ((unit_base*8) - unit_tol))
    158c:	8d 81       	ldd	r24, Y+5	; 0x05
    158e:	80 39       	cpi	r24, 0x90	; 144
    1590:	18 f4       	brcc	.+6      	; 0x1598 <izuvo_decode_byte+0x64>
		{
			unit = 7;
    1592:	87 e0       	ldi	r24, 0x07	; 7
    1594:	8c 83       	std	Y+4, r24	; 0x04
    1596:	0e c0       	rjmp	.+28     	; 0x15b4 <izuvo_decode_byte+0x80>
		}
		else if (iByte < ((unit_base*9) - unit_tol))
    1598:	8d 81       	ldd	r24, Y+5	; 0x05
    159a:	83 3a       	cpi	r24, 0xA3	; 163
    159c:	18 f4       	brcc	.+6      	; 0x15a4 <izuvo_decode_byte+0x70>
		{
			unit = 8;
    159e:	88 e0       	ldi	r24, 0x08	; 8
    15a0:	8c 83       	std	Y+4, r24	; 0x04
    15a2:	08 c0       	rjmp	.+16     	; 0x15b4 <izuvo_decode_byte+0x80>
		}
		else if (iByte < ((unit_base*10) - unit_tol))
    15a4:	8d 81       	ldd	r24, Y+5	; 0x05
    15a6:	86 3b       	cpi	r24, 0xB6	; 182
    15a8:	18 f4       	brcc	.+6      	; 0x15b0 <izuvo_decode_byte+0x7c>
		{
			unit = 9;
    15aa:	89 e0       	ldi	r24, 0x09	; 9
    15ac:	8c 83       	std	Y+4, r24	; 0x04
    15ae:	02 c0       	rjmp	.+4      	; 0x15b4 <izuvo_decode_byte+0x80>
		}
		else
		{
			unit = 10;
    15b0:	8a e0       	ldi	r24, 0x0A	; 10
    15b2:	8c 83       	std	Y+4, r24	; 0x04
		}

		// Valid bit(s)
		if (unit<10)
    15b4:	8c 81       	ldd	r24, Y+4	; 0x04
    15b6:	8a 30       	cpi	r24, 0x0A	; 10
    15b8:	18 f5       	brcc	.+70     	; 0x1600 <izuvo_decode_byte+0xcc>
		{

			for (i=0; i<unit; i++)
    15ba:	19 82       	std	Y+1, r1	; 0x01
    15bc:	1d c0       	rjmp	.+58     	; 0x15f8 <izuvo_decode_byte+0xc4>
			{
				tRx = (tRx << 1);
    15be:	80 91 bc 01 	lds	r24, 0x01BC
    15c2:	90 91 bd 01 	lds	r25, 0x01BD
    15c6:	88 0f       	add	r24, r24
    15c8:	99 1f       	adc	r25, r25
    15ca:	90 93 bd 01 	sts	0x01BD, r25
    15ce:	80 93 bc 01 	sts	0x01BC, r24

				if (mDecodeBit==1)
    15d2:	80 91 3f 04 	lds	r24, 0x043F
    15d6:	90 91 40 04 	lds	r25, 0x0440
    15da:	81 30       	cpi	r24, 0x01	; 1
    15dc:	91 05       	cpc	r25, r1
    15de:	49 f4       	brne	.+18     	; 0x15f2 <izuvo_decode_byte+0xbe>
				{
					tRx = tRx +1;
    15e0:	80 91 bc 01 	lds	r24, 0x01BC
    15e4:	90 91 bd 01 	lds	r25, 0x01BD
    15e8:	01 96       	adiw	r24, 0x01	; 1
    15ea:	90 93 bd 01 	sts	0x01BD, r25
    15ee:	80 93 bc 01 	sts	0x01BC, r24

		// Valid bit(s)
		if (unit<10)
		{

			for (i=0; i<unit; i++)
    15f2:	89 81       	ldd	r24, Y+1	; 0x01
    15f4:	8f 5f       	subi	r24, 0xFF	; 255
    15f6:	89 83       	std	Y+1, r24	; 0x01
    15f8:	99 81       	ldd	r25, Y+1	; 0x01
    15fa:	8c 81       	ldd	r24, Y+4	; 0x04
    15fc:	98 17       	cp	r25, r24
    15fe:	f8 f2       	brcs	.-66     	; 0x15be <izuvo_decode_byte+0x8a>
				}
			}
					
		}

		mDecodeBit ^= 0x01;
    1600:	20 91 3f 04 	lds	r18, 0x043F
    1604:	30 91 40 04 	lds	r19, 0x0440
    1608:	81 e0       	ldi	r24, 0x01	; 1
    160a:	90 e0       	ldi	r25, 0x00	; 0
    160c:	82 27       	eor	r24, r18
    160e:	93 27       	eor	r25, r19
    1610:	90 93 40 04 	sts	0x0440, r25
    1614:	80 93 3f 04 	sts	0x043F, r24

		mDecodeIndex = mDecodeIndex + unit;
    1618:	8c 81       	ldd	r24, Y+4	; 0x04
    161a:	28 2f       	mov	r18, r24
    161c:	30 e0       	ldi	r19, 0x00	; 0
    161e:	80 91 18 04 	lds	r24, 0x0418
    1622:	90 91 19 04 	lds	r25, 0x0419
    1626:	82 0f       	add	r24, r18
    1628:	93 1f       	adc	r25, r19
    162a:	90 93 19 04 	sts	0x0419, r25
    162e:	80 93 18 04 	sts	0x0418, r24

		u_putHexByte(unit,0x00);
    1632:	8c 81       	ldd	r24, Y+4	; 0x04
    1634:	60 e0       	ldi	r22, 0x00	; 0
    1636:	1e d6       	rcall	.+3132   	; 0x2274 <__data_load_end+0x91e>
		u_puts(" ");		
    1638:	8f e7       	ldi	r24, 0x7F	; 127
    163a:	91 e0       	ldi	r25, 0x01	; 1
    163c:	5f d6       	rcall	.+3262   	; 0x22fc <__data_load_end+0x9a6>
//		u_putHexWord(mDecodeIndex&0xff);
//		u_puts(" ");		

		tIndex = mDecodeIndex;
    163e:	80 91 18 04 	lds	r24, 0x0418
    1642:	90 91 19 04 	lds	r25, 0x0419
    1646:	9b 83       	std	Y+3, r25	; 0x03
    1648:	8a 83       	std	Y+2, r24	; 0x02
    164a:	4f c0       	rjmp	.+158    	; 0x16ea <izuvo_decode_byte+0x1b6>

		while (tIndex >=0x0A)
		{
			tIndex = tIndex - 0x0A;
    164c:	8a 81       	ldd	r24, Y+2	; 0x02
    164e:	9b 81       	ldd	r25, Y+3	; 0x03
    1650:	0a 97       	sbiw	r24, 0x0a	; 10
    1652:	9b 83       	std	Y+3, r25	; 0x03
    1654:	8a 83       	std	Y+2, r24	; 0x02
			if (tIndex ==0)
    1656:	8a 81       	ldd	r24, Y+2	; 0x02
    1658:	9b 81       	ldd	r25, Y+3	; 0x03
    165a:	00 97       	sbiw	r24, 0x00	; 0
    165c:	09 f0       	breq	.+2      	; 0x1660 <izuvo_decode_byte+0x12c>
    165e:	45 c0       	rjmp	.+138    	; 0x16ea <izuvo_decode_byte+0x1b6>
			{
				tRx = swapByte((tRx>>1) & 0xff);
    1660:	80 91 bc 01 	lds	r24, 0x01BC
    1664:	90 91 bd 01 	lds	r25, 0x01BD
    1668:	96 95       	lsr	r25
    166a:	87 95       	ror	r24
    166c:	fd dd       	rcall	.-1030   	; 0x1268 <swapByte>
    166e:	88 2f       	mov	r24, r24
    1670:	90 e0       	ldi	r25, 0x00	; 0
    1672:	90 93 bd 01 	sts	0x01BD, r25
    1676:	80 93 bc 01 	sts	0x01BC, r24
				mDecodeData[0] +=1;
    167a:	80 91 64 02 	lds	r24, 0x0264
    167e:	8f 5f       	subi	r24, 0xFF	; 255
    1680:	80 93 64 02 	sts	0x0264, r24
				mDecodeData[mDecodeData[0]]= tRx;
    1684:	80 91 64 02 	lds	r24, 0x0264
    1688:	28 2f       	mov	r18, r24
    168a:	30 e0       	ldi	r19, 0x00	; 0
    168c:	80 91 bc 01 	lds	r24, 0x01BC
    1690:	90 91 bd 01 	lds	r25, 0x01BD
    1694:	f9 01       	movw	r30, r18
    1696:	ec 59       	subi	r30, 0x9C	; 156
    1698:	fd 4f       	sbci	r31, 0xFD	; 253
    169a:	80 83       	st	Z, r24
//				u_putHexByte(mDecodeData[mDecodeData[0]],'_');
//				u_putHexByte(mDecodeData[0],'-');
//				u_putHexWord(mDecodeIndex&0xff);
				u_puts("\r\n");	
    169c:	8c e7       	ldi	r24, 0x7C	; 124
    169e:	91 e0       	ldi	r25, 0x01	; 1
    16a0:	2d d6       	rcall	.+3162   	; 0x22fc <__data_load_end+0x9a6>
				if (tRx==0x0D)
    16a2:	80 91 bc 01 	lds	r24, 0x01BC
    16a6:	90 91 bd 01 	lds	r25, 0x01BD
    16aa:	8d 30       	cpi	r24, 0x0D	; 13
    16ac:	91 05       	cpc	r25, r1
    16ae:	c9 f4       	brne	.+50     	; 0x16e2 <izuvo_decode_byte+0x1ae>
				{
					u_puts("End detected\r\n");
    16b0:	81 e8       	ldi	r24, 0x81	; 129
    16b2:	91 e0       	ldi	r25, 0x01	; 1
    16b4:	23 d6       	rcall	.+3142   	; 0x22fc <__data_load_end+0x9a6>
					for (i=1; i<mDecodeData[0]; i++)
    16b6:	81 e0       	ldi	r24, 0x01	; 1
    16b8:	89 83       	std	Y+1, r24	; 0x01
    16ba:	0b c0       	rjmp	.+22     	; 0x16d2 <izuvo_decode_byte+0x19e>
					{
						u_putch(mDecodeData[i]);
    16bc:	89 81       	ldd	r24, Y+1	; 0x01
    16be:	88 2f       	mov	r24, r24
    16c0:	90 e0       	ldi	r25, 0x00	; 0
    16c2:	fc 01       	movw	r30, r24
    16c4:	ec 59       	subi	r30, 0x9C	; 156
    16c6:	fd 4f       	sbci	r31, 0xFD	; 253
    16c8:	80 81       	ld	r24, Z
    16ca:	fa d5       	rcall	.+3060   	; 0x22c0 <__data_load_end+0x96a>
//				u_putHexWord(mDecodeIndex&0xff);
				u_puts("\r\n");	
				if (tRx==0x0D)
				{
					u_puts("End detected\r\n");
					for (i=1; i<mDecodeData[0]; i++)
    16cc:	89 81       	ldd	r24, Y+1	; 0x01
    16ce:	8f 5f       	subi	r24, 0xFF	; 255
    16d0:	89 83       	std	Y+1, r24	; 0x01
    16d2:	90 91 64 02 	lds	r25, 0x0264
    16d6:	89 81       	ldd	r24, Y+1	; 0x01
    16d8:	89 17       	cp	r24, r25
    16da:	80 f3       	brcs	.-32     	; 0x16bc <izuvo_decode_byte+0x188>
					{
						u_putch(mDecodeData[i]);
					}
					u_puts("\r\n");
    16dc:	8c e7       	ldi	r24, 0x7C	; 124
    16de:	91 e0       	ldi	r25, 0x01	; 1
    16e0:	0d d6       	rcall	.+3098   	; 0x22fc <__data_load_end+0x9a6>
//					u_putHexByte(mDecodeData[0],' ');
				}
				tRx = 0x00;
    16e2:	10 92 bd 01 	sts	0x01BD, r1
    16e6:	10 92 bc 01 	sts	0x01BC, r1
//		u_putHexWord(mDecodeIndex&0xff);
//		u_puts(" ");		

		tIndex = mDecodeIndex;

		while (tIndex >=0x0A)
    16ea:	8a 81       	ldd	r24, Y+2	; 0x02
    16ec:	9b 81       	ldd	r25, Y+3	; 0x03
    16ee:	8a 30       	cpi	r24, 0x0A	; 10
    16f0:	91 05       	cpc	r25, r1
    16f2:	08 f0       	brcs	.+2      	; 0x16f6 <izuvo_decode_byte+0x1c2>
    16f4:	ab cf       	rjmp	.-170    	; 0x164c <izuvo_decode_byte+0x118>

			}
		}


}
    16f6:	0f 90       	pop	r0
    16f8:	0f 90       	pop	r0
    16fa:	0f 90       	pop	r0
    16fc:	0f 90       	pop	r0
    16fe:	0f 90       	pop	r0
    1700:	cf 91       	pop	r28
    1702:	df 91       	pop	r29
    1704:	08 95       	ret

00001706 <izuvo_decode_data>:

void izuvo_decode_data(void)
{
    1706:	df 93       	push	r29
    1708:	cf 93       	push	r28
    170a:	00 d0       	rcall	.+0      	; 0x170c <izuvo_decode_data+0x6>
    170c:	0f 92       	push	r0
    170e:	cd b7       	in	r28, 0x3d	; 61
    1710:	de b7       	in	r29, 0x3e	; 62

		unsigned char i ;
		unsigned int tPulse;

		u_puts("decode data :");		// 
    1712:	80 e9       	ldi	r24, 0x90	; 144
    1714:	91 e0       	ldi	r25, 0x01	; 1
    1716:	f2 d5       	rcall	.+3044   	; 0x22fc <__data_load_end+0x9a6>

		mDecodeIndex=0;
    1718:	10 92 19 04 	sts	0x0419, r1
    171c:	10 92 18 04 	sts	0x0418, r1
		mDecodeBit = 0;
    1720:	10 92 40 04 	sts	0x0440, r1
    1724:	10 92 3f 04 	sts	0x043F, r1
		mDecodeData[0]=0x00;
    1728:	10 92 64 02 	sts	0x0264, r1

		for (i=mPulseIndex; i<= (mCaptureIndex&0xff); i++)
    172c:	80 91 aa 01 	lds	r24, 0x01AA
    1730:	8b 83       	std	Y+3, r24	; 0x03
    1732:	20 c0       	rjmp	.+64     	; 0x1774 <izuvo_decode_data+0x6e>
		{
		
			tPulse = mCapturePulse[i];
    1734:	8b 81       	ldd	r24, Y+3	; 0x03
    1736:	88 2f       	mov	r24, r24
    1738:	90 e0       	ldi	r25, 0x00	; 0
    173a:	88 0f       	add	r24, r24
    173c:	99 1f       	adc	r25, r25
    173e:	fc 01       	movw	r30, r24
    1740:	ea 57       	subi	r30, 0x7A	; 122
    1742:	fd 4f       	sbci	r31, 0xFD	; 253
    1744:	80 81       	ld	r24, Z
    1746:	91 81       	ldd	r25, Z+1	; 0x01
    1748:	9a 83       	std	Y+2, r25	; 0x02
    174a:	89 83       	std	Y+1, r24	; 0x01
			tPulse = tPulse >> 1;
    174c:	89 81       	ldd	r24, Y+1	; 0x01
    174e:	9a 81       	ldd	r25, Y+2	; 0x02
    1750:	96 95       	lsr	r25
    1752:	87 95       	ror	r24
    1754:	9a 83       	std	Y+2, r25	; 0x02
    1756:	89 83       	std	Y+1, r24	; 0x01
			if (tPulse>0xff)
    1758:	89 81       	ldd	r24, Y+1	; 0x01
    175a:	9a 81       	ldd	r25, Y+2	; 0x02
    175c:	8f 3f       	cpi	r24, 0xFF	; 255
    175e:	91 05       	cpc	r25, r1
    1760:	21 f0       	breq	.+8      	; 0x176a <izuvo_decode_data+0x64>
    1762:	18 f0       	brcs	.+6      	; 0x176a <izuvo_decode_data+0x64>
				izuvo_decode_byte(0xff);
    1764:	8f ef       	ldi	r24, 0xFF	; 255
    1766:	e6 de       	rcall	.-564    	; 0x1534 <izuvo_decode_byte>
    1768:	02 c0       	rjmp	.+4      	; 0x176e <izuvo_decode_data+0x68>
			else
				izuvo_decode_byte(tPulse  & 0xff);
    176a:	89 81       	ldd	r24, Y+1	; 0x01
    176c:	e3 de       	rcall	.-570    	; 0x1534 <izuvo_decode_byte>

		mDecodeIndex=0;
		mDecodeBit = 0;
		mDecodeData[0]=0x00;

		for (i=mPulseIndex; i<= (mCaptureIndex&0xff); i++)
    176e:	8b 81       	ldd	r24, Y+3	; 0x03
    1770:	8f 5f       	subi	r24, 0xFF	; 255
    1772:	8b 83       	std	Y+3, r24	; 0x03
    1774:	8b 81       	ldd	r24, Y+3	; 0x03
    1776:	28 2f       	mov	r18, r24
    1778:	30 e0       	ldi	r19, 0x00	; 0
    177a:	80 91 84 02 	lds	r24, 0x0284
    177e:	90 91 85 02 	lds	r25, 0x0285
    1782:	90 70       	andi	r25, 0x00	; 0
    1784:	82 17       	cp	r24, r18
    1786:	93 07       	cpc	r25, r19
    1788:	a8 f6       	brcc	.-86     	; 0x1734 <izuvo_decode_data+0x2e>
			else
				izuvo_decode_byte(tPulse  & 0xff);
		
		}

		for (i=1; i<mDecodeData[0]; i++)
    178a:	81 e0       	ldi	r24, 0x01	; 1
    178c:	8b 83       	std	Y+3, r24	; 0x03
    178e:	0b c0       	rjmp	.+22     	; 0x17a6 <izuvo_decode_data+0xa0>
		{
			u_putch(mDecodeData[i]);	
    1790:	8b 81       	ldd	r24, Y+3	; 0x03
    1792:	88 2f       	mov	r24, r24
    1794:	90 e0       	ldi	r25, 0x00	; 0
    1796:	fc 01       	movw	r30, r24
    1798:	ec 59       	subi	r30, 0x9C	; 156
    179a:	fd 4f       	sbci	r31, 0xFD	; 253
    179c:	80 81       	ld	r24, Z
    179e:	90 d5       	rcall	.+2848   	; 0x22c0 <__data_load_end+0x96a>
			else
				izuvo_decode_byte(tPulse  & 0xff);
		
		}

		for (i=1; i<mDecodeData[0]; i++)
    17a0:	8b 81       	ldd	r24, Y+3	; 0x03
    17a2:	8f 5f       	subi	r24, 0xFF	; 255
    17a4:	8b 83       	std	Y+3, r24	; 0x03
    17a6:	90 91 64 02 	lds	r25, 0x0264
    17aa:	8b 81       	ldd	r24, Y+3	; 0x03
    17ac:	89 17       	cp	r24, r25
    17ae:	80 f3       	brcs	.-32     	; 0x1790 <izuvo_decode_data+0x8a>
		{
			u_putch(mDecodeData[i]);	
		}

		u_puts("\r\n");
    17b0:	8c e7       	ldi	r24, 0x7C	; 124
    17b2:	91 e0       	ldi	r25, 0x01	; 1
    17b4:	a3 d5       	rcall	.+2886   	; 0x22fc <__data_load_end+0x9a6>


}
    17b6:	0f 90       	pop	r0
    17b8:	0f 90       	pop	r0
    17ba:	0f 90       	pop	r0
    17bc:	cf 91       	pop	r28
    17be:	df 91       	pop	r29
    17c0:	08 95       	ret

000017c2 <ir_capture_pulse>:

void ir_capture_pulse(void)
{
    17c2:	df 93       	push	r29
    17c4:	cf 93       	push	r28
    17c6:	00 d0       	rcall	.+0      	; 0x17c8 <ir_capture_pulse+0x6>
    17c8:	00 d0       	rcall	.+0      	; 0x17ca <ir_capture_pulse+0x8>
    17ca:	cd b7       	in	r28, 0x3d	; 61
    17cc:	de b7       	in	r29, 0x3e	; 62
//	This function should be call @ every 200mS

	unsigned char i;
	unsigned char index;
//	unsigned char j=0;
	mCaptureState ++;
    17ce:	80 91 63 02 	lds	r24, 0x0263
    17d2:	8f 5f       	subi	r24, 0xFF	; 255
    17d4:	80 93 63 02 	sts	0x0263, r24
	unsigned int tPulse;

	// 2second time out OR buffer full
	if ((mCaptureState>mCaptureRepeat) || (mCaptureIndex==sizeof(mCapturePulse)/2))
    17d8:	90 91 63 02 	lds	r25, 0x0263
    17dc:	80 91 3a 04 	lds	r24, 0x043A
    17e0:	89 17       	cp	r24, r25
    17e2:	38 f0       	brcs	.+14     	; 0x17f2 <ir_capture_pulse+0x30>
    17e4:	80 91 84 02 	lds	r24, 0x0284
    17e8:	90 91 85 02 	lds	r25, 0x0285
    17ec:	88 3c       	cpi	r24, 0xC8	; 200
    17ee:	91 05       	cpc	r25, r1
    17f0:	51 f4       	brne	.+20     	; 0x1806 <ir_capture_pulse+0x44>
	{
		TCCR1B = 0b00000000;	// Disable Input Capture
    17f2:	ee e4       	ldi	r30, 0x4E	; 78
    17f4:	f0 e0       	ldi	r31, 0x00	; 0
    17f6:	10 82       	st	Z, r1
		index = mCaptureIndex & 0xff;
    17f8:	80 91 84 02 	lds	r24, 0x0284
    17fc:	90 91 85 02 	lds	r25, 0x0285
    1800:	8b 83       	std	Y+3, r24	; 0x03
		mFunctionMode = 0;	// Change it to Idle mode
    1802:	10 92 a3 01 	sts	0x01A3, r1
		u_puts("'\r\n");
		mCaptureIndex = 0;
*/
	}
	
}
    1806:	0f 90       	pop	r0
    1808:	0f 90       	pop	r0
    180a:	0f 90       	pop	r0
    180c:	0f 90       	pop	r0
    180e:	cf 91       	pop	r28
    1810:	df 91       	pop	r29
    1812:	08 95       	ret

00001814 <_exit>:
    1814:	f8 94       	cli

00001816 <__stop_program>:
    1816:	ff cf       	rjmp	.-2      	; 0x1816 <__stop_program>
