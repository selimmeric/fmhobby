//////////////////////// /***********************************************************************
/*               恒温系统 程序 此程序为视频程序
LCD1602显示  rs P3^5  rw P3^6  ep P3^7  P2口 为数据输出口
DS18B20 温度采集 数据脚为P1^7
继电器 使能控制IO口P1^5
定时器控制时钟显示
5个按键 分别是三个功能键两个加减键


***********************************************************************///////////////////////



#include<reg52.h>
#include <intrins.h>
#define uchar unsigned char
#define uint unsigned int



 
uchar x,s1num,s2num,s3num,wd,yz1=1,yz2=1; 

int shi,fen,miao,bz=0;
void keyscan();
uchar code asc[] = "0123456789";                         //1602 数字调用数组



uchar code a[] ={
0x02,0x1a,0x1a,0x1f,0x1a,0x1e,0x1a,0x04,//时       0
0x17,0x01,0x15,0x15,0x15,0x15,0x11,0x12,//间       1
0x07,0x15,0x07,0x10,0x07,0x17,0x07,0x1f,//温       2
0x04,0x1f,0x15,0x17,0x10,0x17,0x12,0x15,//度       3
0x18,0x18,0x06,0x09,0x10,0x10,0x09,0x06,//C        4
0x12,0x13,0x07,0x00,0x17,0x15,0x15,0x19,//请       5 
0x17,0x05,0x15,0x10,0x17,0x15,0x12,0x15,//设       6
0x1f,0x1f,0x04,0x1f,0x04,0x0e,0x0a,0x1f,//置       7          汉字 或者点阵式字符只能显示64个字节

               };	



 
sbit rs=P3^5;              //1602使能IO口
sbit rw=P3^6;
sbit ep=P3^7;


sbit k1 = P1^0; //加
sbit k2 = P1^1; //减
sbit k3 = P1^2; //选择
sbit k4 = P1^3; //温度设置选择件
sbit k5 = P1^4; //加热开关按键
sbit jd = P1^5; //继电器
sbit led= P1^6; //继电器开始指示灯

uint t,m;
sbit DQ=P1^7;//ds18b20 端口

uchar  flag_get;  //温度 数据存储函数


//**************温度小数部分用查表法***********//
uchar code ditab[]=
{0x00,0x01,0x01,0x02,0x03,0x03,0x04,0x04,0x05,0x06,0x06,0x07,0x08,0x08,0x09,0x09};
//

/*************************************************************************************/
void delay1(unsigned int i)//延时函数
{
 while(i--);
}



/*******************************************************************/      
/*                                                                         
/*    DS18B20驱动程序                                                     

     
/*                                                                         
/*******************************************************************/ 

/****************DS18B20复位函数************************/
ow_reset(void)
{

 
    DQ=1;//从高拉倒低
    delay1(8);
    DQ=0;
    delay1(50);           //550 us
    DQ=1;
    delay1(45);            //延时500 us  这是DQ应该为0 说明复位成功 这里没有用死循环判断 怕干扰时钟


    DQ=1;                   //拉高电平
}


/****************DS18B20写命令函数************************/
//向1-WIRE 总线上写1个字节
void write_byte(uchar val)
{
  uchar i;
  for(i=8;i>0;i--)
  {
   DQ=1;                 //从高拉倒低
   DQ=0;                  //5 us
   DQ=val&0x01;                           //最低位移出
   delay1(6);                              //66 us
   val=val/2;                             //右移1位
   }
   DQ=1;
   delay1(1);
}
//
/****************DS18B20读1字节函数************************/
//从总线上取1个字节
uchar read_byte(void)
{
uchar i;
uchar value=0;
for(i=8;i>0;i--)
{
  DQ=1;
  value>>=1;
  DQ=0;                                           //4 us
  DQ=1;                                         //4 us
  if(DQ)value|=0x80;
  delay1(6);                                     //66 us
}
   DQ=1;
return(value);
}
//
/****************读出温度函数************************/
//
read_temp()
{
unsigned char a=0;
unsigned char b=0;
  ow_reset();                  //总线复位
  delay1(200);

  write_byte(0xcc);            //发命令
  write_byte(0x44);            //发转换命令
  ow_reset();
  delay1(1);

  write_byte(0xcc);            //发命令
  write_byte(0xbe);
  a=read_byte();    //读温度值的第字节
  b=read_byte();    //读温度值的高字节
  t=b;
  t <<=8;
  t =t |a;  // 两字节合成一个整型变量。
  t=t>>4;
  
  m=b;
  m<<=8;
  m=m|a;
  m=m&0x0f;
  
  }




/*******************************************************************/      
/*                                                                         
/*    LCD驱动程序                                                      

     
/*                                                                         
/*******************************************************************/ 

                                                       
                                                                        
/***************************延时子程序 ***************************/      
                                                                           
void delay(uint z)
{
uint x,y;
for(x=z;x>0;x--)
   for(y=110;y>0;y--);
}                                                
/*******************************************************************/      
/*                                                                         
/*检查LCD忙状态                                                            
/*lcd_busy为1时，忙，等待。lcd-busy为0时,闲，可写指令与数据。              
/*                                                                         
/*******************************************************************/
                                                                           
bit lcd_busy()                                                             
{                                                                          
    bit result;                                                            
    rs = 0;                                                            
    rw = 1;                                                            
    ep = 1;                                                            
    _nop_();                                                               
    _nop_();                                                               
    _nop_();                                                               
    _nop_();                                                               
     result = (bit)(P2&0x80);                                              
    ep = 0;                                                            
    return result;                                                         
}                                                                          
                                                                           
/*******************************************************************/      
/*                                                                         
/*写指令数据到LCD                                                         
/*RS=L，RW=L，E=高脉冲，D0-D7=指令码。                                    
/*                                                                         
/*******************************************************************/      
                                                                           
void lcd_wcmd(uchar cmd)                                                   
{                                                                          
   while(lcd_busy());                                                      
    rs = 0;                                                            
    rw = 0;                                                            
    ep = 0;                                                            
    _nop_();                                                               
    _nop_();                                                               
    P2= cmd;                                                              
    _nop_();                                                               
    _nop_();                                                               
    _nop_();                                                               
    _nop_();                                                               
    ep = 1;                                                            
    _nop_();                                                               
    _nop_();                                                               
    _nop_();                                                               
    _nop_();                                                               
    ep = 0;                                                            
}                                                                          
                                                                           
/*******************************************************************/      
/*                                                                         
/*写显示数据到LCD                                                          
/*RS=H，RW=L，E=高脉冲，D0-D7=数据。                                       
/*                                                                         
/*******************************************************************/      
                                                                           
void lcd_wdat(uchar d)                                                   
{                                                                          
  while(lcd_busy());                                                      
    rs= 1;                                                            
   rw = 0;                                                            
    ep = 0;                                                            
    P2 = d;                                                              
    _nop_();                                                               
    _nop_();                                                               
    _nop_();                                                               
    _nop_();                                                               
    ep = 1;                                                            
    _nop_();                                                               
    _nop_();                                                               
    _nop_();                                                               
    _nop_();                                                               
    ep = 0;                                                            
}                                                                          
                
/*******************************************************************/      
/*                                                                         
/*  设定显示位置                                                           
/*                                                                         
/*******************************************************************/      
                                                                           
void lcd_pos(uchar pos)                                                    
{                                                                          
   lcd_wcmd(pos|0x80);      //数据指针=80+地址变量                         
}                                                                          
                                                                           
     
/**********************************************************
*                                                         *
* 自定义字符写入CGRAM                                     *
*                                                         *
**********************************************************/    
void  writetab()  
{  
    unsigned char r;
    lcd_wcmd(0x40);            //写CGRAM
    for (r = 0; r<64; r++)       
    lcd_wdat(a[r]);
     
	
}
                    

/*******************************************************************/      
/*                                                                         
/*  LCD初始化设定                                                       
/*                                                                         
/*******************************************************************/                                       
void lcd_init()                                                            
{                                                                          
   rw=0;
   ep=0;                                                         
    lcd_wcmd(0x38);                                                        
    delay(5);                                                              
                                                                           
    lcd_wcmd(0x0c);          //显示开，关光标                              
    delay(5);                                                              
    lcd_wcmd(0x06);          //移动光标                                    
   delay(5);                                                              
    lcd_wcmd(0x01);          //清除LCD的显示内容                           
    delay(5);
	
  writetab();         //自定义字符写入CGRAM                                       

                     
}                                                                          
                                                                           
/*********定时器初始化********/
void timeinit()         //定时器初始化
{
  TMOD = 0x01;          //T0方式1
  TH0 = (65536-50000)/256;
  TL0 = (65536-50000)%256;
  EA = 1;
  ET0 = 1;
  TR0 = 1;
}




/*******************************显示子函数*************************************************/


void jingxian()          //静态显示函数
{
 
  lcd_pos(0x00);       //时间                 第一行
  lcd_wdat(0x00);
   lcd_pos(0x01);
  lcd_wdat(0x01);
  
  lcd_pos(0x03);           //时间初始值
  lcd_wdat(asc[0]);
  lcd_wdat(asc[0]);

  lcd_pos(0x05); 
  lcd_wdat(':');

  lcd_pos(0x06); 
  lcd_wdat(asc[0]);
  lcd_wdat(asc[0]);

  lcd_pos(0x08); 
  lcd_wdat(':');

  lcd_pos(0x09); 
  lcd_wdat(asc[0]);
  lcd_wdat(asc[0]);


  lcd_pos(0x0f);         //关闭
  lcd_wdat('-'); 


lcd_pos(0x40);             //温度             第二行
  lcd_wdat(0x02);
lcd_pos(0x41);
  lcd_wdat(0x03);

lcd_pos(0x44);        
  lcd_wdat('.');

lcd_pos(0x46);
 lcd_wdat(0x04);             //C

 

lcd_pos(0x4a);         //请设置
  lcd_wdat(0x05);

lcd_pos(0x4b);
  lcd_wdat(0x06);

lcd_pos(0x4c);
  lcd_wdat(0x07);

lcd_pos(0x4d);            //初始温度设置值
  lcd_wdat(asc[wd/10]);  
  lcd_wdat(asc[wd%10]);

  lcd_pos(0x40+15); 
   lcd_wdat(0x04);      //C

}

                            ////变显******************
void wendu()                   // 温度数值动态显示   
{
  lcd_pos(0x40+2); 
  lcd_wdat(0x30+(t%100/10));
  lcd_pos(0x40+3); 
  lcd_wdat(0x30+(t%10));
  lcd_pos(0x40+5); 
  lcd_wdat(0x30+ditab[m]);
 
  if(flag_get==1)  //定时读取当前温度
    {
  read_temp();
  flag_get=0;
    }

}


void shijian()                          //时钟数值动态显示
{
    lcd_pos(0x09); lcd_wdat(asc[miao/10]); lcd_wdat(asc[miao%10]);   //  时
    lcd_pos(0x06); lcd_wdat(asc[fen/10]);  lcd_wdat(asc[fen%10]);    //  分
    lcd_pos(0x03); lcd_wdat(asc[shi/10]);  lcd_wdat(asc[shi%10]);    //  秒
}

/***************************************************************************************/

/***************************************************************************************/

/***************************************************************************************/



void lcd_sfm(uchar add,uchar date)//2维数组
{
uchar shi,ge;
shi=date/10;
ge=date%10;
lcd_pos(add);
lcd_wdat(0x30+shi);
lcd_wdat(0x30+ge);
}



void  jd_kz()          //继电器控制 加热棒是否加热 通过实际温度 和预计温度比较进行控制
{
  if(bz==1)
    {
      if((wd%100)>(t%100))
        {jd=1;led=1;}
      if((wd%100)<=(t%100))
        {jd=0;led=0;}
    }
  if(bz==0)    
     {jd=0;led=0;}
}
/////////////////////////////////*************************************************************************
/////////////////////////////////************************************************************************
/////////////////////////////////***************************************************************
///////////////////////////////////////////////************************************************
void main()
{

  jd=0;     //继电器初始值 为0 即 为关电源
  led=0;
 
 timeinit();            //  定时器初始化
 lcd_init();            //  1602 初始化
  jingxian();           //   开启静态显示

				   
 while(1)
 {

  jd_kz();             // 循环扫描继电器功能 判断是否开启继电器进行加热

 
 if(s1num==0&&s2num==0)          // 防止 与选择按键发生显示冲突
   {
  shijian();
  wendu();
    }


  keyscan();
 }
 }
 


/////////////////////////************************************************************************
//////////////////////////////////////////////////////////*************************************
/////////////////////////************************************************************************
//////////////////////////////////////////////////////////*************************************





 /**********定时器中断*******/
void timer0() interrupt 1     //定时器中断
{

 
 TH0 = (65536-50000)/256;
 TL0 = (65536-50000)%256;
 x++;
 
if(x==20)
	{ 
		x=0;
		miao++;
        flag_get=1;//温度采集 标志位有效
		if(miao==60)
		{
			miao=0;
			fen++;
       
			if(fen==60)
			{
				fen=0;
				shi++;
				if(shi==24)
				{
					shi=0;

        		}
        
          	}

	           
 
       }
 


   }
}


void jiare_kg()                         //继电器控制开关按钮确定是否加热 或 停止加热
{
   if(k5==0)
     {
      delay(100);
      if(k5==0)
      s3num++;
     while(k5==0);
     if(s3num==1)
       {
         lcd_pos(0x0f);         //上升
         lcd_wdat('+'); 
         bz=1;
        

        }
     if(s3num==2)
       {
         lcd_pos(0x0f);         //下降
         lcd_wdat('-'); 
         bz=0;
       s3num=0;

       }
       
     }
}


void wendu_sz()                          //设置温度 开关按钮
{ 
  if(k4==0)
    {  
      delay(100);//去抖
      if(k4==0)
        s2num++;
       while(!k4);   //等待按键抬起
      if(s2num==1)
       {   yz1=0;
        lcd_wcmd(0x80+0x4e);
        lcd_wcmd(0x0f);
       }
      if(s2num==2)
        {
        lcd_wcmd(0x0c);
        s2num=0;
         yz1=1;
        }
      


    }
}



void shijian_gn()             //  时间功能按键 选择时间的时分秒位置
{
   if(k3==0)//功能键

    {
     delay(100);//去抖
     if(k3==0)

      {  

        s1num++;
        TR0=0;                   //关闭定时器
        while(!k3); 


       if(s1num==1)
         { yz2=0;
    
          lcd_pos(10);//光标闪烁
          lcd_wcmd(0x0f);
          }
       if(s1num==2)
          {
     
           lcd_pos(7);//光标闪烁
           lcd_wcmd(0x0f);
           }
       if(s1num==3)   
          {
     
           lcd_pos(4);//光标闪烁
          lcd_wcmd(0x0f);

          }
       if(s1num==4) 
          {
           lcd_wcmd(0x0c);
           TR0=1;            
           s1num=0;
            yz2=1;
          }
      }
    }
} 



void jia()                            //加  按键
{  
     if(k1==0)
       {
          delay(80);            
          if(k1==0)
            {
              // while(!k2);
           
               if(s1num==1)
                 {
                   miao++;
                    if(miao==60)
                        miao=0;
                       lcd_sfm(9,miao);
                       lcd_pos(10);//光标闪烁
                       lcd_wcmd(0x0f);    
                 }
              
               if(s1num==2)
                 {
                   fen++;
                   if(fen==60)
                      fen=0;
                      lcd_sfm(6,fen);
                     lcd_pos(7);//光标闪烁
                     lcd_wcmd(0x0f);
                 }
               if(s1num==3)
                {
                     shi++;
                    if(shi==24)
                     shi=0;
                     lcd_sfm(3,shi);
                     lcd_pos(4);//光标闪烁
                     lcd_wcmd(0x0f);
                }
          
                if(s2num==1)
                  {
                   wd++;
                 if(wd==99)
                     wd=0;
                  
                   lcd_sfm(0x4d,wd);
                   lcd_wcmd(0x80+0x4e);
                  lcd_wcmd(0x0f);
                   }
               
           }

       }
    
}
void jian()                           // 减 按键
{
   if(k2==0)
     {
        delay(80);
        if(k2==0)
         {
          //while(!k3);
        
            if(s1num==1)
              {
                miao--;
                if(miao<=-1)
                miao=59;
                lcd_sfm(9,miao);
                lcd_pos(10);//光标闪烁
                lcd_wcmd(0x0f); 
              }
           if(s1num==2)
              {
                fen--;
                if(fen<=-1)
                fen=59;
                lcd_sfm(6,fen);
                 lcd_pos(7);//光标闪烁
               lcd_wcmd(0x0f);  
              }
           if(s1num==3)
             {
               shi--;
               if(shi<=-1)
               shi=23;
               lcd_sfm(3,shi);
               lcd_pos(4);//光标闪烁
               lcd_wcmd(0x0f);
             }
           if(s2num==1)
              {
                 wd--;
               if(wd==-1)
                     wd=99;   
               lcd_sfm(0x4d,wd);
                 lcd_wcmd(0x80+0x4e);
                  lcd_wcmd(0x0f);
               }
         
       }
    }
    
}


void keyscan()                       //按键函数组
{    
     jiare_kg();                 //继电器开关按键


     if(yz2==1)         //用if互相抑制功能键 防止干扰
     {wendu_sz();}

     if(yz1==1)   
     {shijian_gn();}
       
      jia();
      jian();
       

}


