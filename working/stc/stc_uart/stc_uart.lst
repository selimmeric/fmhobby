C51 COMPILER V7.06   STC_UART                                                              03/16/2012 15:02:42 PAGE 1   


C51 COMPILER V7.06, COMPILATION OF MODULE STC_UART
OBJECT MODULE PLACED IN stc_uart.obj
COMPILER INVOKED BY: C:\Keil2\C51\BIN\C51.EXE src\stc_uart.c BROWSE DEBUG OBJECTEXTEND PRINT(.\stc_uart.lst) OBJECT(stc_
                    -uart.obj)

stmt level    source

   1          
   2          //??,?????MCU??????,???????????
   3          //??,?????MCU?????????SRAM,??????????SRAM
   4          
   5          #include<reg51.h>
   6          #include<intrins.h>
   7          sfr  S2CON    = 0x9A;
   8          //S2SM0,S2SM1,S2SM2,S2REN,S2TB8,SRB8,S2TI,S2RI
   9          
  10          sfr  IE2    = 0xAF;
  11          //X,X,X,X,X,X,ESPI,ES2
  12          
  13          sfr  S2BUF    = 0x9B;
  14          
  15          sfr  AUXR    = 0x8e;
  16          sfr      BRT    =       0x9c;
  17          sfr  IAP_CONTR =  0xC7;
  18          sfr  CCON    = 0xD8;
  19          sfr  CMOD    = 0xD9;
  20          sfr  CL      = 0xE9;
  21          sfr  CH      = 0xF9;
  22          sfr  CCAP0L  = 0xEA;
  23          sfr  CCAP0H  = 0xFA;
  24          sfr  CCAPM0  = 0xDA;
  25          sfr  CCAPM1  = 0xDB;
  26          sbit CR      = 0xDE;
  27          sbit MCU_Start_Led  =  P1^7;
  28          sbit S2_Interrupt_Receive_Led  =  P1^4;
  29          //unsigned char self_command_array[4] =  {0x22,0x33,0x44,0x55};
  30          #define Self_Define_ISP_Download_Command  0x22
  31          //#define RELOAD_COUNT  0xfb   //18.432MHz,12T,SMOD=0,9600bps
  32          
  33          #define FOSC 11080373L
  34          #define RELOAD_COUNT  0xfd   //11080373Hz,12T,SMOD=0,9600bps
  35          
  36          void serial_port_one_initial();
  37          void send_UART_one(unsigned char);
  38          void UART_one_Interrupt_Receive(void);
  39          
  40          void serial_port_two_initial();
  41          void send_UART_two(unsigned char);
  42          void UART_two_Interrupt_Receive(void);
  43          
  44          void soft_reset_to_ISP_Monitor(void);
  45          void delay(void);
  46          void display_MCU_Start_Led(void);
  47          void send_PWM(void);
  48          
  49          void main(void)
  50          {
  51   1          unsigned int array_point = 0;
  52   1              unsigned char xdata Test_array_one[512]        =
  53   1          {
  54   1              0x00,     0x01,     0x02,     0x03,     0x04,     0x05,     0x06,     0x07,
C51 COMPILER V7.06   STC_UART                                                              03/16/2012 15:02:42 PAGE 2   

  55   1              0x08,     0x09,     0x0a,     0x0b,     0x0c,     0x0d,     0x0e,     0x0f,
  56   1              0x10,     0x11,     0x12,     0x13,     0x14,     0x15,     0x16,     0x17,
  57   1              0x18,     0x19,     0x1a,     0x1b,     0x1c,     0x1d,     0x1e,     0x1f,
  58   1              0x20,     0x21,     0x22,     0x23,     0x24,     0x25,     0x26,     0x27, 
  59   1              0x28,     0x29,     0x2a,     0x2b,     0x2c,     0x2d,     0x2e,     0x2f,
  60   1              0x30,     0x31,     0x32,     0x33,     0x34,     0x35,     0x36,     0x37,
  61   1              0x38,     0x39,     0x3a,     0x3b,     0x3c,     0x3d,     0x3e,     0x3f,
  62   1              0x40,     0x41,     0x42,     0x43,     0x44,     0x45,     0x46,     0x47,
  63   1              0x48,     0x49,     0x4a,     0x4b,     0x4c,     0x4d,     0x4e,     0x4f,
  64   1              0x50,     0x51,     0x52,     0x53,     0x54,     0x55,     0x56,     0x57,
  65   1              0x58,     0x59,     0x5a,     0x5b,     0x5c,     0x5d,     0x5e,     0x5f,
  66   1              0x60,     0x61,     0x62,     0x63,     0x64,     0x65,     0x66,     0x67,
  67   1              0x68,     0x69,     0x6a,     0x6b,     0x6c,     0x6d,     0x6e,     0x6f,
  68   1              0x70,     0x71,     0x72,     0x73,     0x74,     0x75,     0x76,     0x77,
  69   1              0x78,     0x79,     0x7a,     0x7b,     0x7c,     0x7d,     0x7e,     0x7f,
  70   1              0x80,     0x81,     0x82,     0x83,     0x84,     0x85,     0x86,     0x87,
  71   1              0x88,     0x89,     0x8a,     0x8b,     0x8c,     0x8d,     0x8e,     0x8f,
  72   1              0x90,     0x91,     0x92,     0x93,     0x94,     0x95,     0x96,     0x97,
  73   1              0x98,     0x99,     0x9a,     0x9b,     0x9c,     0x9d,     0x9e,     0x9f,
  74   1              0xa0,     0xa1,     0xa2,     0xa3,     0xa4,     0xa5,     0xa6,     0xa7,
  75   1              0xa8,     0xa9,     0xaa,     0xab,     0xac,     0xad,     0xae,     0xaf,
  76   1              0xb0,     0xb1,     0xb2,     0xb3,     0xb4,     0xb5,     0xb6,     0xb7,
  77   1              0xb8,     0xb9,     0xba,     0xbb,     0xbc,     0xbd,     0xbe,     0xbf,
  78   1              0xc0,     0xc1,     0xc2,     0xc3,     0xc4,     0xc5,     0xc6,     0xc7,
  79   1              0xc8,     0xc9,     0xca,     0xcb,     0xcc,     0xcd,     0xce,     0xcf,
  80   1              0xd0,     0xd1,     0xd2,     0xd3,     0xd4,     0xd5,     0xd6,     0xd7,
  81   1              0xd8,     0xd9,     0xda,     0xdb,     0xdc,     0xdd,     0xde,     0xdf,
  82   1              0xe0,     0xe1,     0xe2,     0xe3,     0xe4,     0xe5,     0xe6,     0xe7,
  83   1              0xe8,     0xe9,     0xea,     0xeb,     0xec,     0xed,     0xee,     0xef,
  84   1              0xf0,     0xf1,     0xf2,     0xf3,     0xf4,     0xf5,     0xf6,     0xf7,
  85   1              0xf8,     0xf9,     0xfa,     0xfb,     0xfc,     0xfd,     0xfe,     0xff,
  86   1              0xff,     0xfe,     0xfd,     0xfc,     0xfb,     0xfa,     0xf9,     0xf8,
  87   1              0xf7,     0xf6,     0xf5,     0xf4,     0xf3,     0xf2,     0xf1,     0xf0,
  88   1              0xef,     0xee,     0xed,     0xec,     0xeb,     0xea,     0xe9,     0xe8,
  89   1              0xe7,     0xe6,     0xe5,     0xe4,     0xe3,     0xe2,     0xe1,     0xe0,
  90   1              0xdf,     0xde,     0xdd,     0xdc,     0xdb,     0xda,     0xd9,     0xd8,
  91   1              0xd7,     0xd6,     0xd5,     0xd4,     0xd3,     0xd2,     0xd1,     0xd0,
  92   1              0xcf,     0xce,     0xcd,     0xcc,     0xcb,     0xca,     0xc9,     0xc8,
  93   1              0xc7,     0xc6,     0xc5,     0xc4,     0xc3,     0xc2,     0xc1,     0xc0,
  94   1              0xbf,     0xbe,     0xbd,     0xbc,     0xbb,     0xba,     0xb9,     0xb8, 
  95   1              0xb7,     0xb6,     0xb5,     0xb4,     0xb3,     0xb2,     0xb1,     0xb0,
  96   1              0xaf,     0xae,     0xad,     0xac,     0xab,     0xaa,     0xa9,     0xa8,
  97   1              0xa7,     0xa6,     0xa5,     0xa4,     0xa3,     0xa2,     0xa1,     0xa0,
  98   1              0x9f,     0x9e,     0x9d,     0x9c,     0x9b,     0x9a,     0x99,     0x98,
  99   1              0x97,     0x96,     0x95,     0x94,     0x93,     0x92,     0x91,     0x90,
 100   1              0x8f,     0x8e,     0x8d,     0x8c,     0x8b,     0x8a,     0x89,     0x88,
 101   1              0x87,     0x86,     0x85,     0x84,     0x83,     0x82,     0x81,     0x80,
 102   1              0x7f,     0x7e,     0x7d,     0x7c,     0x7b,     0x7a,     0x79,     0x78,
 103   1              0x77,     0x76,     0x75,     0x74,     0x73,     0x72,     0x71,     0x70,
 104   1              0x6f,     0x6e,     0x6d,     0x6c,     0x6b,     0x6a,     0x69,     0x68,
 105   1              0x67,     0x66,     0x65,     0x64,     0x63,     0x62,     0x61,     0x60,
 106   1              0x5f,     0x5e,     0x5d,     0x5c,     0x5b,     0x5a,     0x59,     0x58, 
 107   1              0x57,     0x56,     0x55,     0x54,     0x53,     0x52,     0x51,     0x50,
 108   1              0x4f,     0x4e,     0x4d,     0x4c,     0x4b,     0x4a,     0x49,     0x48,
 109   1              0x47,     0x46,     0x45,     0x44,     0x43,     0x42,     0x41,     0x40,
 110   1              0x3f,     0x3e,     0x3d,     0x3c,     0x3b,     0x3a,     0x39,     0x38,
 111   1              0x37,     0x36,     0x35,     0x34,     0x33,     0x32,     0x31,     0x30,
 112   1              0x2f,     0x2e,     0x2d,     0x2c,     0x2b,     0x2a,     0x29,     0x28,
 113   1              0x27,     0x26,     0x25,     0x24,     0x23,     0x22,     0x21,     0x20,
 114   1              0x1f,     0x1e,     0x1d,     0x1c,     0x1b,     0x1a,     0x19,     0x18,
 115   1              0x17,     0x16,     0x15,     0x14,     0x13,     0x12,     0x11,     0x10,
 116   1              0x0f,     0x0e,     0x0d,     0x0c,     0x0b,     0x0a,     0x09,     0x08,
C51 COMPILER V7.06   STC_UART                                                              03/16/2012 15:02:42 PAGE 3   

 117   1              0x07,     0x06,     0x05,     0x04,     0x03,     0x02,     0x01,     0x00
 118   1          };
 119   1          unsigned  char i = 0;
 120   1      
 121   1          serial_port_one_initial();      //??1???
 122   1      //    serial_port_two_initial();      //??2???
 123   1          display_MCU_Start_Led();    //????????????????
 124   1      
 125   1       //   send_UART_two(0x55);            //??2???????????????
 126   1        //  send_UART_two(0xaa);            //??2???????????????
 127   1      /*
 128   1              for(array_point=0; array_point<512; array_point++)
 129   1          {
 130   1                      send_UART_two(Test_array_one[array_point]);
 131   1          }
 132   1      */
 133   1          send_UART_one(0x34);            //??1???????????????
 134   1          send_UART_one(0xa7);            //??1???????????????
 135   1      
 136   1      
 137   1      //    for(array_point=0; array_point<512; array_point++)
 138   1      
 139   1          for(array_point=0; array_point<8; array_point++)
 140   1          {
 141   2                      send_UART_one(Test_array_one[array_point]+'0');
 142   2          }
 143   1      
 144   1              send_UART_one('\r');
 145   1              send_UART_one('\n');
 146   1      //    send_PWM();                 //6kHz PWM,  50% duty
 147   1          while(1);
 148   1      }
 149          void serial_port_one_initial()
 150          {
 151   1          SCON    =   0x50;   //0101,0000 8??????,??????
 152   1      //   TMOD    =   0x21;   //0011,0001 ?????1?8????????
 153   1      //    TH1     =   RELOAD_COUNT;   //?????1?????
 154   1      //    TL1     =   RELOAD_COUNT;
 155   1      //    TR1     =   1;    //????1
 156   1              BRT     =       RELOAD_COUNT;
 157   1      //  BRTR = 1, S1BRS = 1, EXTRAM = 1 ENABLE EXTRAM
 158   1              AUXR    =       0x11; // T0x12,T1x12,UART_M0x6,BRTR,S2SMOD,BRTx12,EXTRAM,S1BRS  
 159   1              AUXR    |=      0x04; 
 160   1          ES      =   1;    //??????
 161   1          EA      =   1;    //????
 162   1      }
 163          
 164          void serial_port_two_initial()
 165          {
 166   1      //sfr  SCON    = 0x98;
 167   1      //SM0,SM1,SM2,REN,TB8,RB8,TI,RI
 168   1      
 169   1      //sfr  S2CON    = 0x9A;
 170   1      //S2SM0,S2SM1,S2SM2,S2REN,S2TB8,S2RB8,S2TI,S2RI
 171   1      //sfr  S2BUF    = 0x9B;
 172   1      //sfr  IE2    = 0xAF;
 173   1      //X,X,X,X,X,X,ESPI,ES2
 174   1      
 175   1              S2CON    =   0x50;   //0101,0000 8??????,??????,????
 176   1       
 177   1              BRT     =       RELOAD_COUNT;
 178   1      //  BRTR = 1, S1BRS = 1, EXTRAM = 0 ENABLE EXTRAM
C51 COMPILER V7.06   STC_UART                                                              03/16/2012 15:02:42 PAGE 4   

 179   1              AUXR    =       0x11; // T0x12,T1x12,UART_M0x6,BRTR,S2SMOD,BRTx12,EXTRAM,S1BRS  
 180   1      //    ES      =   1;    //????1??
 181   1      //      ES2     =       1
 182   1              IE2     =       0x01;   //????2??,ES2=1
 183   1          EA      =   1;    //????
 184   1      }
 185          
 186          void send_UART_one(unsigned char i)
 187          {
 188   1          ES     =   0;  //?????
 189   1          TI     =   0;  //??????????????
 190   1          SBUF   =   i;
 191   1          while(TI ==0); //??????
 192   1          TI     =   0;  //??????????????
 193   1          ES     =   1;  //??????
 194   1      }
 195          
 196          void send_UART_two(unsigned char i)
 197          {
 198   1      //sfr  SCON    = 0x98;
 199   1      //SM0,SM1,SM2,REN,TB8,RB8,TI,RI
 200   1      
 201   1      //sfr  S2CON    = 0x9A;
 202   1      //S2SM0,S2SM1,S2SM2,S2REN,S2TB8,S2RB8,S2TI,S2RI
 203   1      //sfr  S2BUF    = 0x9B;
 204   1      //sfr  IE2    = 0xAF;
 205   1      //X,X,X,X,X,X,ESPI,ES2
 206   1      
 207   1              unsigned char temp = 0;
 208   1      
 209   1      //    ES     =   0;  //???1??
 210   1              IE2     =       0x00;   //???2??,es2=0
 211   1      //    TI     =   0;  //????1??????????
 212   1          S2CON       =       S2CON & 0xFD; //B'11111101,????2??????????
 213   1      //    SBUF   =   i;
 214   1          S2BUF   =   i;
 215   1      //    while(TI ==0); //??????
 216   1          do
 217   1              {
 218   2                      temp = S2CON;
 219   2                      temp = temp & 0x02;
 220   2              }while(temp==0);
 221   1      
 222   1              
 223   1      //      TI     =   0;  //??????????????
 224   1          S2CON       =       S2CON & 0xFD; //B'11111101,????2??????????
 225   1      //    ES     =   1;  //????1??
 226   1      //      ES2     =       1
 227   1              IE2     =       0x01;   //????2??,ES2=1
 228   1      }
 229          
 230          void UART_one_Interrupt_Receive(void) interrupt 4
 231          {
 232   1          unsigned char   k   =   0;
 233   1          if(RI==1)
 234   1          {
 235   2              RI  =   0;
 236   2              k   =   SBUF;
 237   2              if(k==Self_Define_ISP_Download_Command)   //????????
 238   2              {
 239   3                  delay();    //??1?????
 240   3                  delay();    //??1?????
C51 COMPILER V7.06   STC_UART                                                              03/16/2012 15:02:42 PAGE 5   

 241   3                  soft_reset_to_ISP_Monitor();    //??????ISP???
 242   3              }
 243   2              send_UART_one(k+1);
 244   2          }
 245   1          else
 246   1          {
 247   2              TI  =  0;
 248   2          }
 249   1      }
 250          
 251          void UART_two_Interrupt_Receive(void) interrupt 8
 252          {
 253   1      //sfr  SCON    = 0x98;
 254   1      //SM0,SM1,SM2,REN,TB8,RB8,TI,RI
 255   1      
 256   1      //sfr  S2CON    = 0x9A;
 257   1      //S2SM0,S2SM1,S2SM2,S2REN,S2TB8,S2RB8,S2TI,S2RI
 258   1      //sfr  S2BUF    = 0x9B;
 259   1      //sfr  IE2    = 0xAF;
 260   1      //X,X,X,X,X,X,ESPI,ES2
 261   1      
 262   1              unsigned char   k   =   0;
 263   1              k = S2CON ;
 264   1              k       = k & 0x01;
 265   1              //if(S2RI==1)
 266   1          if(k==1)
 267   1          {
 268   2              //RI  =   0;
 269   2                      S2CON = S2CON & 0xFE; //1111,1110
 270   2                      S2_Interrupt_Receive_Led = 0;
 271   2      
 272   2              k   =   S2BUF;
 273   2              if(k==Self_Define_ISP_Download_Command)   //????????
 274   2              {
 275   3      
 276   3                              delay();    //??1?????
 277   3                  delay();    //??1?????
 278   3      
 279   3                  soft_reset_to_ISP_Monitor();    //??????ISP???
 280   3              }
 281   2              send_UART_two(k+1);
 282   2          }
 283   1          else
 284   1          {
 285   2              //TI  =  0;
 286   2                      S2CON = S2CON & 0xFD; //1111,1101
 287   2          }
 288   1      }
 289          void soft_reset_to_ISP_Monitor(void)
 290          {
 291   1          IAP_CONTR   =    0x60;   //0110,0000   ??????ISP???
 292   1      }
 293          void delay(void)
 294          {
 295   1          unsigned int j  =   0;
 296   1          unsigned int g  =   0;
 297   1          for(j=0;j<5;j++)
 298   1          {
 299   2              for(g=0;g<60000;g++)
 300   2              {
 301   3                  _nop_();
 302   3                  _nop_();
C51 COMPILER V7.06   STC_UART                                                              03/16/2012 15:02:42 PAGE 6   

 303   3                  _nop_();
 304   3                  _nop_();
 305   3                  _nop_();
 306   3              }
 307   2          }
 308   1      }
 309           
 310          void display_MCU_Start_Led(void)   
 311          {
 312   1      //sbit MCU_Start_Led  =  P1^7;
 313   1          unsigned  char i = 0;
 314   1          for(i=0;i<1;i++)
 315   1          {
 316   2              MCU_Start_Led   =   0;  //??MCU???????
 317   2              delay();
 318   2              MCU_Start_Led   =   1;  //??MCU???????
 319   2              delay();
 320   2              MCU_Start_Led   =   0;  //??MCU???????
 321   2          }
 322   1      }
 323          
 324          void send_PWM(void)
 325          {
 326   1          CMOD    =   0x00;   // CIDL - - - - CPS1 CPS0 ECF  Setup PCA Timer
 327   1                              // CPS1 CPS0 = 00, Fosc/12 is PCA/PWM clock
 328   1                              // 18432000/12/256 = 6000
 329   1          CL      =   0x00;
 330   1          CH      =   0x00;
 331   1          CCAP0L  =   0x80;   //Set the initial value same as CCAP0H
 332   1          CCAP0H  =   0x80;   //50% Duty Cycle
 333   1          CCAPM0  =   0x42;   //0100,0010 Setup PCA module 0 in 8BIT PWM, P3.7
 334   1          CR      =   1;      //?? PCA/PWM ???
 335   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    470    ----
   CONSTANT SIZE    =    512    ----
   XDATA SIZE       =   ----     512
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       8
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
